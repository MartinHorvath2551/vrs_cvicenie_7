
usart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08004608  08004608  00014608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c0  080047c0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080047c0  080047c0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047c0  080047c0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080047c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000084  0800484c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  0800484c  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006421  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001527  00000000  00000000  000264d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  00027a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000588  00000000  00000000  00028040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003530  00000000  00000000  000285c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005249  00000000  00000000  0002baf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000721fc  00000000  00000000  00030d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a2f3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b8  00000000  00000000  000a2fb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045f0 	.word	0x080045f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080045f0 	.word	0x080045f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa93 f3a3 	rbit	r3, r3
 8000b86:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	fab3 f383 	clz	r3, r3
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2103      	movs	r1, #3
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	fa93 f3a3 	rbit	r3, r3
 8000ba4:	61bb      	str	r3, [r7, #24]
  return(result);
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b085      	sub	sp, #20
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	401a      	ands	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	fb01 f303 	mul.w	r3, r1, r3
 8000be4:	431a      	orrs	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	605a      	str	r2, [r3, #4]
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b089      	sub	sp, #36	; 0x24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	613b      	str	r3, [r7, #16]
  return(result);
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	fab3 f383 	clz	r3, r3
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	401a      	ands	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	fa93 f3a3 	rbit	r3, r3
 8000c2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fab3 f383 	clz	r3, r3
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000c44:	bf00      	nop
 8000c46:	3724      	adds	r7, #36	; 0x24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa93 f3a3 	rbit	r3, r3
 8000c6a:	613b      	str	r3, [r7, #16]
  return(result);
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2103      	movs	r1, #3
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa93 f3a3 	rbit	r3, r3
 8000c88:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	fab3 f383 	clz	r3, r3
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	60da      	str	r2, [r3, #12]
}
 8000c9e:	bf00      	nop
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b089      	sub	sp, #36	; 0x24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	6a1a      	ldr	r2, [r3, #32]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	613b      	str	r3, [r7, #16]
  return(result);
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	210f      	movs	r1, #15
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	61bb      	str	r3, [r7, #24]
  return(result);
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fab3 f383 	clz	r3, r3
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000cf8:	bf00      	nop
 8000cfa:	3724      	adds	r7, #36	; 0x24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa93 f3a3 	rbit	r3, r3
 8000d20:	613b      	str	r3, [r7, #16]
  return(result);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	fab3 f383 	clz	r3, r3
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	401a      	ands	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	0a1b      	lsrs	r3, r3, #8
 8000d38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa93 f3a3 	rbit	r3, r3
 8000d40:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	431a      	orrs	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000d56:	bf00      	nop
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b088      	sub	sp, #32
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	613b      	str	r3, [r7, #16]
  return(result);
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	fab3 f383 	clz	r3, r3
 8000d88:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d8a:	e048      	b.n	8000e1e <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d03a      	beq.n	8000e18 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	461a      	mov	r2, r3
 8000da8:	69b9      	ldr	r1, [r7, #24]
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fede 	bl	8000b6c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d003      	beq.n	8000dc0 <LL_GPIO_Init+0x5e>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d106      	bne.n	8000dce <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	69b9      	ldr	r1, [r7, #24]
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff14 	bl	8000bf6 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	69b9      	ldr	r1, [r7, #24]
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff3a 	bl	8000c50 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d119      	bne.n	8000e18 <LL_GPIO_Init+0xb6>
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	fa93 f3a3 	rbit	r3, r3
 8000dee:	60bb      	str	r3, [r7, #8]
  return(result);
 8000df0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000df2:	fab3 f383 	clz	r3, r3
 8000df6:	2b07      	cmp	r3, #7
 8000df8:	d807      	bhi.n	8000e0a <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	69b9      	ldr	r1, [r7, #24]
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff51 	bl	8000caa <LL_GPIO_SetAFPin_0_7>
 8000e08:	e006      	b.n	8000e18 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	69b9      	ldr	r1, [r7, #24]
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff76 	bl	8000d04 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1af      	bne.n	8000d8c <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d003      	beq.n	8000e3c <LL_GPIO_Init+0xda>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d107      	bne.n	8000e4c <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	6819      	ldr	r1, [r3, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	461a      	mov	r2, r3
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff febd 	bl	8000bc6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <LL_RCC_HSI_IsReady+0x20>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	bf0c      	ite	eq
 8000e68:	2301      	moveq	r3, #1
 8000e6a:	2300      	movne	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40021000 	.word	0x40021000

08000e7c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <LL_RCC_LSE_IsReady+0x20>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	bf0c      	ite	eq
 8000e8c:	2301      	moveq	r3, #1
 8000e8e:	2300      	movne	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <LL_RCC_GetSysClkSource+0x18>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000

08000ebc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <LL_RCC_GetAHBPrescaler+0x18>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <LL_RCC_GetAPB2Prescaler+0x18>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <LL_RCC_GetUSARTClockSource+0x28>)
 8000f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f1c:	2103      	movs	r1, #3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	401a      	ands	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	061b      	lsls	r3, r3, #24
 8000f2a:	4313      	orrs	r3, r2
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000

08000f3c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <LL_RCC_PLL_GetMainSource+0x18>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000

08000f58 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <LL_RCC_PLL_GetPrediv+0x18>)
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	f003 030f 	and.w	r3, r3, #15
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000f98:	f000 f860 	bl	800105c <RCC_GetSystemClockFreq>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f87a 	bl	80010a0 <RCC_GetHCLKClockFreq>
 8000fac:	4602      	mov	r2, r0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f888 	bl	80010cc <RCC_GetPCLK1ClockFreq>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f894 	bl	80010f4 <RCC_GetPCLK2ClockFreq>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60da      	str	r2, [r3, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d12a      	bne.n	8001044 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff8e 	bl	8000f10 <LL_RCC_GetUSARTClockSource>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d00f      	beq.n	800101a <LL_RCC_GetUSARTClockFreq+0x3e>
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d005      	beq.n	800100a <LL_RCC_GetUSARTClockFreq+0x2e>
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d114      	bne.n	800102c <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001002:	f000 f82b 	bl	800105c <RCC_GetSystemClockFreq>
 8001006:	60f8      	str	r0, [r7, #12]
        break;
 8001008:	e021      	b.n	800104e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800100a:	f7ff ff25 	bl	8000e58 <LL_RCC_HSI_IsReady>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d019      	beq.n	8001048 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8001016:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001018:	e016      	b.n	8001048 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800101a:	f7ff ff2f 	bl	8000e7c <LL_RCC_LSE_IsReady>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8001024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001028:	60fb      	str	r3, [r7, #12]
        }
        break;
 800102a:	e00f      	b.n	800104c <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800102c:	f000 f816 	bl	800105c <RCC_GetSystemClockFreq>
 8001030:	4603      	mov	r3, r0
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f834 	bl	80010a0 <RCC_GetHCLKClockFreq>
 8001038:	4603      	mov	r3, r0
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f846 	bl	80010cc <RCC_GetPCLK1ClockFreq>
 8001040:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001042:	e004      	b.n	800104e <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8001044:	bf00      	nop
 8001046:	e002      	b.n	800104e <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001048:	bf00      	nop
 800104a:	e000      	b.n	800104e <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 800104c:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	007a1200 	.word	0x007a1200

0800105c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001066:	f7ff ff1b 	bl	8000ea0 <LL_RCC_GetSysClkSource>
 800106a:	4603      	mov	r3, r0
 800106c:	2b04      	cmp	r3, #4
 800106e:	d006      	beq.n	800107e <RCC_GetSystemClockFreq+0x22>
 8001070:	2b08      	cmp	r3, #8
 8001072:	d007      	beq.n	8001084 <RCC_GetSystemClockFreq+0x28>
 8001074:	2b00      	cmp	r3, #0
 8001076:	d109      	bne.n	800108c <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <RCC_GetSystemClockFreq+0x40>)
 800107a:	607b      	str	r3, [r7, #4]
      break;
 800107c:	e009      	b.n	8001092 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <RCC_GetSystemClockFreq+0x40>)
 8001080:	607b      	str	r3, [r7, #4]
      break;
 8001082:	e006      	b.n	8001092 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001084:	f000 f84a 	bl	800111c <RCC_PLL_GetFreqDomain_SYS>
 8001088:	6078      	str	r0, [r7, #4]
      break;
 800108a:	e002      	b.n	8001092 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <RCC_GetSystemClockFreq+0x40>)
 800108e:	607b      	str	r3, [r7, #4]
      break;
 8001090:	bf00      	nop
  }

  return frequency;
 8001092:	687b      	ldr	r3, [r7, #4]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	007a1200 	.word	0x007a1200

080010a0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80010a8:	f7ff ff08 	bl	8000ebc <LL_RCC_GetAHBPrescaler>
 80010ac:	4603      	mov	r3, r0
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <RCC_GetHCLKClockFreq+0x28>)
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	461a      	mov	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	40d3      	lsrs	r3, r2
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	08004660 	.word	0x08004660

080010cc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80010d4:	f7ff ff00 	bl	8000ed8 <LL_RCC_GetAPB1Prescaler>
 80010d8:	4603      	mov	r3, r0
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <RCC_GetPCLK1ClockFreq+0x24>)
 80010de:	5cd3      	ldrb	r3, [r2, r3]
 80010e0:	461a      	mov	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	40d3      	lsrs	r3, r2
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	08004670 	.word	0x08004670

080010f4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80010fc:	f7ff fefa 	bl	8000ef4 <LL_RCC_GetAPB2Prescaler>
 8001100:	4603      	mov	r3, r0
 8001102:	0adb      	lsrs	r3, r3, #11
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <RCC_GetPCLK2ClockFreq+0x24>)
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	461a      	mov	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	40d3      	lsrs	r3, r2
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	08004670 	.word	0x08004670

0800111c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800112a:	f7ff ff07 	bl	8000f3c <LL_RCC_PLL_GetMainSource>
 800112e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113a:	d003      	beq.n	8001144 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800113c:	e005      	b.n	800114a <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001140:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001142:	e005      	b.n	8001150 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001146:	60fb      	str	r3, [r7, #12]
      break;
 8001148:	e002      	b.n	8001150 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800114c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800114e:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001150:	f7ff ff10 	bl	8000f74 <LL_RCC_PLL_GetPrediv>
 8001154:	4603      	mov	r3, r0
 8001156:	3301      	adds	r3, #1
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	fbb2 f4f3 	udiv	r4, r2, r3
 800115e:	f7ff fefb 	bl	8000f58 <LL_RCC_PLL_GetMultiplicator>
 8001162:	4603      	mov	r3, r0
 8001164:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001168:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800116c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	fa92 f2a2 	rbit	r2, r2
 8001174:	603a      	str	r2, [r7, #0]
  return(result);
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	fab2 f282 	clz	r2, r2
 800117c:	40d3      	lsrs	r3, r2
 800117e:	3302      	adds	r3, #2
 8001180:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001184:	4618      	mov	r0, r3
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	003d0900 	.word	0x003d0900
 8001190:	007a1200 	.word	0x007a1200

08001194 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	605a      	str	r2, [r3, #4]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001206:	b4b0      	push	{r4, r5, r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8001214:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8001216:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800121e:	d114      	bne.n	800124a <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	005a      	lsls	r2, r3, #1
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	441a      	add	r2, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001230:	b29b      	uxth	r3, r3
 8001232:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001234:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001238:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800123a:	086b      	lsrs	r3, r5, #1
 800123c:	b29b      	uxth	r3, r3
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001248:	e00a      	b.n	8001260 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	085a      	lsrs	r2, r3, #1
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	441a      	add	r2, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	fbb2 f3f3 	udiv	r3, r2, r3
 8001258:	b29b      	uxth	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	60da      	str	r2, [r3, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bcb0      	pop	{r4, r5, r7}
 8001268:	4770      	bx	lr
	...

0800126c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff88 	bl	8001194 <LL_USART_IsEnabled>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d14e      	bne.n	8001328 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <LL_USART_Init+0xc8>)
 8001290:	4013      	ands	r3, r2
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	6851      	ldr	r1, [r2, #4]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	68d2      	ldr	r2, [r2, #12]
 800129a:	4311      	orrs	r1, r2
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	6912      	ldr	r2, [r2, #16]
 80012a0:	4311      	orrs	r1, r2
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	6992      	ldr	r2, [r2, #24]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	4619      	mov	r1, r3
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff80 	bl	80011ba <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4619      	mov	r1, r3
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff8d 	bl	80011e0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <LL_USART_Init+0xcc>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d104      	bne.n	80012d8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fe84 	bl	8000fdc <LL_RCC_GetUSARTClockFreq>
 80012d4:	61b8      	str	r0, [r7, #24]
 80012d6:	e016      	b.n	8001306 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a18      	ldr	r2, [pc, #96]	; (800133c <LL_USART_Init+0xd0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d107      	bne.n	80012f0 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe53 	bl	8000f90 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	61bb      	str	r3, [r7, #24]
 80012ee:	e00a      	b.n	8001306 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <LL_USART_Init+0xd4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d106      	bne.n	8001306 <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe47 	bl	8000f90 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00d      	beq.n	8001328 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d009      	beq.n	8001328 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	699a      	ldr	r2, [r3, #24]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	69b9      	ldr	r1, [r7, #24]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff6f 	bl	8001206 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001328:	7ffb      	ldrb	r3, [r7, #31]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	efff69f3 	.word	0xefff69f3
 8001338:	40013800 	.word	0x40013800
 800133c:	40004400 	.word	0x40004400
 8001340:	40004800 	.word	0x40004800

08001344 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4a07      	ldr	r2, [pc, #28]	; (8001374 <LL_InitTick+0x30>)
 8001358:	3b01      	subs	r3, #1
 800135a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <LL_InitTick+0x30>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <LL_InitTick+0x30>)
 8001364:	2205      	movs	r2, #5
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e010 	.word	0xe000e010

08001378 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001380:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ffdd 	bl	8001344 <LL_InitTick>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <LL_mDelay+0x44>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80013a2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013aa:	d00c      	beq.n	80013c6 <LL_mDelay+0x32>
  {
    Delay++;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3301      	adds	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80013b2:	e008      	b.n	80013c6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <LL_mDelay+0x44>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <LL_mDelay+0x32>
    {
      Delay--;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
  while (Delay)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f3      	bne.n	80013b4 <LL_mDelay+0x20>
    }
  }
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e010 	.word	0xe000e010

080013dc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <LL_SetSystemCoreClock+0x1c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	2000001c 	.word	0x2000001c

080013fc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <NVIC_EnableIRQ+0x30>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	da0b      	bge.n	800145c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <NVIC_SetPriority+0x4c>)
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	3b04      	subs	r3, #4
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145a:	e009      	b.n	8001470 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <NVIC_SetPriority+0x50>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	e000e100 	.word	0xe000e100

08001484 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4313      	orrs	r3, r2
 8001496:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800149a:	695a      	ldr	r2, [r3, #20]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4013      	ands	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000

080014b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff ffe3 	bl	8001484 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80014be:	2100      	movs	r1, #0
 80014c0:	2010      	movs	r0, #16
 80014c2:	f7ff ffb5 	bl	8001430 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80014c6:	2010      	movs	r0, #16
 80014c8:	f7ff ff98 	bl	80013fc <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 80014cc:	2100      	movs	r1, #0
 80014ce:	2011      	movs	r0, #17
 80014d0:	f7ff ffae 	bl	8001430 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014d4:	2011      	movs	r0, #17
 80014d6:	f7ff ff91 	bl	80013fc <NVIC_EnableIRQ>

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <LL_AHB1_GRP1_EnableClock>:
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4013      	ands	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40021000 	.word	0x40021000

08001510 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	463b      	mov	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001542:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001546:	f7ff ffcb 	bl	80014e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800154a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800154e:	f7ff ffc7 	bl	80014e0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8001552:	2108      	movs	r1, #8
 8001554:	480a      	ldr	r0, [pc, #40]	; (8001580 <MX_GPIO_Init+0x54>)
 8001556:	f7ff ffdb 	bl	8001510 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800155a:	2308      	movs	r3, #8
 800155c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800155e:	2301      	movs	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	463b      	mov	r3, r7
 8001570:	4619      	mov	r1, r3
 8001572:	4803      	ldr	r0, [pc, #12]	; (8001580 <MX_GPIO_Init+0x54>)
 8001574:	f7ff fbf5 	bl	8000d62 <LL_GPIO_Init>

}
 8001578:	bf00      	nop
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	48000400 	.word	0x48000400

08001584 <NVIC_SetPriorityGrouping>:
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <LL_RCC_HSI_Enable>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <LL_RCC_HSI_Enable+0x1c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <LL_RCC_HSI_Enable+0x1c>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000

080015ec <LL_RCC_HSI_IsReady>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <LL_RCC_HSI_IsReady+0x20>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000

08001610 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4904      	ldr	r1, [pc, #16]	; (8001638 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <LL_RCC_SetSysClkSource>:
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <LL_RCC_SetSysClkSource+0x24>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f023 0203 	bic.w	r2, r3, #3
 800164c:	4904      	ldr	r1, [pc, #16]	; (8001660 <LL_RCC_SetSysClkSource+0x24>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000

08001664 <LL_RCC_GetSysClkSource>:
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <LL_RCC_GetSysClkSource+0x18>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 030c 	and.w	r3, r3, #12
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000

08001680 <LL_RCC_SetAHBPrescaler>:
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001690:	4904      	ldr	r1, [pc, #16]	; (80016a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40021000 	.word	0x40021000

080016a8 <LL_RCC_SetAPB1Prescaler>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016b8:	4904      	ldr	r1, [pc, #16]	; (80016cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000

080016d0 <LL_RCC_SetAPB2Prescaler>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016e0:	4904      	ldr	r1, [pc, #16]	; (80016f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40021000 	.word	0x40021000

080016f8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001702:	69da      	ldr	r2, [r3, #28]
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <LL_APB1_GRP1_EnableClock+0x2c>)
 800170e:	69da      	ldr	r2, [r3, #28]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4013      	ands	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000

08001728 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001732:	699a      	ldr	r2, [r3, #24]
 8001734:	4907      	ldr	r1, [pc, #28]	; (8001754 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4313      	orrs	r3, r2
 800173a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <LL_APB2_GRP1_EnableClock+0x2c>)
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40021000 	.word	0x40021000

08001758 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <LL_FLASH_SetLatency+0x24>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 0207 	bic.w	r2, r3, #7
 8001768:	4904      	ldr	r1, [pc, #16]	; (800177c <LL_FLASH_SetLatency+0x24>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40022000 	.word	0x40022000

08001780 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <LL_FLASH_GetLatency+0x18>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40022000 	.word	0x40022000

0800179c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d106      	bne.n	80017b8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <LL_SYSTICK_SetClkSource+0x34>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <LL_SYSTICK_SetClkSource+0x34>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80017b6:	e005      	b.n	80017c4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <LL_SYSTICK_SetClkSource+0x34>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <LL_SYSTICK_SetClkSource+0x34>)
 80017be:	f023 0304 	bic.w	r3, r3, #4
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <main>:
	int lowL = 0;



int main(void)
{
 80017d4:	b5b0      	push	{r4, r5, r7, lr}
 80017d6:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 80017da:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80017dc:	2001      	movs	r0, #1
 80017de:	f7ff ffa3 	bl	8001728 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80017e2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80017e6:	f7ff ff87 	bl	80016f8 <LL_APB1_GRP1_EnableClock>
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ea:	2003      	movs	r0, #3
 80017ec:	f7ff feca 	bl	8001584 <NVIC_SetPriorityGrouping>

  /* Configure the system clock */
  SystemClock_Config();
 80017f0:	f000 f8ae 	bl	8001950 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f4:	f7ff fe9a 	bl	800152c <MX_GPIO_Init>
  MX_DMA_Init();
 80017f8:	f7ff fe5c 	bl	80014b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017fc:	f000 fe36 	bl	800246c <MX_USART2_UART_Init>

  /* Space for your local variables, callback registration ...*/


  uint8_t tx_data[1000];
  uint8_t tx_data1[] = " Buffer capacity: 256";
 8001800:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001804:	4a48      	ldr	r2, [pc, #288]	; (8001928 <main+0x154>)
 8001806:	461c      	mov	r4, r3
 8001808:	4615      	mov	r5, r2
 800180a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001812:	6020      	str	r0, [r4, #0]
 8001814:	3404      	adds	r4, #4
 8001816:	8021      	strh	r1, [r4, #0]
  uint8_t tx_data2[] = " bytes, occupied memory: ";
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	4a43      	ldr	r2, [pc, #268]	; (800192c <main+0x158>)
 800181e:	461c      	mov	r4, r3
 8001820:	4615      	mov	r5, r2
 8001822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001826:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800182a:	c403      	stmia	r4!, {r0, r1}
 800182c:	8022      	strh	r2, [r4, #0]

  uint8_t tx_data3[] = " bytes, load [in %]: ";
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4a3f      	ldr	r2, [pc, #252]	; (8001930 <main+0x15c>)
 8001834:	461c      	mov	r4, r3
 8001836:	4615      	mov	r5, r2
 8001838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800183a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001840:	6020      	str	r0, [r4, #0]
 8001842:	3404      	adds	r4, #4
 8001844:	8021      	strh	r1, [r4, #0]

  uint8_t tx_data4[] = "%\r\n";
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	4a3a      	ldr	r2, [pc, #232]	; (8001934 <main+0x160>)
 800184c:	601a      	str	r2, [r3, #0]

  char used_memory_string[4] = "0";
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2230      	movs	r2, #48	; 0x30
 8001852:	601a      	str	r2, [r3, #0]
  char load_string[4] = "0";
 8001854:	463b      	mov	r3, r7
 8001856:	2230      	movs	r2, #48	; 0x30
 8001858:	601a      	str	r2, [r3, #0]
  	  //type your code here:
  USART2_RegisterCallback(proccesDmaData);
 800185a:	4837      	ldr	r0, [pc, #220]	; (8001938 <main+0x164>)
 800185c:	f000 fdf4 	bl	8002448 <USART2_RegisterCallback>
	   */

  	  	  	  //type your code here:
		#if POLLING
	  	//Polling for new data, no interrupts
	  		USART2_CheckDmaReception();
 8001860:	f000 fefc 	bl	800265c <USART2_CheckDmaReception>
	  		LL_mDelay(10);
 8001864:	200a      	movs	r0, #10
 8001866:	f7ff fd95 	bl	8001394 <LL_mDelay>
		#else
	  		USART2_PutBuffer(tx_data, sizeof(tx_data));
	  		LL_mDelay(1000);
		#endif

		memset(tx_data,0,1000);
 800186a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800186e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f001 f801 	bl	800287c <memset>

		sprintf(used_memory_string, "%d", occupied_memory);
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <main+0x168>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	492f      	ldr	r1, [pc, #188]	; (8001940 <main+0x16c>)
 8001884:	4618      	mov	r0, r3
 8001886:	f001 f801 	bl	800288c <siprintf>
		//sprintf(load_string, "%d", (int)load);
		gcvt(load, 4, load_string);
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <main+0x170>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe52 	bl	8000538 <__aeabi_f2d>
 8001894:	4604      	mov	r4, r0
 8001896:	460d      	mov	r5, r1
 8001898:	463b      	mov	r3, r7
 800189a:	4619      	mov	r1, r3
 800189c:	2004      	movs	r0, #4
 800189e:	ec45 4b10 	vmov	d0, r4, r5
 80018a2:	f000 ff95 	bl	80027d0 <gcvt>

		strcat(tx_data, tx_data1);
 80018a6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 f80b 	bl	80028cc <strcat>
		strcat(tx_data, tx_data2);
 80018b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80018ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f001 f803 	bl	80028cc <strcat>
		strcat(tx_data, used_memory_string);
 80018c6:	1d3a      	adds	r2, r7, #4
 80018c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fffc 	bl	80028cc <strcat>
		strcat(tx_data, tx_data3);
 80018d4:	f107 020c 	add.w	r2, r7, #12
 80018d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fff4 	bl	80028cc <strcat>
		strcat(tx_data, load_string);
 80018e4:	463a      	mov	r2, r7
 80018e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 ffed 	bl	80028cc <strcat>
		strcat(tx_data, tx_data4);
 80018f2:	f107 0208 	add.w	r2, r7, #8
 80018f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 ffe5 	bl	80028cc <strcat>


		if(test)
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <main+0x174>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <main+0x13e>
		{
			USART2_PutBuffer(test_message, sizeof(test_message));
 800190a:	211c      	movs	r1, #28
 800190c:	480f      	ldr	r0, [pc, #60]	; (800194c <main+0x178>)
 800190e:	f000 fe85 	bl	800261c <USART2_PutBuffer>
		}

		 USART2_PutBuffer(tx_data, sizeof(tx_data));
 8001912:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001916:	21e8      	movs	r1, #232	; 0xe8
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fe7f 	bl	800261c <USART2_PutBuffer>

	  	LL_mDelay(200);
 800191e:	20c8      	movs	r0, #200	; 0xc8
 8001920:	f7ff fd38 	bl	8001394 <LL_mDelay>
  {
 8001924:	e79c      	b.n	8001860 <main+0x8c>
 8001926:	bf00      	nop
 8001928:	0800460c 	.word	0x0800460c
 800192c:	08004624 	.word	0x08004624
 8001930:	08004640 	.word	0x08004640
 8001934:	000a0d25 	.word	0x000a0d25
 8001938:	080019bd 	.word	0x080019bd
 800193c:	200000c8 	.word	0x200000c8
 8001940:	08004608 	.word	0x08004608
 8001944:	200000cc 	.word	0x200000cc
 8001948:	200000a0 	.word	0x200000a0
 800194c:	20000000 	.word	0x20000000

08001950 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff feff 	bl	8001758 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800195a:	f7ff ff11 	bl	8001780 <LL_FLASH_GetLatency>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001964:	f000 f8a2 	bl	8001aac <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001968:	f7ff fe30 	bl	80015cc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800196c:	bf00      	nop
 800196e:	f7ff fe3d 	bl	80015ec <LL_RCC_HSI_IsReady>
 8001972:	4603      	mov	r3, r0
 8001974:	2b01      	cmp	r3, #1
 8001976:	d1fa      	bne.n	800196e <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001978:	2010      	movs	r0, #16
 800197a:	f7ff fe49 	bl	8001610 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800197e:	2000      	movs	r0, #0
 8001980:	f7ff fe7e 	bl	8001680 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fe8f 	bl	80016a8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fea0 	bl	80016d0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fe53 	bl	800163c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001996:	bf00      	nop
 8001998:	f7ff fe64 	bl	8001664 <LL_RCC_GetSysClkSource>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1fa      	bne.n	8001998 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <SystemClock_Config+0x68>)
 80019a4:	f7ff fce8 	bl	8001378 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80019a8:	2004      	movs	r0, #4
 80019aa:	f7ff fef7 	bl	800179c <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80019ae:	4802      	ldr	r0, [pc, #8]	; (80019b8 <SystemClock_Config+0x68>)
 80019b0:	f7ff fd14 	bl	80013dc <LL_SetSystemCoreClock>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	007a1200 	.word	0x007a1200

080019bc <proccesDmaData>:

/*
 * Implementation of function processing data received via USART.
 */
void proccesDmaData(const uint8_t* data, uint16_t len)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
	/* Process received data */

		// type your algorithm here:

	for(uint8_t i = 0; i < len; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e05a      	b.n	8001a84 <proccesDmaData+0xc8>
	{
		if(*(data+i) == '#')
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b23      	cmp	r3, #35	; 0x23
 80019d8:	d103      	bne.n	80019e2 <proccesDmaData+0x26>
		{
			start = 1;
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <proccesDmaData+0xe0>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e011      	b.n	8001a06 <proccesDmaData+0x4a>
		}
		else if(*(data+i) == '$')
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b24      	cmp	r3, #36	; 0x24
 80019ec:	d10b      	bne.n	8001a06 <proccesDmaData+0x4a>
		{
			start = 0;
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <proccesDmaData+0xe0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
			count = 0;
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <proccesDmaData+0xe4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
			lowL = 0;
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <proccesDmaData+0xe8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
		    capL = 0;
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <proccesDmaData+0xec>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
		}

		if(start == 1)
 8001a06:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <proccesDmaData+0xe0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d137      	bne.n	8001a7e <proccesDmaData+0xc2>
		{
			count++;
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <proccesDmaData+0xe4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	4a22      	ldr	r2, [pc, #136]	; (8001aa0 <proccesDmaData+0xe4>)
 8001a16:	6013      	str	r3, [r2, #0]
			if(count >= 34)
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <proccesDmaData+0xe4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b21      	cmp	r3, #33	; 0x21
 8001a1e:	dd0c      	ble.n	8001a3a <proccesDmaData+0x7e>
			{
				start = 0;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <proccesDmaData+0xe0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
				count = 0;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <proccesDmaData+0xe4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
				lowL = 0;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <proccesDmaData+0xe8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
				capL = 0;
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <proccesDmaData+0xec>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e021      	b.n	8001a7e <proccesDmaData+0xc2>
			}
			else
			{
				if(*(data+i) > 96 && *(data+i) < 123)
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b60      	cmp	r3, #96	; 0x60
 8001a44:	d90a      	bls.n	8001a5c <proccesDmaData+0xa0>
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b7a      	cmp	r3, #122	; 0x7a
 8001a50:	d804      	bhi.n	8001a5c <proccesDmaData+0xa0>
				{
					lowL++;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <proccesDmaData+0xe8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <proccesDmaData+0xe8>)
 8001a5a:	6013      	str	r3, [r2, #0]
				}
				if(*(data+i) > 64 && *(data+i) < 91)
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b40      	cmp	r3, #64	; 0x40
 8001a66:	d90a      	bls.n	8001a7e <proccesDmaData+0xc2>
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b5a      	cmp	r3, #90	; 0x5a
 8001a72:	d804      	bhi.n	8001a7e <proccesDmaData+0xc2>
				{
					capL++;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <proccesDmaData+0xec>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <proccesDmaData+0xec>)
 8001a7c:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < len; i++)
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	3301      	adds	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	887a      	ldrh	r2, [r7, #2]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d89f      	bhi.n	80019ce <proccesDmaData+0x12>

		}


	}
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200000a4 	.word	0x200000a4
 8001aa0:	200000a8 	.word	0x200000a8
 8001aa4:	200000b0 	.word	0x200000b0
 8001aa8:	200000ac 	.word	0x200000ac

08001aac <Error_Handler>:


void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <LL_DMA_DisableChannel+0x3c>)
 8001acc:	5cd3      	ldrb	r3, [r2, r3]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	3a01      	subs	r2, #1
 8001ada:	4907      	ldr	r1, [pc, #28]	; (8001af8 <LL_DMA_DisableChannel+0x3c>)
 8001adc:	5c8a      	ldrb	r2, [r1, r2]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	440a      	add	r2, r1
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6013      	str	r3, [r2, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	08004658 	.word	0x08004658

08001afc <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b10:	bf0c      	ite	eq
 8001b12:	2301      	moveq	r3, #1
 8001b14:	2300      	movne	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b38:	bf0c      	ite	eq
 8001b3a:	2301      	moveq	r3, #1
 8001b3c:	2300      	movne	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b60:	bf0c      	ite	eq
 8001b62:	2301      	moveq	r3, #1
 8001b64:	2300      	movne	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b82:	605a      	str	r2, [r3, #4]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b9e:	605a      	str	r2, [r3, #4]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001bba:	605a      	str	r2, [r3, #4]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b10      	cmp	r3, #16
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfe:	2b40      	cmp	r3, #64	; 0x40
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2210      	movs	r2, #16
 8001c20:	621a      	str	r2, [r3, #32]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <HardFault_Handler+0x4>

08001c42 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <MemManage_Handler+0x4>

08001c48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <BusFault_Handler+0x4>

08001c4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <UsageFault_Handler+0x4>

08001c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <DMA1_Channel6_IRQHandler+0x38>)
 8001c92:	f7ff ff33 	bl	8001afc <LL_DMA_IsActiveFlag_TC6>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d105      	bne.n	8001ca8 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8001c9c:	f000 fcde 	bl	800265c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8001ca0:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <DMA1_Channel6_IRQHandler+0x38>)
 8001ca2:	f7ff ff67 	bl	8001b74 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8001ca6:	e00a      	b.n	8001cbe <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001ca8:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <DMA1_Channel6_IRQHandler+0x38>)
 8001caa:	f7ff ff4f 	bl	8001b4c <LL_DMA_IsActiveFlag_HT6>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d104      	bne.n	8001cbe <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8001cb4:	f000 fcd2 	bl	800265c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <DMA1_Channel6_IRQHandler+0x38>)
 8001cba:	f7ff ff77 	bl	8001bac <LL_DMA_ClearFlag_HT6>
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020000 	.word	0x40020000

08001cc8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001ccc:	480a      	ldr	r0, [pc, #40]	; (8001cf8 <DMA1_Channel7_IRQHandler+0x30>)
 8001cce:	f7ff ff29 	bl	8001b24 <LL_DMA_IsActiveFlag_TC7>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10d      	bne.n	8001cf4 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001cd8:	4807      	ldr	r0, [pc, #28]	; (8001cf8 <DMA1_Channel7_IRQHandler+0x30>)
 8001cda:	f7ff ff59 	bl	8001b90 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001cde:	bf00      	nop
 8001ce0:	4806      	ldr	r0, [pc, #24]	; (8001cfc <DMA1_Channel7_IRQHandler+0x34>)
 8001ce2:	f7ff ff84 	bl	8001bee <LL_USART_IsActiveFlag_TC>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f9      	beq.n	8001ce0 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001cec:	2107      	movs	r1, #7
 8001cee:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <DMA1_Channel7_IRQHandler+0x30>)
 8001cf0:	f7ff fee4 	bl	8001abc <LL_DMA_DisableChannel>
	}
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40004400 	.word	0x40004400

08001d00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001d04:	4806      	ldr	r0, [pc, #24]	; (8001d20 <USART2_IRQHandler+0x20>)
 8001d06:	f7ff ff5f 	bl	8001bc8 <LL_USART_IsActiveFlag_IDLE>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001d10:	f000 fca4 	bl	800265c <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <USART2_IRQHandler+0x20>)
 8001d16:	f7ff ff7d 	bl	8001c14 <LL_USART_ClearFlag_IDLE>
	}
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40004400 	.word	0x40004400

08001d24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <_sbrk+0x50>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <_sbrk+0x16>
		heap_end = &end;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <_sbrk+0x50>)
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <_sbrk+0x54>)
 8001d38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <_sbrk+0x50>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <_sbrk+0x50>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	466a      	mov	r2, sp
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d907      	bls.n	8001d5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d4e:	f000 fd6b 	bl	8002828 <__errno>
 8001d52:	4602      	mov	r2, r0
 8001d54:	230c      	movs	r3, #12
 8001d56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	e006      	b.n	8001d6c <_sbrk+0x48>
	}

	heap_end += incr;
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <_sbrk+0x50>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a03      	ldr	r2, [pc, #12]	; (8001d74 <_sbrk+0x50>)
 8001d68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200000b4 	.word	0x200000b4
 8001d78:	200001d8 	.word	0x200001d8

08001d7c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <SystemInit+0x84>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <SystemInit+0x84>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d90:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <SystemInit+0x88>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <SystemInit+0x88>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <SystemInit+0x88>)
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4918      	ldr	r1, [pc, #96]	; (8001e04 <SystemInit+0x88>)
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <SystemInit+0x8c>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <SystemInit+0x88>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <SystemInit+0x88>)
 8001dae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <SystemInit+0x88>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <SystemInit+0x88>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <SystemInit+0x88>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <SystemInit+0x88>)
 8001dca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001dce:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <SystemInit+0x88>)
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <SystemInit+0x88>)
 8001dd6:	f023 030f 	bic.w	r3, r3, #15
 8001dda:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <SystemInit+0x88>)
 8001dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001de0:	4908      	ldr	r1, [pc, #32]	; (8001e04 <SystemInit+0x88>)
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <SystemInit+0x90>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <SystemInit+0x88>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SystemInit+0x84>)
 8001df0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df4:	609a      	str	r2, [r3, #8]
#endif
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	f87fc00c 	.word	0xf87fc00c
 8001e0c:	ff00fccc 	.word	0xff00fccc

08001e10 <NVIC_EnableIRQ>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	4907      	ldr	r1, [pc, #28]	; (8001e40 <NVIC_EnableIRQ+0x30>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	2001      	movs	r0, #1
 8001e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <NVIC_SetPriority>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da0b      	bge.n	8001e70 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <NVIC_SetPriority+0x4c>)
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	3b04      	subs	r3, #4
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	761a      	strb	r2, [r3, #24]
}
 8001e6e:	e009      	b.n	8001e84 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4907      	ldr	r1, [pc, #28]	; (8001e94 <NVIC_SetPriority+0x50>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <LL_DMA_EnableChannel>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <LL_DMA_EnableChannel+0x3c>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	3a01      	subs	r2, #1
 8001eb6:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <LL_DMA_EnableChannel+0x3c>)
 8001eb8:	5c8a      	ldrb	r2, [r1, r2]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	440a      	add	r2, r1
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6013      	str	r3, [r2, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	08004678 	.word	0x08004678

08001ed8 <LL_DMA_DisableChannel>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <LL_DMA_DisableChannel+0x3c>)
 8001ee8:	5cd3      	ldrb	r3, [r2, r3]
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	3a01      	subs	r2, #1
 8001ef6:	4907      	ldr	r1, [pc, #28]	; (8001f14 <LL_DMA_DisableChannel+0x3c>)
 8001ef8:	5c8a      	ldrb	r2, [r1, r2]
 8001efa:	4611      	mov	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	440a      	add	r2, r1
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6013      	str	r3, [r2, #0]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	08004678 	.word	0x08004678

08001f18 <LL_DMA_SetDataTransferDirection>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <LL_DMA_SetDataTransferDirection+0x48>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4413      	add	r3, r2
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f38:	f023 0310 	bic.w	r3, r3, #16
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	3a01      	subs	r2, #1
 8001f40:	4907      	ldr	r1, [pc, #28]	; (8001f60 <LL_DMA_SetDataTransferDirection+0x48>)
 8001f42:	5c8a      	ldrb	r2, [r1, r2]
 8001f44:	4611      	mov	r1, r2
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	440a      	add	r2, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	08004678 	.word	0x08004678

08001f64 <LL_DMA_GetDataTransferDirection>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001f74:	5cd3      	ldrb	r3, [r2, r3]
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	f244 0310 	movw	r3, #16400	; 0x4010
 8001f82:	4013      	ands	r3, r2
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	08004678 	.word	0x08004678

08001f94 <LL_DMA_SetMode>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <LL_DMA_SetMode+0x44>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 0220 	bic.w	r2, r3, #32
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <LL_DMA_SetMode+0x44>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	440b      	add	r3, r1
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	08004678 	.word	0x08004678

08001fdc <LL_DMA_SetPeriphIncMode>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <LL_DMA_SetPeriphIncMode+0x44>)
 8001fee:	5cd3      	ldrb	r3, [r2, r3]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <LL_DMA_SetPeriphIncMode+0x44>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	4619      	mov	r1, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	440b      	add	r3, r1
 800200a:	4619      	mov	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	08004678 	.word	0x08004678

08002024 <LL_DMA_SetMemoryIncMode>:
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	3b01      	subs	r3, #1
 8002034:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <LL_DMA_SetMemoryIncMode+0x44>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	461a      	mov	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4413      	add	r3, r2
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3b01      	subs	r3, #1
 8002048:	4907      	ldr	r1, [pc, #28]	; (8002068 <LL_DMA_SetMemoryIncMode+0x44>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	4619      	mov	r1, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	440b      	add	r3, r1
 8002052:	4619      	mov	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	08004678 	.word	0x08004678

0800206c <LL_DMA_SetPeriphSize>:
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	3b01      	subs	r3, #1
 800207c:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <LL_DMA_SetPeriphSize+0x44>)
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	461a      	mov	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	3b01      	subs	r3, #1
 8002090:	4907      	ldr	r1, [pc, #28]	; (80020b0 <LL_DMA_SetPeriphSize+0x44>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	4619      	mov	r1, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	440b      	add	r3, r1
 800209a:	4619      	mov	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	08004678 	.word	0x08004678

080020b4 <LL_DMA_SetMemorySize>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <LL_DMA_SetMemorySize+0x44>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	4907      	ldr	r1, [pc, #28]	; (80020f8 <LL_DMA_SetMemorySize+0x44>)
 80020da:	5ccb      	ldrb	r3, [r1, r3]
 80020dc:	4619      	mov	r1, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	440b      	add	r3, r1
 80020e2:	4619      	mov	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	08004678 	.word	0x08004678

080020fc <LL_DMA_SetChannelPriorityLevel>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	3b01      	subs	r3, #1
 800210c:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	461a      	mov	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	3b01      	subs	r3, #1
 8002120:	4907      	ldr	r1, [pc, #28]	; (8002140 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	4619      	mov	r1, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	440b      	add	r3, r1
 800212a:	4619      	mov	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	08004678 	.word	0x08004678

08002144 <LL_DMA_SetDataLength>:
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3b01      	subs	r3, #1
 8002154:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <LL_DMA_SetDataLength+0x44>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	461a      	mov	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	0c1b      	lsrs	r3, r3, #16
 8002162:	041b      	lsls	r3, r3, #16
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	3a01      	subs	r2, #1
 8002168:	4907      	ldr	r1, [pc, #28]	; (8002188 <LL_DMA_SetDataLength+0x44>)
 800216a:	5c8a      	ldrb	r2, [r1, r2]
 800216c:	4611      	mov	r1, r2
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	440a      	add	r2, r1
 8002172:	4611      	mov	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	08004678 	.word	0x08004678

0800218c <LL_DMA_GetDataLength>:
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	3b01      	subs	r3, #1
 800219a:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <LL_DMA_GetDataLength+0x28>)
 800219c:	5cd3      	ldrb	r3, [r2, r3]
 800219e:	461a      	mov	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	b29b      	uxth	r3, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	08004678 	.word	0x08004678

080021b8 <LL_DMA_ConfigAddresses>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b10      	cmp	r3, #16
 80021ca:	d114      	bne.n	80021f6 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	4a16      	ldr	r2, [pc, #88]	; (800222c <LL_DMA_ConfigAddresses+0x74>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	461a      	mov	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4413      	add	r3, r2
 80021da:	461a      	mov	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <LL_DMA_ConfigAddresses+0x74>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	461a      	mov	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4413      	add	r3, r2
 80021ee:	461a      	mov	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6093      	str	r3, [r2, #8]
}
 80021f4:	e013      	b.n	800221e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	4a0c      	ldr	r2, [pc, #48]	; (800222c <LL_DMA_ConfigAddresses+0x74>)
 80021fc:	5cd3      	ldrb	r3, [r2, r3]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	461a      	mov	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3b01      	subs	r3, #1
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <LL_DMA_ConfigAddresses+0x74>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	461a      	mov	r2, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	60d3      	str	r3, [r2, #12]
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	08004678 	.word	0x08004678

08002230 <LL_DMA_SetMemoryAddress>:
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	3b01      	subs	r3, #1
 8002240:	4a06      	ldr	r2, [pc, #24]	; (800225c <LL_DMA_SetMemoryAddress+0x2c>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	461a      	mov	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4413      	add	r3, r2
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60d3      	str	r3, [r2, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	08004678 	.word	0x08004678

08002260 <LL_DMA_SetPeriphAddress>:
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	3b01      	subs	r3, #1
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <LL_DMA_SetPeriphAddress+0x2c>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	461a      	mov	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4413      	add	r3, r2
 800227a:	461a      	mov	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6093      	str	r3, [r2, #8]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	08004678 	.word	0x08004678

08002290 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3b01      	subs	r3, #1
 800229e:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <LL_DMA_EnableIT_TC+0x3c>)
 80022a0:	5cd3      	ldrb	r3, [r2, r3]
 80022a2:	461a      	mov	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	3a01      	subs	r2, #1
 80022ae:	4907      	ldr	r1, [pc, #28]	; (80022cc <LL_DMA_EnableIT_TC+0x3c>)
 80022b0:	5c8a      	ldrb	r2, [r1, r2]
 80022b2:	4611      	mov	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	440a      	add	r2, r1
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	6013      	str	r3, [r2, #0]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	08004678 	.word	0x08004678

080022d0 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	3b01      	subs	r3, #1
 80022de:	4a0b      	ldr	r2, [pc, #44]	; (800230c <LL_DMA_EnableIT_TE+0x3c>)
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	461a      	mov	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	3a01      	subs	r2, #1
 80022ee:	4907      	ldr	r1, [pc, #28]	; (800230c <LL_DMA_EnableIT_TE+0x3c>)
 80022f0:	5c8a      	ldrb	r2, [r1, r2]
 80022f2:	4611      	mov	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	440a      	add	r2, r1
 80022f8:	f043 0308 	orr.w	r3, r3, #8
 80022fc:	6013      	str	r3, [r2, #0]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	08004678 	.word	0x08004678

08002310 <LL_AHB1_GRP1_EnableClock>:
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	4907      	ldr	r1, [pc, #28]	; (800233c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4313      	orrs	r3, r2
 8002322:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4013      	ands	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40021000 	.word	0x40021000

08002340 <LL_APB1_GRP1_EnableClock>:
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <LL_APB1_GRP1_EnableClock+0x2c>)
 800234a:	69da      	ldr	r2, [r3, #28]
 800234c:	4907      	ldr	r1, [pc, #28]	; (800236c <LL_APB1_GRP1_EnableClock+0x2c>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4013      	ands	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40021000 	.word	0x40021000

08002370 <LL_USART_Enable>:
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f043 0201 	orr.w	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	601a      	str	r2, [r3, #0]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_USART_ConfigAsyncMode>:
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	609a      	str	r2, [r3, #8]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	609a      	str	r2, [r3, #8]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 800241c:	b490      	push	{r4, r7}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 8002426:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d103      	bne.n	8002436 <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3328      	adds	r3, #40	; 0x28
 8002432:	461c      	mov	r4, r3
 8002434:	e002      	b.n	800243c <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3324      	adds	r3, #36	; 0x24
 800243a:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 800243c:	4623      	mov	r3, r4
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bc90      	pop	{r4, r7}
 8002446:	4770      	bx	lr

08002448 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a03      	ldr	r2, [pc, #12]	; (8002468 <USART2_RegisterCallback+0x20>)
 800245a:	6013      	str	r3, [r2, #0]
	}
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	200000b8 	.word	0x200000b8

0800246c <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 800246c:	b5b0      	push	{r4, r5, r7, lr}
 800246e:	b090      	sub	sp, #64	; 0x40
 8002470:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	615a      	str	r2, [r3, #20]
 8002484:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
 8002494:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002496:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800249a:	f7ff ff51 	bl	8002340 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800249e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80024a2:	f7ff ff35 	bl	8002310 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80024a6:	f248 0304 	movw	r3, #32772	; 0x8004
 80024aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80024ac:	2302      	movs	r3, #2
 80024ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80024b0:	2303      	movs	r3, #3
 80024b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80024bc:	2307      	movs	r3, #7
 80024be:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	4619      	mov	r1, r3
 80024c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c8:	f7fe fc4b 	bl	8000d62 <LL_GPIO_Init>
   */
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2106      	movs	r1, #6
 80024d0:	484f      	ldr	r0, [pc, #316]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 80024d2:	f7ff fd21 	bl	8001f18 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80024d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024da:	2106      	movs	r1, #6
 80024dc:	484c      	ldr	r0, [pc, #304]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 80024de:	f7ff fe0d 	bl	80020fc <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2106      	movs	r1, #6
 80024e6:	484a      	ldr	r0, [pc, #296]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 80024e8:	f7ff fd54 	bl	8001f94 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2106      	movs	r1, #6
 80024f0:	4847      	ldr	r0, [pc, #284]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 80024f2:	f7ff fd73 	bl	8001fdc <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	2106      	movs	r1, #6
 80024fa:	4845      	ldr	r0, [pc, #276]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 80024fc:	f7ff fd92 	bl	8002024 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002500:	2200      	movs	r2, #0
 8002502:	2106      	movs	r1, #6
 8002504:	4842      	ldr	r0, [pc, #264]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 8002506:	f7ff fdb1 	bl	800206c <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800250a:	2200      	movs	r2, #0
 800250c:	2106      	movs	r1, #6
 800250e:	4840      	ldr	r0, [pc, #256]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 8002510:	f7ff fdd0 	bl	80020b4 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,
 8002514:	2101      	movs	r1, #1
 8002516:	483f      	ldr	r0, [pc, #252]	; (8002614 <MX_USART2_UART_Init+0x1a8>)
 8002518:	f7ff ff80 	bl	800241c <LL_USART_DMA_GetRegAddr>
 800251c:	4605      	mov	r5, r0
 800251e:	4c3e      	ldr	r4, [pc, #248]	; (8002618 <MX_USART2_UART_Init+0x1ac>)
 8002520:	2106      	movs	r1, #6
 8002522:	483b      	ldr	r0, [pc, #236]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 8002524:	f7ff fd1e 	bl	8001f64 <LL_DMA_GetDataTransferDirection>
 8002528:	4603      	mov	r3, r0
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4623      	mov	r3, r4
 800252e:	462a      	mov	r2, r5
 8002530:	2106      	movs	r1, #6
 8002532:	4837      	ldr	r0, [pc, #220]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 8002534:	f7ff fe40 	bl	80021b8 <LL_DMA_ConfigAddresses>
  						 LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  						 (uint32_t)bufferUSART2dma,
  						 LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800253c:	2106      	movs	r1, #6
 800253e:	4834      	ldr	r0, [pc, #208]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 8002540:	f7ff fe00 	bl	8002144 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002544:	2106      	movs	r1, #6
 8002546:	4832      	ldr	r0, [pc, #200]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 8002548:	f7ff fca6 	bl	8001e98 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 800254c:	4831      	ldr	r0, [pc, #196]	; (8002614 <MX_USART2_UART_Init+0x1a8>)
 800254e:	f7ff ff45 	bl	80023dc <LL_USART_EnableDMAReq_RX>
  #endif

  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002552:	2210      	movs	r2, #16
 8002554:	2107      	movs	r1, #7
 8002556:	482e      	ldr	r0, [pc, #184]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 8002558:	f7ff fcde 	bl	8001f18 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 800255c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002560:	2107      	movs	r1, #7
 8002562:	482b      	ldr	r0, [pc, #172]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 8002564:	f7ff fdca 	bl	80020fc <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002568:	2200      	movs	r2, #0
 800256a:	2107      	movs	r1, #7
 800256c:	4828      	ldr	r0, [pc, #160]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 800256e:	f7ff fd11 	bl	8001f94 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002572:	2200      	movs	r2, #0
 8002574:	2107      	movs	r1, #7
 8002576:	4826      	ldr	r0, [pc, #152]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 8002578:	f7ff fd30 	bl	8001fdc <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800257c:	2280      	movs	r2, #128	; 0x80
 800257e:	2107      	movs	r1, #7
 8002580:	4823      	ldr	r0, [pc, #140]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 8002582:	f7ff fd4f 	bl	8002024 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002586:	2200      	movs	r2, #0
 8002588:	2107      	movs	r1, #7
 800258a:	4821      	ldr	r0, [pc, #132]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 800258c:	f7ff fd6e 	bl	800206c <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002590:	2200      	movs	r2, #0
 8002592:	2107      	movs	r1, #7
 8002594:	481e      	ldr	r0, [pc, #120]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 8002596:	f7ff fd8d 	bl	80020b4 <LL_DMA_SetMemorySize>

    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 800259a:	2100      	movs	r1, #0
 800259c:	481d      	ldr	r0, [pc, #116]	; (8002614 <MX_USART2_UART_Init+0x1a8>)
 800259e:	f7ff ff3d 	bl	800241c <LL_USART_DMA_GetRegAddr>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	2107      	movs	r1, #7
 80025a8:	4819      	ldr	r0, [pc, #100]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 80025aa:	f7ff fe59 	bl	8002260 <LL_DMA_SetPeriphAddress>
    LL_USART_EnableDMAReq_TX(USART2);
 80025ae:	4819      	ldr	r0, [pc, #100]	; (8002614 <MX_USART2_UART_Init+0x1a8>)
 80025b0:	f7ff ff24 	bl	80023fc <LL_USART_EnableDMAReq_TX>

    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80025b4:	2107      	movs	r1, #7
 80025b6:	4816      	ldr	r0, [pc, #88]	; (8002610 <MX_USART2_UART_Init+0x1a4>)
 80025b8:	f7ff fe8a 	bl	80022d0 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80025bc:	2100      	movs	r1, #0
 80025be:	2026      	movs	r0, #38	; 0x26
 80025c0:	f7ff fc40 	bl	8001e44 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80025c4:	2026      	movs	r0, #38	; 0x26
 80025c6:	f7ff fc23 	bl	8001e10 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80025ca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80025ce:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80025d0:	2300      	movs	r3, #0
 80025d2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80025d8:	2300      	movs	r3, #0
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80025dc:	230c      	movs	r3, #12
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80025e4:	2300      	movs	r3, #0
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4619      	mov	r1, r3
 80025ee:	4809      	ldr	r0, [pc, #36]	; (8002614 <MX_USART2_UART_Init+0x1a8>)
 80025f0:	f7fe fe3c 	bl	800126c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80025f4:	4807      	ldr	r0, [pc, #28]	; (8002614 <MX_USART2_UART_Init+0x1a8>)
 80025f6:	f7ff fecb 	bl	8002390 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 80025fa:	4806      	ldr	r0, [pc, #24]	; (8002614 <MX_USART2_UART_Init+0x1a8>)
 80025fc:	f7ff fede 	bl	80023bc <LL_USART_DisableIT_CTS>

  	  //type your code here:
#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
#endif
  LL_USART_Enable(USART2);
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <MX_USART2_UART_Init+0x1a8>)
 8002602:	f7ff feb5 	bl	8002370 <LL_USART_Enable>
}
 8002606:	bf00      	nop
 8002608:	3738      	adds	r7, #56	; 0x38
 800260a:	46bd      	mov	sp, r7
 800260c:	bdb0      	pop	{r4, r5, r7, pc}
 800260e:	bf00      	nop
 8002610:	40020000 	.word	0x40020000
 8002614:	40004400 	.word	0x40004400
 8002618:	200000d0 	.word	0x200000d0

0800261c <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	461a      	mov	r2, r3
 800262c:	2107      	movs	r1, #7
 800262e:	480a      	ldr	r0, [pc, #40]	; (8002658 <USART2_PutBuffer+0x3c>)
 8002630:	f7ff fdfe 	bl	8002230 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	461a      	mov	r2, r3
 8002638:	2107      	movs	r1, #7
 800263a:	4807      	ldr	r0, [pc, #28]	; (8002658 <USART2_PutBuffer+0x3c>)
 800263c:	f7ff fd82 	bl	8002144 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002640:	2107      	movs	r1, #7
 8002642:	4805      	ldr	r0, [pc, #20]	; (8002658 <USART2_PutBuffer+0x3c>)
 8002644:	f7ff fe24 	bl	8002290 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002648:	2107      	movs	r1, #7
 800264a:	4803      	ldr	r0, [pc, #12]	; (8002658 <USART2_PutBuffer+0x3c>)
 800264c:	f7ff fc24 	bl	8001e98 <LL_DMA_EnableChannel>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40020000 	.word	0x40020000

0800265c <USART2_CheckDmaReception>:
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */

void USART2_CheckDmaReception(void)
{
 800265c:	b5b0      	push	{r4, r5, r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af02      	add	r7, sp, #8
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <USART2_CheckDmaReception+0xfc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d072      	beq.n	8002750 <USART2_CheckDmaReception+0xf4>

		static uint16_t old_pos = 0;

		uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800266a:	2106      	movs	r1, #6
 800266c:	483b      	ldr	r0, [pc, #236]	; (800275c <USART2_CheckDmaReception+0x100>)
 800266e:	f7ff fd8d 	bl	800218c <LL_DMA_GetDataLength>
 8002672:	4603      	mov	r3, r0
 8002674:	b29b      	uxth	r3, r3
 8002676:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800267a:	80fb      	strh	r3, [r7, #6]

		occupied_memory=pos;
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	4b37      	ldr	r3, [pc, #220]	; (8002760 <USART2_CheckDmaReception+0x104>)
 8002682:	701a      	strb	r2, [r3, #0]
		load=(float)(occupied_memory)/(float)(DMA_USART2_BUFFER_SIZE)*100.0;
 8002684:	4b36      	ldr	r3, [pc, #216]	; (8002760 <USART2_CheckDmaReception+0x104>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	ee07 3a90 	vmov	s15, r3
 800268c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002690:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002764 <USART2_CheckDmaReception+0x108>
 8002694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002698:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002768 <USART2_CheckDmaReception+0x10c>
 800269c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a0:	4b32      	ldr	r3, [pc, #200]	; (800276c <USART2_CheckDmaReception+0x110>)
 80026a2:	edc3 7a00 	vstr	s15, [r3]

		if (pos != old_pos)
 80026a6:	4b32      	ldr	r3, [pc, #200]	; (8002770 <USART2_CheckDmaReception+0x114>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d050      	beq.n	8002752 <USART2_CheckDmaReception+0xf6>
		{
			if (pos < (DMA_USART2_BUFFER_SIZE-20))
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	2beb      	cmp	r3, #235	; 0xeb
 80026b4:	d811      	bhi.n	80026da <USART2_CheckDmaReception+0x7e>
			{
				USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 80026b6:	4b28      	ldr	r3, [pc, #160]	; (8002758 <USART2_CheckDmaReception+0xfc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <USART2_CheckDmaReception+0x114>)
 80026bc:	8812      	ldrh	r2, [r2, #0]
 80026be:	4611      	mov	r1, r2
 80026c0:	4a2c      	ldr	r2, [pc, #176]	; (8002774 <USART2_CheckDmaReception+0x118>)
 80026c2:	1888      	adds	r0, r1, r2
 80026c4:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <USART2_CheckDmaReception+0x114>)
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	88f9      	ldrh	r1, [r7, #6]
 80026ca:	1a8a      	subs	r2, r1, r2
 80026cc:	b292      	uxth	r2, r2
 80026ce:	4611      	mov	r1, r2
 80026d0:	4798      	blx	r3
				old_pos = pos;
 80026d2:	4a27      	ldr	r2, [pc, #156]	; (8002770 <USART2_CheckDmaReception+0x114>)
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	8013      	strh	r3, [r2, #0]
 80026d8:	e03b      	b.n	8002752 <USART2_CheckDmaReception+0xf6>
			}
			else
			{
				USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <USART2_CheckDmaReception+0xfc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a24      	ldr	r2, [pc, #144]	; (8002770 <USART2_CheckDmaReception+0x114>)
 80026e0:	8812      	ldrh	r2, [r2, #0]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4a23      	ldr	r2, [pc, #140]	; (8002774 <USART2_CheckDmaReception+0x118>)
 80026e6:	1888      	adds	r0, r1, r2
 80026e8:	4a21      	ldr	r2, [pc, #132]	; (8002770 <USART2_CheckDmaReception+0x114>)
 80026ea:	8812      	ldrh	r2, [r2, #0]
 80026ec:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80026f0:	b292      	uxth	r2, r2
 80026f2:	4611      	mov	r1, r2
 80026f4:	4798      	blx	r3

				memset(bufferUSART2dma, 0, DMA_USART2_BUFFER_SIZE);
 80026f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026fa:	2100      	movs	r1, #0
 80026fc:	481d      	ldr	r0, [pc, #116]	; (8002774 <USART2_CheckDmaReception+0x118>)
 80026fe:	f000 f8bd 	bl	800287c <memset>

				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002702:	2106      	movs	r1, #6
 8002704:	4815      	ldr	r0, [pc, #84]	; (800275c <USART2_CheckDmaReception+0x100>)
 8002706:	f7ff fbe7 	bl	8001ed8 <LL_DMA_DisableChannel>
				LL_DMA_ConfigAddresses(    DMA1, LL_DMA_CHANNEL_6,
 800270a:	2101      	movs	r1, #1
 800270c:	481a      	ldr	r0, [pc, #104]	; (8002778 <USART2_CheckDmaReception+0x11c>)
 800270e:	f7ff fe85 	bl	800241c <LL_USART_DMA_GetRegAddr>
 8002712:	4605      	mov	r5, r0
 8002714:	4c17      	ldr	r4, [pc, #92]	; (8002774 <USART2_CheckDmaReception+0x118>)
 8002716:	2106      	movs	r1, #6
 8002718:	4810      	ldr	r0, [pc, #64]	; (800275c <USART2_CheckDmaReception+0x100>)
 800271a:	f7ff fc23 	bl	8001f64 <LL_DMA_GetDataTransferDirection>
 800271e:	4603      	mov	r3, r0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	4623      	mov	r3, r4
 8002724:	462a      	mov	r2, r5
 8002726:	2106      	movs	r1, #6
 8002728:	480c      	ldr	r0, [pc, #48]	; (800275c <USART2_CheckDmaReception+0x100>)
 800272a:	f7ff fd45 	bl	80021b8 <LL_DMA_ConfigAddresses>
				LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
				(uint32_t)bufferUSART2dma,
				LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

				LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800272e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002732:	2106      	movs	r1, #6
 8002734:	4809      	ldr	r0, [pc, #36]	; (800275c <USART2_CheckDmaReception+0x100>)
 8002736:	f7ff fd05 	bl	8002144 <LL_DMA_SetDataLength>
				LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800273a:	2106      	movs	r1, #6
 800273c:	4807      	ldr	r0, [pc, #28]	; (800275c <USART2_CheckDmaReception+0x100>)
 800273e:	f7ff fbab 	bl	8001e98 <LL_DMA_EnableChannel>
				LL_USART_EnableDMAReq_RX(USART2);
 8002742:	480d      	ldr	r0, [pc, #52]	; (8002778 <USART2_CheckDmaReception+0x11c>)
 8002744:	f7ff fe4a 	bl	80023dc <LL_USART_EnableDMAReq_RX>

				old_pos = 0;
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <USART2_CheckDmaReception+0x114>)
 800274a:	2200      	movs	r2, #0
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	e000      	b.n	8002752 <USART2_CheckDmaReception+0xf6>
	if(USART2_ProcessData == 0) return;
 8002750:	bf00      	nop

			}
		}
}
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bdb0      	pop	{r4, r5, r7, pc}
 8002758:	200000b8 	.word	0x200000b8
 800275c:	40020000 	.word	0x40020000
 8002760:	200000c8 	.word	0x200000c8
 8002764:	43800000 	.word	0x43800000
 8002768:	42c80000 	.word	0x42c80000
 800276c:	200000cc 	.word	0x200000cc
 8002770:	200000bc 	.word	0x200000bc
 8002774:	200000d0 	.word	0x200000d0
 8002778:	40004400 	.word	0x40004400

0800277c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800277c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002780:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002782:	e003      	b.n	800278c <LoopCopyDataInit>

08002784 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002786:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002788:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800278a:	3104      	adds	r1, #4

0800278c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800278c:	480b      	ldr	r0, [pc, #44]	; (80027bc <LoopForever+0xa>)
	ldr	r3, =_edata
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002790:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002792:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002794:	d3f6      	bcc.n	8002784 <CopyDataInit>
	ldr	r2, =_sbss
 8002796:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002798:	e002      	b.n	80027a0 <LoopFillZerobss>

0800279a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800279a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800279c:	f842 3b04 	str.w	r3, [r2], #4

080027a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <LoopForever+0x16>)
	cmp	r2, r3
 80027a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027a4:	d3f9      	bcc.n	800279a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027a6:	f7ff fae9 	bl	8001d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027aa:	f000 f843 	bl	8002834 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027ae:	f7ff f811 	bl	80017d4 <main>

080027b2 <LoopForever>:

LoopForever:
    b LoopForever
 80027b2:	e7fe      	b.n	80027b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027b4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80027b8:	080047c8 	.word	0x080047c8
	ldr	r0, =_sdata
 80027bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027c0:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 80027c4:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 80027c8:	200001d4 	.word	0x200001d4

080027cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027cc:	e7fe      	b.n	80027cc <ADC1_2_IRQHandler>
	...

080027d0 <gcvt>:
 80027d0:	b530      	push	{r4, r5, lr}
 80027d2:	ed2d 8b02 	vpush	{d8}
 80027d6:	eeb0 8a40 	vmov.f32	s16, s0
 80027da:	eef0 8a60 	vmov.f32	s17, s1
 80027de:	460c      	mov	r4, r1
 80027e0:	2200      	movs	r2, #0
 80027e2:	b083      	sub	sp, #12
 80027e4:	4605      	mov	r5, r0
 80027e6:	2300      	movs	r3, #0
 80027e8:	ec51 0b10 	vmov	r0, r1, d0
 80027ec:	f7fe f96e 	bl	8000acc <__aeabi_dcmplt>
 80027f0:	4622      	mov	r2, r4
 80027f2:	b118      	cbz	r0, 80027fc <gcvt+0x2c>
 80027f4:	232d      	movs	r3, #45	; 0x2d
 80027f6:	f802 3b01 	strb.w	r3, [r2], #1
 80027fa:	3d01      	subs	r5, #1
 80027fc:	2300      	movs	r3, #0
 80027fe:	4809      	ldr	r0, [pc, #36]	; (8002824 <gcvt+0x54>)
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	4629      	mov	r1, r5
 8002804:	2367      	movs	r3, #103	; 0x67
 8002806:	eeb0 0a48 	vmov.f32	s0, s16
 800280a:	eef0 0a68 	vmov.f32	s1, s17
 800280e:	6800      	ldr	r0, [r0, #0]
 8002810:	f000 f8e2 	bl	80029d8 <_gcvt>
 8002814:	2800      	cmp	r0, #0
 8002816:	bf14      	ite	ne
 8002818:	4620      	movne	r0, r4
 800281a:	2000      	moveq	r0, #0
 800281c:	b003      	add	sp, #12
 800281e:	ecbd 8b02 	vpop	{d8}
 8002822:	bd30      	pop	{r4, r5, pc}
 8002824:	20000020 	.word	0x20000020

08002828 <__errno>:
 8002828:	4b01      	ldr	r3, [pc, #4]	; (8002830 <__errno+0x8>)
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000020 	.word	0x20000020

08002834 <__libc_init_array>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	4e0d      	ldr	r6, [pc, #52]	; (800286c <__libc_init_array+0x38>)
 8002838:	4c0d      	ldr	r4, [pc, #52]	; (8002870 <__libc_init_array+0x3c>)
 800283a:	1ba4      	subs	r4, r4, r6
 800283c:	10a4      	asrs	r4, r4, #2
 800283e:	2500      	movs	r5, #0
 8002840:	42a5      	cmp	r5, r4
 8002842:	d109      	bne.n	8002858 <__libc_init_array+0x24>
 8002844:	4e0b      	ldr	r6, [pc, #44]	; (8002874 <__libc_init_array+0x40>)
 8002846:	4c0c      	ldr	r4, [pc, #48]	; (8002878 <__libc_init_array+0x44>)
 8002848:	f001 fed2 	bl	80045f0 <_init>
 800284c:	1ba4      	subs	r4, r4, r6
 800284e:	10a4      	asrs	r4, r4, #2
 8002850:	2500      	movs	r5, #0
 8002852:	42a5      	cmp	r5, r4
 8002854:	d105      	bne.n	8002862 <__libc_init_array+0x2e>
 8002856:	bd70      	pop	{r4, r5, r6, pc}
 8002858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800285c:	4798      	blx	r3
 800285e:	3501      	adds	r5, #1
 8002860:	e7ee      	b.n	8002840 <__libc_init_array+0xc>
 8002862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002866:	4798      	blx	r3
 8002868:	3501      	adds	r5, #1
 800286a:	e7f2      	b.n	8002852 <__libc_init_array+0x1e>
 800286c:	080047c0 	.word	0x080047c0
 8002870:	080047c0 	.word	0x080047c0
 8002874:	080047c0 	.word	0x080047c0
 8002878:	080047c4 	.word	0x080047c4

0800287c <memset>:
 800287c:	4402      	add	r2, r0
 800287e:	4603      	mov	r3, r0
 8002880:	4293      	cmp	r3, r2
 8002882:	d100      	bne.n	8002886 <memset+0xa>
 8002884:	4770      	bx	lr
 8002886:	f803 1b01 	strb.w	r1, [r3], #1
 800288a:	e7f9      	b.n	8002880 <memset+0x4>

0800288c <siprintf>:
 800288c:	b40e      	push	{r1, r2, r3}
 800288e:	b500      	push	{lr}
 8002890:	b09c      	sub	sp, #112	; 0x70
 8002892:	ab1d      	add	r3, sp, #116	; 0x74
 8002894:	9002      	str	r0, [sp, #8]
 8002896:	9006      	str	r0, [sp, #24]
 8002898:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800289c:	4809      	ldr	r0, [pc, #36]	; (80028c4 <siprintf+0x38>)
 800289e:	9107      	str	r1, [sp, #28]
 80028a0:	9104      	str	r1, [sp, #16]
 80028a2:	4909      	ldr	r1, [pc, #36]	; (80028c8 <siprintf+0x3c>)
 80028a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80028a8:	9105      	str	r1, [sp, #20]
 80028aa:	6800      	ldr	r0, [r0, #0]
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	a902      	add	r1, sp, #8
 80028b0:	f000 fd3e 	bl	8003330 <_svfiprintf_r>
 80028b4:	9b02      	ldr	r3, [sp, #8]
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	b01c      	add	sp, #112	; 0x70
 80028bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80028c0:	b003      	add	sp, #12
 80028c2:	4770      	bx	lr
 80028c4:	20000020 	.word	0x20000020
 80028c8:	ffff0208 	.word	0xffff0208

080028cc <strcat>:
 80028cc:	b510      	push	{r4, lr}
 80028ce:	4603      	mov	r3, r0
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	1c5c      	adds	r4, r3, #1
 80028d4:	b93a      	cbnz	r2, 80028e6 <strcat+0x1a>
 80028d6:	3b01      	subs	r3, #1
 80028d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028e0:	2a00      	cmp	r2, #0
 80028e2:	d1f9      	bne.n	80028d8 <strcat+0xc>
 80028e4:	bd10      	pop	{r4, pc}
 80028e6:	4623      	mov	r3, r4
 80028e8:	e7f2      	b.n	80028d0 <strcat+0x4>

080028ea <print_e>:
 80028ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ec:	b087      	sub	sp, #28
 80028ee:	ec43 2b10 	vmov	d0, r2, r3
 80028f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80028f4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80028f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80028fa:	ab04      	add	r3, sp, #16
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	ab03      	add	r3, sp, #12
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	460f      	mov	r7, r1
 8002904:	ab05      	add	r3, sp, #20
 8002906:	2102      	movs	r1, #2
 8002908:	1c62      	adds	r2, r4, #1
 800290a:	f001 f835 	bl	8003978 <_dtoa_r>
 800290e:	4601      	mov	r1, r0
 8002910:	9805      	ldr	r0, [sp, #20]
 8002912:	f242 730f 	movw	r3, #9999	; 0x270f
 8002916:	4298      	cmp	r0, r3
 8002918:	d104      	bne.n	8002924 <print_e+0x3a>
 800291a:	4638      	mov	r0, r7
 800291c:	f000 ff98 	bl	8003850 <strcpy>
 8002920:	b007      	add	sp, #28
 8002922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002924:	780b      	ldrb	r3, [r1, #0]
 8002926:	703b      	strb	r3, [r7, #0]
 8002928:	2d00      	cmp	r5, #0
 800292a:	d143      	bne.n	80029b4 <print_e+0xca>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d141      	bne.n	80029b4 <print_e+0xca>
 8002930:	1c7b      	adds	r3, r7, #1
 8002932:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002936:	b10a      	cbz	r2, 800293c <print_e+0x52>
 8002938:	2c00      	cmp	r4, #0
 800293a:	dc3f      	bgt.n	80029bc <print_e+0xd2>
 800293c:	2e67      	cmp	r6, #103	; 0x67
 800293e:	d044      	beq.n	80029ca <print_e+0xe0>
 8002940:	2e47      	cmp	r6, #71	; 0x47
 8002942:	d044      	beq.n	80029ce <print_e+0xe4>
 8002944:	461a      	mov	r2, r3
 8002946:	191d      	adds	r5, r3, r4
 8002948:	2730      	movs	r7, #48	; 0x30
 800294a:	1aa9      	subs	r1, r5, r2
 800294c:	2900      	cmp	r1, #0
 800294e:	dc39      	bgt.n	80029c4 <print_e+0xda>
 8002950:	2c00      	cmp	r4, #0
 8002952:	bfa8      	it	ge
 8002954:	191b      	addge	r3, r3, r4
 8002956:	1e41      	subs	r1, r0, #1
 8002958:	2900      	cmp	r1, #0
 800295a:	bfb8      	it	lt
 800295c:	f1c0 0001 	rsblt	r0, r0, #1
 8002960:	9105      	str	r1, [sp, #20]
 8002962:	bfb8      	it	lt
 8002964:	9005      	strlt	r0, [sp, #20]
 8002966:	461a      	mov	r2, r3
 8002968:	9805      	ldr	r0, [sp, #20]
 800296a:	f802 6b02 	strb.w	r6, [r2], #2
 800296e:	bfb5      	itete	lt
 8002970:	212d      	movlt	r1, #45	; 0x2d
 8002972:	212b      	movge	r1, #43	; 0x2b
 8002974:	7059      	strblt	r1, [r3, #1]
 8002976:	7059      	strbge	r1, [r3, #1]
 8002978:	2863      	cmp	r0, #99	; 0x63
 800297a:	dd0b      	ble.n	8002994 <print_e+0xaa>
 800297c:	2164      	movs	r1, #100	; 0x64
 800297e:	fb90 f1f1 	sdiv	r1, r0, r1
 8002982:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8002986:	1cda      	adds	r2, r3, #3
 8002988:	709c      	strb	r4, [r3, #2]
 800298a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800298e:	fb03 0101 	mla	r1, r3, r1, r0
 8002992:	9105      	str	r1, [sp, #20]
 8002994:	9905      	ldr	r1, [sp, #20]
 8002996:	230a      	movs	r3, #10
 8002998:	fb91 f3f3 	sdiv	r3, r1, r3
 800299c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80029a0:	7010      	strb	r0, [r2, #0]
 80029a2:	f06f 0009 	mvn.w	r0, #9
 80029a6:	fb00 1303 	mla	r3, r0, r3, r1
 80029aa:	3330      	adds	r3, #48	; 0x30
 80029ac:	7053      	strb	r3, [r2, #1]
 80029ae:	2300      	movs	r3, #0
 80029b0:	7093      	strb	r3, [r2, #2]
 80029b2:	e7b5      	b.n	8002920 <print_e+0x36>
 80029b4:	222e      	movs	r2, #46	; 0x2e
 80029b6:	1cbb      	adds	r3, r7, #2
 80029b8:	707a      	strb	r2, [r7, #1]
 80029ba:	e7ba      	b.n	8002932 <print_e+0x48>
 80029bc:	f803 2b01 	strb.w	r2, [r3], #1
 80029c0:	3c01      	subs	r4, #1
 80029c2:	e7b6      	b.n	8002932 <print_e+0x48>
 80029c4:	f802 7b01 	strb.w	r7, [r2], #1
 80029c8:	e7bf      	b.n	800294a <print_e+0x60>
 80029ca:	2665      	movs	r6, #101	; 0x65
 80029cc:	e7c3      	b.n	8002956 <print_e+0x6c>
 80029ce:	2645      	movs	r6, #69	; 0x45
 80029d0:	e7c1      	b.n	8002956 <print_e+0x6c>
 80029d2:	0000      	movs	r0, r0
 80029d4:	0000      	movs	r0, r0
	...

080029d8 <_gcvt>:
 80029d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029dc:	ec55 4b10 	vmov	r4, r5, d0
 80029e0:	b088      	sub	sp, #32
 80029e2:	4681      	mov	r9, r0
 80029e4:	460f      	mov	r7, r1
 80029e6:	4616      	mov	r6, r2
 80029e8:	469a      	mov	sl, r3
 80029ea:	2200      	movs	r2, #0
 80029ec:	2300      	movs	r3, #0
 80029ee:	ee10 0a10 	vmov	r0, s0
 80029f2:	4629      	mov	r1, r5
 80029f4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80029f8:	f7fe f868 	bl	8000acc <__aeabi_dcmplt>
 80029fc:	b110      	cbz	r0, 8002a04 <_gcvt+0x2c>
 80029fe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002a02:	461d      	mov	r5, r3
 8002a04:	2200      	movs	r2, #0
 8002a06:	2300      	movs	r3, #0
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7fe f854 	bl	8000ab8 <__aeabi_dcmpeq>
 8002a10:	b138      	cbz	r0, 8002a22 <_gcvt+0x4a>
 8002a12:	2330      	movs	r3, #48	; 0x30
 8002a14:	7033      	strb	r3, [r6, #0]
 8002a16:	2300      	movs	r3, #0
 8002a18:	7073      	strb	r3, [r6, #1]
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	b008      	add	sp, #32
 8002a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a22:	a350      	add	r3, pc, #320	; (adr r3, 8002b64 <_gcvt+0x18c>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	4620      	mov	r0, r4
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	f7fe f858 	bl	8000ae0 <__aeabi_dcmple>
 8002a30:	b150      	cbz	r0, 8002a48 <_gcvt+0x70>
 8002a32:	3f01      	subs	r7, #1
 8002a34:	e9cd a801 	strd	sl, r8, [sp, #4]
 8002a38:	9700      	str	r7, [sp, #0]
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	4631      	mov	r1, r6
 8002a40:	4648      	mov	r0, r9
 8002a42:	f7ff ff52 	bl	80028ea <print_e>
 8002a46:	e7e8      	b.n	8002a1a <_gcvt+0x42>
 8002a48:	4638      	mov	r0, r7
 8002a4a:	f000 fb6b 	bl	8003124 <_mprec_log10>
 8002a4e:	4622      	mov	r2, r4
 8002a50:	462b      	mov	r3, r5
 8002a52:	ec51 0b10 	vmov	r0, r1, d0
 8002a56:	f7fe f843 	bl	8000ae0 <__aeabi_dcmple>
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d1e9      	bne.n	8002a32 <_gcvt+0x5a>
 8002a5e:	2200      	movs	r2, #0
 8002a60:	4b3f      	ldr	r3, [pc, #252]	; (8002b60 <_gcvt+0x188>)
 8002a62:	4620      	mov	r0, r4
 8002a64:	4629      	mov	r1, r5
 8002a66:	f7fe f831 	bl	8000acc <__aeabi_dcmplt>
 8002a6a:	aa07      	add	r2, sp, #28
 8002a6c:	ab06      	add	r3, sp, #24
 8002a6e:	e9cd 3200 	strd	r3, r2, [sp]
 8002a72:	ab05      	add	r3, sp, #20
 8002a74:	463a      	mov	r2, r7
 8002a76:	b360      	cbz	r0, 8002ad2 <_gcvt+0xfa>
 8002a78:	2103      	movs	r1, #3
 8002a7a:	ec45 4b10 	vmov	d0, r4, r5
 8002a7e:	4648      	mov	r0, r9
 8002a80:	f000 ff7a 	bl	8003978 <_dtoa_r>
 8002a84:	9a05      	ldr	r2, [sp, #20]
 8002a86:	f242 730f 	movw	r3, #9999	; 0x270f
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d023      	beq.n	8002ad6 <_gcvt+0xfe>
 8002a8e:	4633      	mov	r3, r6
 8002a90:	4437      	add	r7, r6
 8002a92:	4601      	mov	r1, r0
 8002a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a98:	9d05      	ldr	r5, [sp, #20]
 8002a9a:	1afc      	subs	r4, r7, r3
 8002a9c:	b32a      	cbz	r2, 8002aea <_gcvt+0x112>
 8002a9e:	2d00      	cmp	r5, #0
 8002aa0:	dc1e      	bgt.n	8002ae0 <_gcvt+0x108>
 8002aa2:	f1b8 0f00 	cmp.w	r8, #0
 8002aa6:	d102      	bne.n	8002aae <_gcvt+0xd6>
 8002aa8:	780a      	ldrb	r2, [r1, #0]
 8002aaa:	2a00      	cmp	r2, #0
 8002aac:	d045      	beq.n	8002b3a <_gcvt+0x162>
 8002aae:	429e      	cmp	r6, r3
 8002ab0:	bf02      	ittt	eq
 8002ab2:	1c73      	addeq	r3, r6, #1
 8002ab4:	2230      	moveq	r2, #48	; 0x30
 8002ab6:	7032      	strbeq	r2, [r6, #0]
 8002ab8:	222e      	movs	r2, #46	; 0x2e
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	9a05      	ldr	r2, [sp, #20]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	2730      	movs	r7, #48	; 0x30
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	4615      	mov	r5, r2
 8002ac8:	db24      	blt.n	8002b14 <_gcvt+0x13c>
 8002aca:	b100      	cbz	r0, 8002ace <_gcvt+0xf6>
 8002acc:	9205      	str	r2, [sp, #20]
 8002ace:	1e4a      	subs	r2, r1, #1
 8002ad0:	e02b      	b.n	8002b2a <_gcvt+0x152>
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	e7d1      	b.n	8002a7a <_gcvt+0xa2>
 8002ad6:	4601      	mov	r1, r0
 8002ad8:	4630      	mov	r0, r6
 8002ada:	f000 feb9 	bl	8003850 <strcpy>
 8002ade:	e79c      	b.n	8002a1a <_gcvt+0x42>
 8002ae0:	3d01      	subs	r5, #1
 8002ae2:	f803 2b01 	strb.w	r2, [r3], #1
 8002ae6:	9505      	str	r5, [sp, #20]
 8002ae8:	e7d3      	b.n	8002a92 <_gcvt+0xba>
 8002aea:	1b2d      	subs	r5, r5, r4
 8002aec:	2730      	movs	r7, #48	; 0x30
 8002aee:	e005      	b.n	8002afc <_gcvt+0x124>
 8002af0:	2c00      	cmp	r4, #0
 8002af2:	dd06      	ble.n	8002b02 <_gcvt+0x12a>
 8002af4:	f803 7b01 	strb.w	r7, [r3], #1
 8002af8:	3c01      	subs	r4, #1
 8002afa:	2201      	movs	r2, #1
 8002afc:	1928      	adds	r0, r5, r4
 8002afe:	2800      	cmp	r0, #0
 8002b00:	dcf6      	bgt.n	8002af0 <_gcvt+0x118>
 8002b02:	2a00      	cmp	r2, #0
 8002b04:	d0cd      	beq.n	8002aa2 <_gcvt+0xca>
 8002b06:	9005      	str	r0, [sp, #20]
 8002b08:	e7cb      	b.n	8002aa2 <_gcvt+0xca>
 8002b0a:	f803 7b01 	strb.w	r7, [r3], #1
 8002b0e:	3c01      	subs	r4, #1
 8002b10:	2001      	movs	r0, #1
 8002b12:	e7d7      	b.n	8002ac4 <_gcvt+0xec>
 8002b14:	2c00      	cmp	r4, #0
 8002b16:	f102 0201 	add.w	r2, r2, #1
 8002b1a:	dcf6      	bgt.n	8002b0a <_gcvt+0x132>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d0d6      	beq.n	8002ace <_gcvt+0xf6>
 8002b20:	9505      	str	r5, [sp, #20]
 8002b22:	e7d4      	b.n	8002ace <_gcvt+0xf6>
 8002b24:	f803 1b01 	strb.w	r1, [r3], #1
 8002b28:	3c01      	subs	r4, #1
 8002b2a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002b2e:	b109      	cbz	r1, 8002b34 <_gcvt+0x15c>
 8002b30:	2c00      	cmp	r4, #0
 8002b32:	dcf7      	bgt.n	8002b24 <_gcvt+0x14c>
 8002b34:	f1b8 0f00 	cmp.w	r8, #0
 8002b38:	d10b      	bne.n	8002b52 <_gcvt+0x17a>
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e76c      	b.n	8002a1a <_gcvt+0x42>
 8002b40:	f802 5b01 	strb.w	r5, [r2], #1
 8002b44:	1a81      	subs	r1, r0, r2
 8002b46:	2900      	cmp	r1, #0
 8002b48:	dcfa      	bgt.n	8002b40 <_gcvt+0x168>
 8002b4a:	2c00      	cmp	r4, #0
 8002b4c:	bfa8      	it	ge
 8002b4e:	191b      	addge	r3, r3, r4
 8002b50:	e7f3      	b.n	8002b3a <_gcvt+0x162>
 8002b52:	461a      	mov	r2, r3
 8002b54:	1918      	adds	r0, r3, r4
 8002b56:	2530      	movs	r5, #48	; 0x30
 8002b58:	e7f4      	b.n	8002b44 <_gcvt+0x16c>
 8002b5a:	bf00      	nop
 8002b5c:	f3af 8000 	nop.w
 8002b60:	3ff00000 	.word	0x3ff00000
 8002b64:	eb1c432d 	.word	0xeb1c432d
 8002b68:	3f1a36e2 	.word	0x3f1a36e2

08002b6c <_Balloc>:
 8002b6c:	b570      	push	{r4, r5, r6, lr}
 8002b6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002b70:	4604      	mov	r4, r0
 8002b72:	460e      	mov	r6, r1
 8002b74:	b93d      	cbnz	r5, 8002b86 <_Balloc+0x1a>
 8002b76:	2010      	movs	r0, #16
 8002b78:	f001 fcb6 	bl	80044e8 <malloc>
 8002b7c:	6260      	str	r0, [r4, #36]	; 0x24
 8002b7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002b82:	6005      	str	r5, [r0, #0]
 8002b84:	60c5      	str	r5, [r0, #12]
 8002b86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002b88:	68eb      	ldr	r3, [r5, #12]
 8002b8a:	b183      	cbz	r3, 8002bae <_Balloc+0x42>
 8002b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8002b94:	b9b8      	cbnz	r0, 8002bc6 <_Balloc+0x5a>
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f506 	lsl.w	r5, r1, r6
 8002b9c:	1d6a      	adds	r2, r5, #5
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f000 fadd 	bl	8003160 <_calloc_r>
 8002ba6:	b160      	cbz	r0, 8002bc2 <_Balloc+0x56>
 8002ba8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8002bac:	e00e      	b.n	8002bcc <_Balloc+0x60>
 8002bae:	2221      	movs	r2, #33	; 0x21
 8002bb0:	2104      	movs	r1, #4
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f000 fad4 	bl	8003160 <_calloc_r>
 8002bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bba:	60e8      	str	r0, [r5, #12]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1e4      	bne.n	8002b8c <_Balloc+0x20>
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	bd70      	pop	{r4, r5, r6, pc}
 8002bc6:	6802      	ldr	r2, [r0, #0]
 8002bc8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8002bd2:	e7f7      	b.n	8002bc4 <_Balloc+0x58>

08002bd4 <_Bfree>:
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002bd8:	4606      	mov	r6, r0
 8002bda:	460d      	mov	r5, r1
 8002bdc:	b93c      	cbnz	r4, 8002bee <_Bfree+0x1a>
 8002bde:	2010      	movs	r0, #16
 8002be0:	f001 fc82 	bl	80044e8 <malloc>
 8002be4:	6270      	str	r0, [r6, #36]	; 0x24
 8002be6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002bea:	6004      	str	r4, [r0, #0]
 8002bec:	60c4      	str	r4, [r0, #12]
 8002bee:	b13d      	cbz	r5, 8002c00 <_Bfree+0x2c>
 8002bf0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002bf2:	686a      	ldr	r2, [r5, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bfa:	6029      	str	r1, [r5, #0]
 8002bfc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8002c00:	bd70      	pop	{r4, r5, r6, pc}

08002c02 <__multadd>:
 8002c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c06:	690d      	ldr	r5, [r1, #16]
 8002c08:	461f      	mov	r7, r3
 8002c0a:	4606      	mov	r6, r0
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	f101 0c14 	add.w	ip, r1, #20
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8dc 0000 	ldr.w	r0, [ip]
 8002c18:	b281      	uxth	r1, r0
 8002c1a:	fb02 7101 	mla	r1, r2, r1, r7
 8002c1e:	0c0f      	lsrs	r7, r1, #16
 8002c20:	0c00      	lsrs	r0, r0, #16
 8002c22:	fb02 7000 	mla	r0, r2, r0, r7
 8002c26:	b289      	uxth	r1, r1
 8002c28:	3301      	adds	r3, #1
 8002c2a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8002c2e:	429d      	cmp	r5, r3
 8002c30:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8002c34:	f84c 1b04 	str.w	r1, [ip], #4
 8002c38:	dcec      	bgt.n	8002c14 <__multadd+0x12>
 8002c3a:	b1d7      	cbz	r7, 8002c72 <__multadd+0x70>
 8002c3c:	68a3      	ldr	r3, [r4, #8]
 8002c3e:	42ab      	cmp	r3, r5
 8002c40:	dc12      	bgt.n	8002c68 <__multadd+0x66>
 8002c42:	6861      	ldr	r1, [r4, #4]
 8002c44:	4630      	mov	r0, r6
 8002c46:	3101      	adds	r1, #1
 8002c48:	f7ff ff90 	bl	8002b6c <_Balloc>
 8002c4c:	6922      	ldr	r2, [r4, #16]
 8002c4e:	3202      	adds	r2, #2
 8002c50:	f104 010c 	add.w	r1, r4, #12
 8002c54:	4680      	mov	r8, r0
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	300c      	adds	r0, #12
 8002c5a:	f001 fc4d 	bl	80044f8 <memcpy>
 8002c5e:	4621      	mov	r1, r4
 8002c60:	4630      	mov	r0, r6
 8002c62:	f7ff ffb7 	bl	8002bd4 <_Bfree>
 8002c66:	4644      	mov	r4, r8
 8002c68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8002c6c:	3501      	adds	r5, #1
 8002c6e:	615f      	str	r7, [r3, #20]
 8002c70:	6125      	str	r5, [r4, #16]
 8002c72:	4620      	mov	r0, r4
 8002c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c78 <__hi0bits>:
 8002c78:	0c02      	lsrs	r2, r0, #16
 8002c7a:	0412      	lsls	r2, r2, #16
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	b9b2      	cbnz	r2, 8002cae <__hi0bits+0x36>
 8002c80:	0403      	lsls	r3, r0, #16
 8002c82:	2010      	movs	r0, #16
 8002c84:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8002c88:	bf04      	itt	eq
 8002c8a:	021b      	lsleq	r3, r3, #8
 8002c8c:	3008      	addeq	r0, #8
 8002c8e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8002c92:	bf04      	itt	eq
 8002c94:	011b      	lsleq	r3, r3, #4
 8002c96:	3004      	addeq	r0, #4
 8002c98:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8002c9c:	bf04      	itt	eq
 8002c9e:	009b      	lsleq	r3, r3, #2
 8002ca0:	3002      	addeq	r0, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	db06      	blt.n	8002cb4 <__hi0bits+0x3c>
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	d503      	bpl.n	8002cb2 <__hi0bits+0x3a>
 8002caa:	3001      	adds	r0, #1
 8002cac:	4770      	bx	lr
 8002cae:	2000      	movs	r0, #0
 8002cb0:	e7e8      	b.n	8002c84 <__hi0bits+0xc>
 8002cb2:	2020      	movs	r0, #32
 8002cb4:	4770      	bx	lr

08002cb6 <__lo0bits>:
 8002cb6:	6803      	ldr	r3, [r0, #0]
 8002cb8:	f013 0207 	ands.w	r2, r3, #7
 8002cbc:	4601      	mov	r1, r0
 8002cbe:	d00b      	beq.n	8002cd8 <__lo0bits+0x22>
 8002cc0:	07da      	lsls	r2, r3, #31
 8002cc2:	d423      	bmi.n	8002d0c <__lo0bits+0x56>
 8002cc4:	0798      	lsls	r0, r3, #30
 8002cc6:	bf49      	itett	mi
 8002cc8:	085b      	lsrmi	r3, r3, #1
 8002cca:	089b      	lsrpl	r3, r3, #2
 8002ccc:	2001      	movmi	r0, #1
 8002cce:	600b      	strmi	r3, [r1, #0]
 8002cd0:	bf5c      	itt	pl
 8002cd2:	600b      	strpl	r3, [r1, #0]
 8002cd4:	2002      	movpl	r0, #2
 8002cd6:	4770      	bx	lr
 8002cd8:	b298      	uxth	r0, r3
 8002cda:	b9a8      	cbnz	r0, 8002d08 <__lo0bits+0x52>
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	2010      	movs	r0, #16
 8002ce0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002ce4:	bf04      	itt	eq
 8002ce6:	0a1b      	lsreq	r3, r3, #8
 8002ce8:	3008      	addeq	r0, #8
 8002cea:	071a      	lsls	r2, r3, #28
 8002cec:	bf04      	itt	eq
 8002cee:	091b      	lsreq	r3, r3, #4
 8002cf0:	3004      	addeq	r0, #4
 8002cf2:	079a      	lsls	r2, r3, #30
 8002cf4:	bf04      	itt	eq
 8002cf6:	089b      	lsreq	r3, r3, #2
 8002cf8:	3002      	addeq	r0, #2
 8002cfa:	07da      	lsls	r2, r3, #31
 8002cfc:	d402      	bmi.n	8002d04 <__lo0bits+0x4e>
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	d006      	beq.n	8002d10 <__lo0bits+0x5a>
 8002d02:	3001      	adds	r0, #1
 8002d04:	600b      	str	r3, [r1, #0]
 8002d06:	4770      	bx	lr
 8002d08:	4610      	mov	r0, r2
 8002d0a:	e7e9      	b.n	8002ce0 <__lo0bits+0x2a>
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	4770      	bx	lr
 8002d10:	2020      	movs	r0, #32
 8002d12:	4770      	bx	lr

08002d14 <__i2b>:
 8002d14:	b510      	push	{r4, lr}
 8002d16:	460c      	mov	r4, r1
 8002d18:	2101      	movs	r1, #1
 8002d1a:	f7ff ff27 	bl	8002b6c <_Balloc>
 8002d1e:	2201      	movs	r2, #1
 8002d20:	6144      	str	r4, [r0, #20]
 8002d22:	6102      	str	r2, [r0, #16]
 8002d24:	bd10      	pop	{r4, pc}

08002d26 <__multiply>:
 8002d26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2a:	4614      	mov	r4, r2
 8002d2c:	690a      	ldr	r2, [r1, #16]
 8002d2e:	6923      	ldr	r3, [r4, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	bfb8      	it	lt
 8002d34:	460b      	movlt	r3, r1
 8002d36:	4688      	mov	r8, r1
 8002d38:	bfbc      	itt	lt
 8002d3a:	46a0      	movlt	r8, r4
 8002d3c:	461c      	movlt	r4, r3
 8002d3e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8002d42:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8002d46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002d4a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8002d4e:	eb07 0609 	add.w	r6, r7, r9
 8002d52:	42b3      	cmp	r3, r6
 8002d54:	bfb8      	it	lt
 8002d56:	3101      	addlt	r1, #1
 8002d58:	f7ff ff08 	bl	8002b6c <_Balloc>
 8002d5c:	f100 0514 	add.w	r5, r0, #20
 8002d60:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8002d64:	462b      	mov	r3, r5
 8002d66:	2200      	movs	r2, #0
 8002d68:	4573      	cmp	r3, lr
 8002d6a:	d316      	bcc.n	8002d9a <__multiply+0x74>
 8002d6c:	f104 0214 	add.w	r2, r4, #20
 8002d70:	f108 0114 	add.w	r1, r8, #20
 8002d74:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8002d78:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	9b00      	ldr	r3, [sp, #0]
 8002d80:	9201      	str	r2, [sp, #4]
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d80c      	bhi.n	8002da0 <__multiply+0x7a>
 8002d86:	2e00      	cmp	r6, #0
 8002d88:	dd03      	ble.n	8002d92 <__multiply+0x6c>
 8002d8a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d05d      	beq.n	8002e4e <__multiply+0x128>
 8002d92:	6106      	str	r6, [r0, #16]
 8002d94:	b003      	add	sp, #12
 8002d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d9a:	f843 2b04 	str.w	r2, [r3], #4
 8002d9e:	e7e3      	b.n	8002d68 <__multiply+0x42>
 8002da0:	f8b2 b000 	ldrh.w	fp, [r2]
 8002da4:	f1bb 0f00 	cmp.w	fp, #0
 8002da8:	d023      	beq.n	8002df2 <__multiply+0xcc>
 8002daa:	4689      	mov	r9, r1
 8002dac:	46ac      	mov	ip, r5
 8002dae:	f04f 0800 	mov.w	r8, #0
 8002db2:	f859 4b04 	ldr.w	r4, [r9], #4
 8002db6:	f8dc a000 	ldr.w	sl, [ip]
 8002dba:	b2a3      	uxth	r3, r4
 8002dbc:	fa1f fa8a 	uxth.w	sl, sl
 8002dc0:	fb0b a303 	mla	r3, fp, r3, sl
 8002dc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8002dc8:	f8dc 4000 	ldr.w	r4, [ip]
 8002dcc:	4443      	add	r3, r8
 8002dce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8002dd2:	fb0b 840a 	mla	r4, fp, sl, r8
 8002dd6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8002dda:	46e2      	mov	sl, ip
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002de2:	454f      	cmp	r7, r9
 8002de4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8002de8:	f84a 3b04 	str.w	r3, [sl], #4
 8002dec:	d82b      	bhi.n	8002e46 <__multiply+0x120>
 8002dee:	f8cc 8004 	str.w	r8, [ip, #4]
 8002df2:	9b01      	ldr	r3, [sp, #4]
 8002df4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8002df8:	3204      	adds	r2, #4
 8002dfa:	f1ba 0f00 	cmp.w	sl, #0
 8002dfe:	d020      	beq.n	8002e42 <__multiply+0x11c>
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	4689      	mov	r9, r1
 8002e04:	46a8      	mov	r8, r5
 8002e06:	f04f 0b00 	mov.w	fp, #0
 8002e0a:	f8b9 c000 	ldrh.w	ip, [r9]
 8002e0e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8002e12:	fb0a 440c 	mla	r4, sl, ip, r4
 8002e16:	445c      	add	r4, fp
 8002e18:	46c4      	mov	ip, r8
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002e20:	f84c 3b04 	str.w	r3, [ip], #4
 8002e24:	f859 3b04 	ldr.w	r3, [r9], #4
 8002e28:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	fb0a b303 	mla	r3, sl, r3, fp
 8002e32:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8002e36:	454f      	cmp	r7, r9
 8002e38:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8002e3c:	d805      	bhi.n	8002e4a <__multiply+0x124>
 8002e3e:	f8c8 3004 	str.w	r3, [r8, #4]
 8002e42:	3504      	adds	r5, #4
 8002e44:	e79b      	b.n	8002d7e <__multiply+0x58>
 8002e46:	46d4      	mov	ip, sl
 8002e48:	e7b3      	b.n	8002db2 <__multiply+0x8c>
 8002e4a:	46e0      	mov	r8, ip
 8002e4c:	e7dd      	b.n	8002e0a <__multiply+0xe4>
 8002e4e:	3e01      	subs	r6, #1
 8002e50:	e799      	b.n	8002d86 <__multiply+0x60>
	...

08002e54 <__pow5mult>:
 8002e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e58:	4615      	mov	r5, r2
 8002e5a:	f012 0203 	ands.w	r2, r2, #3
 8002e5e:	4606      	mov	r6, r0
 8002e60:	460f      	mov	r7, r1
 8002e62:	d007      	beq.n	8002e74 <__pow5mult+0x20>
 8002e64:	3a01      	subs	r2, #1
 8002e66:	4c21      	ldr	r4, [pc, #132]	; (8002eec <__pow5mult+0x98>)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8002e6e:	f7ff fec8 	bl	8002c02 <__multadd>
 8002e72:	4607      	mov	r7, r0
 8002e74:	10ad      	asrs	r5, r5, #2
 8002e76:	d035      	beq.n	8002ee4 <__pow5mult+0x90>
 8002e78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8002e7a:	b93c      	cbnz	r4, 8002e8c <__pow5mult+0x38>
 8002e7c:	2010      	movs	r0, #16
 8002e7e:	f001 fb33 	bl	80044e8 <malloc>
 8002e82:	6270      	str	r0, [r6, #36]	; 0x24
 8002e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002e88:	6004      	str	r4, [r0, #0]
 8002e8a:	60c4      	str	r4, [r0, #12]
 8002e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8002e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8002e94:	b94c      	cbnz	r4, 8002eaa <__pow5mult+0x56>
 8002e96:	f240 2171 	movw	r1, #625	; 0x271
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	f7ff ff3a 	bl	8002d14 <__i2b>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	6003      	str	r3, [r0, #0]
 8002eaa:	f04f 0800 	mov.w	r8, #0
 8002eae:	07eb      	lsls	r3, r5, #31
 8002eb0:	d50a      	bpl.n	8002ec8 <__pow5mult+0x74>
 8002eb2:	4639      	mov	r1, r7
 8002eb4:	4622      	mov	r2, r4
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	f7ff ff35 	bl	8002d26 <__multiply>
 8002ebc:	4639      	mov	r1, r7
 8002ebe:	4681      	mov	r9, r0
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	f7ff fe87 	bl	8002bd4 <_Bfree>
 8002ec6:	464f      	mov	r7, r9
 8002ec8:	106d      	asrs	r5, r5, #1
 8002eca:	d00b      	beq.n	8002ee4 <__pow5mult+0x90>
 8002ecc:	6820      	ldr	r0, [r4, #0]
 8002ece:	b938      	cbnz	r0, 8002ee0 <__pow5mult+0x8c>
 8002ed0:	4622      	mov	r2, r4
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	f7ff ff26 	bl	8002d26 <__multiply>
 8002eda:	6020      	str	r0, [r4, #0]
 8002edc:	f8c0 8000 	str.w	r8, [r0]
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	e7e4      	b.n	8002eae <__pow5mult+0x5a>
 8002ee4:	4638      	mov	r0, r7
 8002ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eea:	bf00      	nop
 8002eec:	08004770 	.word	0x08004770

08002ef0 <__lshift>:
 8002ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8002efa:	6923      	ldr	r3, [r4, #16]
 8002efc:	6849      	ldr	r1, [r1, #4]
 8002efe:	eb0a 0903 	add.w	r9, sl, r3
 8002f02:	68a3      	ldr	r3, [r4, #8]
 8002f04:	4607      	mov	r7, r0
 8002f06:	4616      	mov	r6, r2
 8002f08:	f109 0501 	add.w	r5, r9, #1
 8002f0c:	42ab      	cmp	r3, r5
 8002f0e:	db32      	blt.n	8002f76 <__lshift+0x86>
 8002f10:	4638      	mov	r0, r7
 8002f12:	f7ff fe2b 	bl	8002b6c <_Balloc>
 8002f16:	2300      	movs	r3, #0
 8002f18:	4680      	mov	r8, r0
 8002f1a:	f100 0114 	add.w	r1, r0, #20
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4553      	cmp	r3, sl
 8002f22:	db2b      	blt.n	8002f7c <__lshift+0x8c>
 8002f24:	6920      	ldr	r0, [r4, #16]
 8002f26:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002f2a:	f104 0314 	add.w	r3, r4, #20
 8002f2e:	f016 021f 	ands.w	r2, r6, #31
 8002f32:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8002f36:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8002f3a:	d025      	beq.n	8002f88 <__lshift+0x98>
 8002f3c:	f1c2 0e20 	rsb	lr, r2, #32
 8002f40:	2000      	movs	r0, #0
 8002f42:	681e      	ldr	r6, [r3, #0]
 8002f44:	468a      	mov	sl, r1
 8002f46:	4096      	lsls	r6, r2
 8002f48:	4330      	orrs	r0, r6
 8002f4a:	f84a 0b04 	str.w	r0, [sl], #4
 8002f4e:	f853 0b04 	ldr.w	r0, [r3], #4
 8002f52:	459c      	cmp	ip, r3
 8002f54:	fa20 f00e 	lsr.w	r0, r0, lr
 8002f58:	d814      	bhi.n	8002f84 <__lshift+0x94>
 8002f5a:	6048      	str	r0, [r1, #4]
 8002f5c:	b108      	cbz	r0, 8002f62 <__lshift+0x72>
 8002f5e:	f109 0502 	add.w	r5, r9, #2
 8002f62:	3d01      	subs	r5, #1
 8002f64:	4638      	mov	r0, r7
 8002f66:	f8c8 5010 	str.w	r5, [r8, #16]
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	f7ff fe32 	bl	8002bd4 <_Bfree>
 8002f70:	4640      	mov	r0, r8
 8002f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f76:	3101      	adds	r1, #1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	e7c7      	b.n	8002f0c <__lshift+0x1c>
 8002f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002f80:	3301      	adds	r3, #1
 8002f82:	e7cd      	b.n	8002f20 <__lshift+0x30>
 8002f84:	4651      	mov	r1, sl
 8002f86:	e7dc      	b.n	8002f42 <__lshift+0x52>
 8002f88:	3904      	subs	r1, #4
 8002f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8002f92:	459c      	cmp	ip, r3
 8002f94:	d8f9      	bhi.n	8002f8a <__lshift+0x9a>
 8002f96:	e7e4      	b.n	8002f62 <__lshift+0x72>

08002f98 <__mcmp>:
 8002f98:	6903      	ldr	r3, [r0, #16]
 8002f9a:	690a      	ldr	r2, [r1, #16]
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	b530      	push	{r4, r5, lr}
 8002fa0:	d10c      	bne.n	8002fbc <__mcmp+0x24>
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	3014      	adds	r0, #20
 8002fa6:	3114      	adds	r1, #20
 8002fa8:	1884      	adds	r4, r0, r2
 8002faa:	4411      	add	r1, r2
 8002fac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8002fb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8002fb4:	4295      	cmp	r5, r2
 8002fb6:	d003      	beq.n	8002fc0 <__mcmp+0x28>
 8002fb8:	d305      	bcc.n	8002fc6 <__mcmp+0x2e>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd30      	pop	{r4, r5, pc}
 8002fc0:	42a0      	cmp	r0, r4
 8002fc2:	d3f3      	bcc.n	8002fac <__mcmp+0x14>
 8002fc4:	e7fa      	b.n	8002fbc <__mcmp+0x24>
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	e7f7      	b.n	8002fbc <__mcmp+0x24>

08002fcc <__mdiff>:
 8002fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd0:	460d      	mov	r5, r1
 8002fd2:	4607      	mov	r7, r0
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	4614      	mov	r4, r2
 8002fda:	f7ff ffdd 	bl	8002f98 <__mcmp>
 8002fde:	1e06      	subs	r6, r0, #0
 8002fe0:	d108      	bne.n	8002ff4 <__mdiff+0x28>
 8002fe2:	4631      	mov	r1, r6
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	f7ff fdc1 	bl	8002b6c <_Balloc>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8002ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff4:	bfa4      	itt	ge
 8002ff6:	4623      	movge	r3, r4
 8002ff8:	462c      	movge	r4, r5
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	6861      	ldr	r1, [r4, #4]
 8002ffe:	bfa6      	itte	ge
 8003000:	461d      	movge	r5, r3
 8003002:	2600      	movge	r6, #0
 8003004:	2601      	movlt	r6, #1
 8003006:	f7ff fdb1 	bl	8002b6c <_Balloc>
 800300a:	692b      	ldr	r3, [r5, #16]
 800300c:	60c6      	str	r6, [r0, #12]
 800300e:	6926      	ldr	r6, [r4, #16]
 8003010:	f105 0914 	add.w	r9, r5, #20
 8003014:	f104 0214 	add.w	r2, r4, #20
 8003018:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800301c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003020:	f100 0514 	add.w	r5, r0, #20
 8003024:	f04f 0e00 	mov.w	lr, #0
 8003028:	f852 ab04 	ldr.w	sl, [r2], #4
 800302c:	f859 4b04 	ldr.w	r4, [r9], #4
 8003030:	fa1e f18a 	uxtah	r1, lr, sl
 8003034:	b2a3      	uxth	r3, r4
 8003036:	1ac9      	subs	r1, r1, r3
 8003038:	0c23      	lsrs	r3, r4, #16
 800303a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800303e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003042:	b289      	uxth	r1, r1
 8003044:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003048:	45c8      	cmp	r8, r9
 800304a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800304e:	4694      	mov	ip, r2
 8003050:	f845 3b04 	str.w	r3, [r5], #4
 8003054:	d8e8      	bhi.n	8003028 <__mdiff+0x5c>
 8003056:	45bc      	cmp	ip, r7
 8003058:	d304      	bcc.n	8003064 <__mdiff+0x98>
 800305a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800305e:	b183      	cbz	r3, 8003082 <__mdiff+0xb6>
 8003060:	6106      	str	r6, [r0, #16]
 8003062:	e7c5      	b.n	8002ff0 <__mdiff+0x24>
 8003064:	f85c 1b04 	ldr.w	r1, [ip], #4
 8003068:	fa1e f381 	uxtah	r3, lr, r1
 800306c:	141a      	asrs	r2, r3, #16
 800306e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003072:	b29b      	uxth	r3, r3
 8003074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003078:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800307c:	f845 3b04 	str.w	r3, [r5], #4
 8003080:	e7e9      	b.n	8003056 <__mdiff+0x8a>
 8003082:	3e01      	subs	r6, #1
 8003084:	e7e9      	b.n	800305a <__mdiff+0x8e>

08003086 <__d2b>:
 8003086:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800308a:	460e      	mov	r6, r1
 800308c:	2101      	movs	r1, #1
 800308e:	ec59 8b10 	vmov	r8, r9, d0
 8003092:	4615      	mov	r5, r2
 8003094:	f7ff fd6a 	bl	8002b6c <_Balloc>
 8003098:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800309c:	4607      	mov	r7, r0
 800309e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80030a2:	bb34      	cbnz	r4, 80030f2 <__d2b+0x6c>
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	f1b8 0300 	subs.w	r3, r8, #0
 80030aa:	d027      	beq.n	80030fc <__d2b+0x76>
 80030ac:	a802      	add	r0, sp, #8
 80030ae:	f840 3d08 	str.w	r3, [r0, #-8]!
 80030b2:	f7ff fe00 	bl	8002cb6 <__lo0bits>
 80030b6:	9900      	ldr	r1, [sp, #0]
 80030b8:	b1f0      	cbz	r0, 80030f8 <__d2b+0x72>
 80030ba:	9a01      	ldr	r2, [sp, #4]
 80030bc:	f1c0 0320 	rsb	r3, r0, #32
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	430b      	orrs	r3, r1
 80030c6:	40c2      	lsrs	r2, r0
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	9201      	str	r2, [sp, #4]
 80030cc:	9b01      	ldr	r3, [sp, #4]
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf14      	ite	ne
 80030d4:	2102      	movne	r1, #2
 80030d6:	2101      	moveq	r1, #1
 80030d8:	6139      	str	r1, [r7, #16]
 80030da:	b1c4      	cbz	r4, 800310e <__d2b+0x88>
 80030dc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80030e0:	4404      	add	r4, r0
 80030e2:	6034      	str	r4, [r6, #0]
 80030e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80030e8:	6028      	str	r0, [r5, #0]
 80030ea:	4638      	mov	r0, r7
 80030ec:	b003      	add	sp, #12
 80030ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f6:	e7d5      	b.n	80030a4 <__d2b+0x1e>
 80030f8:	6179      	str	r1, [r7, #20]
 80030fa:	e7e7      	b.n	80030cc <__d2b+0x46>
 80030fc:	a801      	add	r0, sp, #4
 80030fe:	f7ff fdda 	bl	8002cb6 <__lo0bits>
 8003102:	9b01      	ldr	r3, [sp, #4]
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	2101      	movs	r1, #1
 8003108:	6139      	str	r1, [r7, #16]
 800310a:	3020      	adds	r0, #32
 800310c:	e7e5      	b.n	80030da <__d2b+0x54>
 800310e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003112:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003116:	6030      	str	r0, [r6, #0]
 8003118:	6918      	ldr	r0, [r3, #16]
 800311a:	f7ff fdad 	bl	8002c78 <__hi0bits>
 800311e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003122:	e7e1      	b.n	80030e8 <__d2b+0x62>

08003124 <_mprec_log10>:
 8003124:	2817      	cmp	r0, #23
 8003126:	b5d0      	push	{r4, r6, r7, lr}
 8003128:	4604      	mov	r4, r0
 800312a:	dc07      	bgt.n	800313c <_mprec_log10+0x18>
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <_mprec_log10+0x30>)
 800312e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8003132:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003136:	ec41 0b10 	vmov	d0, r0, r1
 800313a:	bdd0      	pop	{r4, r6, r7, pc}
 800313c:	4906      	ldr	r1, [pc, #24]	; (8003158 <_mprec_log10+0x34>)
 800313e:	4f07      	ldr	r7, [pc, #28]	; (800315c <_mprec_log10+0x38>)
 8003140:	2000      	movs	r0, #0
 8003142:	2600      	movs	r6, #0
 8003144:	4632      	mov	r2, r6
 8003146:	463b      	mov	r3, r7
 8003148:	f7fd fa4e 	bl	80005e8 <__aeabi_dmul>
 800314c:	3c01      	subs	r4, #1
 800314e:	d1f9      	bne.n	8003144 <_mprec_log10+0x20>
 8003150:	e7f1      	b.n	8003136 <_mprec_log10+0x12>
 8003152:	bf00      	nop
 8003154:	080046a8 	.word	0x080046a8
 8003158:	3ff00000 	.word	0x3ff00000
 800315c:	40240000 	.word	0x40240000

08003160 <_calloc_r>:
 8003160:	b538      	push	{r3, r4, r5, lr}
 8003162:	fb02 f401 	mul.w	r4, r2, r1
 8003166:	4621      	mov	r1, r4
 8003168:	f000 f808 	bl	800317c <_malloc_r>
 800316c:	4605      	mov	r5, r0
 800316e:	b118      	cbz	r0, 8003178 <_calloc_r+0x18>
 8003170:	4622      	mov	r2, r4
 8003172:	2100      	movs	r1, #0
 8003174:	f7ff fb82 	bl	800287c <memset>
 8003178:	4628      	mov	r0, r5
 800317a:	bd38      	pop	{r3, r4, r5, pc}

0800317c <_malloc_r>:
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	1ccd      	adds	r5, r1, #3
 8003180:	f025 0503 	bic.w	r5, r5, #3
 8003184:	3508      	adds	r5, #8
 8003186:	2d0c      	cmp	r5, #12
 8003188:	bf38      	it	cc
 800318a:	250c      	movcc	r5, #12
 800318c:	2d00      	cmp	r5, #0
 800318e:	4606      	mov	r6, r0
 8003190:	db01      	blt.n	8003196 <_malloc_r+0x1a>
 8003192:	42a9      	cmp	r1, r5
 8003194:	d903      	bls.n	800319e <_malloc_r+0x22>
 8003196:	230c      	movs	r3, #12
 8003198:	6033      	str	r3, [r6, #0]
 800319a:	2000      	movs	r0, #0
 800319c:	bd70      	pop	{r4, r5, r6, pc}
 800319e:	f001 f9cf 	bl	8004540 <__malloc_lock>
 80031a2:	4a21      	ldr	r2, [pc, #132]	; (8003228 <_malloc_r+0xac>)
 80031a4:	6814      	ldr	r4, [r2, #0]
 80031a6:	4621      	mov	r1, r4
 80031a8:	b991      	cbnz	r1, 80031d0 <_malloc_r+0x54>
 80031aa:	4c20      	ldr	r4, [pc, #128]	; (800322c <_malloc_r+0xb0>)
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	b91b      	cbnz	r3, 80031b8 <_malloc_r+0x3c>
 80031b0:	4630      	mov	r0, r6
 80031b2:	f000 fb3d 	bl	8003830 <_sbrk_r>
 80031b6:	6020      	str	r0, [r4, #0]
 80031b8:	4629      	mov	r1, r5
 80031ba:	4630      	mov	r0, r6
 80031bc:	f000 fb38 	bl	8003830 <_sbrk_r>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d124      	bne.n	800320e <_malloc_r+0x92>
 80031c4:	230c      	movs	r3, #12
 80031c6:	6033      	str	r3, [r6, #0]
 80031c8:	4630      	mov	r0, r6
 80031ca:	f001 f9ba 	bl	8004542 <__malloc_unlock>
 80031ce:	e7e4      	b.n	800319a <_malloc_r+0x1e>
 80031d0:	680b      	ldr	r3, [r1, #0]
 80031d2:	1b5b      	subs	r3, r3, r5
 80031d4:	d418      	bmi.n	8003208 <_malloc_r+0x8c>
 80031d6:	2b0b      	cmp	r3, #11
 80031d8:	d90f      	bls.n	80031fa <_malloc_r+0x7e>
 80031da:	600b      	str	r3, [r1, #0]
 80031dc:	50cd      	str	r5, [r1, r3]
 80031de:	18cc      	adds	r4, r1, r3
 80031e0:	4630      	mov	r0, r6
 80031e2:	f001 f9ae 	bl	8004542 <__malloc_unlock>
 80031e6:	f104 000b 	add.w	r0, r4, #11
 80031ea:	1d23      	adds	r3, r4, #4
 80031ec:	f020 0007 	bic.w	r0, r0, #7
 80031f0:	1ac3      	subs	r3, r0, r3
 80031f2:	d0d3      	beq.n	800319c <_malloc_r+0x20>
 80031f4:	425a      	negs	r2, r3
 80031f6:	50e2      	str	r2, [r4, r3]
 80031f8:	e7d0      	b.n	800319c <_malloc_r+0x20>
 80031fa:	428c      	cmp	r4, r1
 80031fc:	684b      	ldr	r3, [r1, #4]
 80031fe:	bf16      	itet	ne
 8003200:	6063      	strne	r3, [r4, #4]
 8003202:	6013      	streq	r3, [r2, #0]
 8003204:	460c      	movne	r4, r1
 8003206:	e7eb      	b.n	80031e0 <_malloc_r+0x64>
 8003208:	460c      	mov	r4, r1
 800320a:	6849      	ldr	r1, [r1, #4]
 800320c:	e7cc      	b.n	80031a8 <_malloc_r+0x2c>
 800320e:	1cc4      	adds	r4, r0, #3
 8003210:	f024 0403 	bic.w	r4, r4, #3
 8003214:	42a0      	cmp	r0, r4
 8003216:	d005      	beq.n	8003224 <_malloc_r+0xa8>
 8003218:	1a21      	subs	r1, r4, r0
 800321a:	4630      	mov	r0, r6
 800321c:	f000 fb08 	bl	8003830 <_sbrk_r>
 8003220:	3001      	adds	r0, #1
 8003222:	d0cf      	beq.n	80031c4 <_malloc_r+0x48>
 8003224:	6025      	str	r5, [r4, #0]
 8003226:	e7db      	b.n	80031e0 <_malloc_r+0x64>
 8003228:	200000c0 	.word	0x200000c0
 800322c:	200000c4 	.word	0x200000c4

08003230 <_realloc_r>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	4607      	mov	r7, r0
 8003234:	4614      	mov	r4, r2
 8003236:	460e      	mov	r6, r1
 8003238:	b921      	cbnz	r1, 8003244 <_realloc_r+0x14>
 800323a:	4611      	mov	r1, r2
 800323c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003240:	f7ff bf9c 	b.w	800317c <_malloc_r>
 8003244:	b922      	cbnz	r2, 8003250 <_realloc_r+0x20>
 8003246:	f001 f97d 	bl	8004544 <_free_r>
 800324a:	4625      	mov	r5, r4
 800324c:	4628      	mov	r0, r5
 800324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003250:	f001 f9c6 	bl	80045e0 <_malloc_usable_size_r>
 8003254:	42a0      	cmp	r0, r4
 8003256:	d20f      	bcs.n	8003278 <_realloc_r+0x48>
 8003258:	4621      	mov	r1, r4
 800325a:	4638      	mov	r0, r7
 800325c:	f7ff ff8e 	bl	800317c <_malloc_r>
 8003260:	4605      	mov	r5, r0
 8003262:	2800      	cmp	r0, #0
 8003264:	d0f2      	beq.n	800324c <_realloc_r+0x1c>
 8003266:	4631      	mov	r1, r6
 8003268:	4622      	mov	r2, r4
 800326a:	f001 f945 	bl	80044f8 <memcpy>
 800326e:	4631      	mov	r1, r6
 8003270:	4638      	mov	r0, r7
 8003272:	f001 f967 	bl	8004544 <_free_r>
 8003276:	e7e9      	b.n	800324c <_realloc_r+0x1c>
 8003278:	4635      	mov	r5, r6
 800327a:	e7e7      	b.n	800324c <_realloc_r+0x1c>

0800327c <__ssputs_r>:
 800327c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003280:	688e      	ldr	r6, [r1, #8]
 8003282:	429e      	cmp	r6, r3
 8003284:	4682      	mov	sl, r0
 8003286:	460c      	mov	r4, r1
 8003288:	4690      	mov	r8, r2
 800328a:	4699      	mov	r9, r3
 800328c:	d837      	bhi.n	80032fe <__ssputs_r+0x82>
 800328e:	898a      	ldrh	r2, [r1, #12]
 8003290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003294:	d031      	beq.n	80032fa <__ssputs_r+0x7e>
 8003296:	6825      	ldr	r5, [r4, #0]
 8003298:	6909      	ldr	r1, [r1, #16]
 800329a:	1a6f      	subs	r7, r5, r1
 800329c:	6965      	ldr	r5, [r4, #20]
 800329e:	2302      	movs	r3, #2
 80032a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80032a8:	f109 0301 	add.w	r3, r9, #1
 80032ac:	443b      	add	r3, r7
 80032ae:	429d      	cmp	r5, r3
 80032b0:	bf38      	it	cc
 80032b2:	461d      	movcc	r5, r3
 80032b4:	0553      	lsls	r3, r2, #21
 80032b6:	d530      	bpl.n	800331a <__ssputs_r+0x9e>
 80032b8:	4629      	mov	r1, r5
 80032ba:	f7ff ff5f 	bl	800317c <_malloc_r>
 80032be:	4606      	mov	r6, r0
 80032c0:	b950      	cbnz	r0, 80032d8 <__ssputs_r+0x5c>
 80032c2:	230c      	movs	r3, #12
 80032c4:	f8ca 3000 	str.w	r3, [sl]
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ce:	81a3      	strh	r3, [r4, #12]
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d8:	463a      	mov	r2, r7
 80032da:	6921      	ldr	r1, [r4, #16]
 80032dc:	f001 f90c 	bl	80044f8 <memcpy>
 80032e0:	89a3      	ldrh	r3, [r4, #12]
 80032e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ea:	81a3      	strh	r3, [r4, #12]
 80032ec:	6126      	str	r6, [r4, #16]
 80032ee:	6165      	str	r5, [r4, #20]
 80032f0:	443e      	add	r6, r7
 80032f2:	1bed      	subs	r5, r5, r7
 80032f4:	6026      	str	r6, [r4, #0]
 80032f6:	60a5      	str	r5, [r4, #8]
 80032f8:	464e      	mov	r6, r9
 80032fa:	454e      	cmp	r6, r9
 80032fc:	d900      	bls.n	8003300 <__ssputs_r+0x84>
 80032fe:	464e      	mov	r6, r9
 8003300:	4632      	mov	r2, r6
 8003302:	4641      	mov	r1, r8
 8003304:	6820      	ldr	r0, [r4, #0]
 8003306:	f001 f902 	bl	800450e <memmove>
 800330a:	68a3      	ldr	r3, [r4, #8]
 800330c:	1b9b      	subs	r3, r3, r6
 800330e:	60a3      	str	r3, [r4, #8]
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	441e      	add	r6, r3
 8003314:	6026      	str	r6, [r4, #0]
 8003316:	2000      	movs	r0, #0
 8003318:	e7dc      	b.n	80032d4 <__ssputs_r+0x58>
 800331a:	462a      	mov	r2, r5
 800331c:	f7ff ff88 	bl	8003230 <_realloc_r>
 8003320:	4606      	mov	r6, r0
 8003322:	2800      	cmp	r0, #0
 8003324:	d1e2      	bne.n	80032ec <__ssputs_r+0x70>
 8003326:	6921      	ldr	r1, [r4, #16]
 8003328:	4650      	mov	r0, sl
 800332a:	f001 f90b 	bl	8004544 <_free_r>
 800332e:	e7c8      	b.n	80032c2 <__ssputs_r+0x46>

08003330 <_svfiprintf_r>:
 8003330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003334:	461d      	mov	r5, r3
 8003336:	898b      	ldrh	r3, [r1, #12]
 8003338:	061f      	lsls	r7, r3, #24
 800333a:	b09d      	sub	sp, #116	; 0x74
 800333c:	4680      	mov	r8, r0
 800333e:	460c      	mov	r4, r1
 8003340:	4616      	mov	r6, r2
 8003342:	d50f      	bpl.n	8003364 <_svfiprintf_r+0x34>
 8003344:	690b      	ldr	r3, [r1, #16]
 8003346:	b96b      	cbnz	r3, 8003364 <_svfiprintf_r+0x34>
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	f7ff ff17 	bl	800317c <_malloc_r>
 800334e:	6020      	str	r0, [r4, #0]
 8003350:	6120      	str	r0, [r4, #16]
 8003352:	b928      	cbnz	r0, 8003360 <_svfiprintf_r+0x30>
 8003354:	230c      	movs	r3, #12
 8003356:	f8c8 3000 	str.w	r3, [r8]
 800335a:	f04f 30ff 	mov.w	r0, #4294967295
 800335e:	e0c8      	b.n	80034f2 <_svfiprintf_r+0x1c2>
 8003360:	2340      	movs	r3, #64	; 0x40
 8003362:	6163      	str	r3, [r4, #20]
 8003364:	2300      	movs	r3, #0
 8003366:	9309      	str	r3, [sp, #36]	; 0x24
 8003368:	2320      	movs	r3, #32
 800336a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800336e:	2330      	movs	r3, #48	; 0x30
 8003370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003374:	9503      	str	r5, [sp, #12]
 8003376:	f04f 0b01 	mov.w	fp, #1
 800337a:	4637      	mov	r7, r6
 800337c:	463d      	mov	r5, r7
 800337e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003382:	b10b      	cbz	r3, 8003388 <_svfiprintf_r+0x58>
 8003384:	2b25      	cmp	r3, #37	; 0x25
 8003386:	d13e      	bne.n	8003406 <_svfiprintf_r+0xd6>
 8003388:	ebb7 0a06 	subs.w	sl, r7, r6
 800338c:	d00b      	beq.n	80033a6 <_svfiprintf_r+0x76>
 800338e:	4653      	mov	r3, sl
 8003390:	4632      	mov	r2, r6
 8003392:	4621      	mov	r1, r4
 8003394:	4640      	mov	r0, r8
 8003396:	f7ff ff71 	bl	800327c <__ssputs_r>
 800339a:	3001      	adds	r0, #1
 800339c:	f000 80a4 	beq.w	80034e8 <_svfiprintf_r+0x1b8>
 80033a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a2:	4453      	add	r3, sl
 80033a4:	9309      	str	r3, [sp, #36]	; 0x24
 80033a6:	783b      	ldrb	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 809d 	beq.w	80034e8 <_svfiprintf_r+0x1b8>
 80033ae:	2300      	movs	r3, #0
 80033b0:	f04f 32ff 	mov.w	r2, #4294967295
 80033b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033b8:	9304      	str	r3, [sp, #16]
 80033ba:	9307      	str	r3, [sp, #28]
 80033bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033c0:	931a      	str	r3, [sp, #104]	; 0x68
 80033c2:	462f      	mov	r7, r5
 80033c4:	2205      	movs	r2, #5
 80033c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80033ca:	4850      	ldr	r0, [pc, #320]	; (800350c <_svfiprintf_r+0x1dc>)
 80033cc:	f7fc ff00 	bl	80001d0 <memchr>
 80033d0:	9b04      	ldr	r3, [sp, #16]
 80033d2:	b9d0      	cbnz	r0, 800340a <_svfiprintf_r+0xda>
 80033d4:	06d9      	lsls	r1, r3, #27
 80033d6:	bf44      	itt	mi
 80033d8:	2220      	movmi	r2, #32
 80033da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033de:	071a      	lsls	r2, r3, #28
 80033e0:	bf44      	itt	mi
 80033e2:	222b      	movmi	r2, #43	; 0x2b
 80033e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033e8:	782a      	ldrb	r2, [r5, #0]
 80033ea:	2a2a      	cmp	r2, #42	; 0x2a
 80033ec:	d015      	beq.n	800341a <_svfiprintf_r+0xea>
 80033ee:	9a07      	ldr	r2, [sp, #28]
 80033f0:	462f      	mov	r7, r5
 80033f2:	2000      	movs	r0, #0
 80033f4:	250a      	movs	r5, #10
 80033f6:	4639      	mov	r1, r7
 80033f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033fc:	3b30      	subs	r3, #48	; 0x30
 80033fe:	2b09      	cmp	r3, #9
 8003400:	d94d      	bls.n	800349e <_svfiprintf_r+0x16e>
 8003402:	b1b8      	cbz	r0, 8003434 <_svfiprintf_r+0x104>
 8003404:	e00f      	b.n	8003426 <_svfiprintf_r+0xf6>
 8003406:	462f      	mov	r7, r5
 8003408:	e7b8      	b.n	800337c <_svfiprintf_r+0x4c>
 800340a:	4a40      	ldr	r2, [pc, #256]	; (800350c <_svfiprintf_r+0x1dc>)
 800340c:	1a80      	subs	r0, r0, r2
 800340e:	fa0b f000 	lsl.w	r0, fp, r0
 8003412:	4318      	orrs	r0, r3
 8003414:	9004      	str	r0, [sp, #16]
 8003416:	463d      	mov	r5, r7
 8003418:	e7d3      	b.n	80033c2 <_svfiprintf_r+0x92>
 800341a:	9a03      	ldr	r2, [sp, #12]
 800341c:	1d11      	adds	r1, r2, #4
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	9103      	str	r1, [sp, #12]
 8003422:	2a00      	cmp	r2, #0
 8003424:	db01      	blt.n	800342a <_svfiprintf_r+0xfa>
 8003426:	9207      	str	r2, [sp, #28]
 8003428:	e004      	b.n	8003434 <_svfiprintf_r+0x104>
 800342a:	4252      	negs	r2, r2
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	9207      	str	r2, [sp, #28]
 8003432:	9304      	str	r3, [sp, #16]
 8003434:	783b      	ldrb	r3, [r7, #0]
 8003436:	2b2e      	cmp	r3, #46	; 0x2e
 8003438:	d10c      	bne.n	8003454 <_svfiprintf_r+0x124>
 800343a:	787b      	ldrb	r3, [r7, #1]
 800343c:	2b2a      	cmp	r3, #42	; 0x2a
 800343e:	d133      	bne.n	80034a8 <_svfiprintf_r+0x178>
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	1d1a      	adds	r2, r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	9203      	str	r2, [sp, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	bfb8      	it	lt
 800344c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003450:	3702      	adds	r7, #2
 8003452:	9305      	str	r3, [sp, #20]
 8003454:	4d2e      	ldr	r5, [pc, #184]	; (8003510 <_svfiprintf_r+0x1e0>)
 8003456:	7839      	ldrb	r1, [r7, #0]
 8003458:	2203      	movs	r2, #3
 800345a:	4628      	mov	r0, r5
 800345c:	f7fc feb8 	bl	80001d0 <memchr>
 8003460:	b138      	cbz	r0, 8003472 <_svfiprintf_r+0x142>
 8003462:	2340      	movs	r3, #64	; 0x40
 8003464:	1b40      	subs	r0, r0, r5
 8003466:	fa03 f000 	lsl.w	r0, r3, r0
 800346a:	9b04      	ldr	r3, [sp, #16]
 800346c:	4303      	orrs	r3, r0
 800346e:	3701      	adds	r7, #1
 8003470:	9304      	str	r3, [sp, #16]
 8003472:	7839      	ldrb	r1, [r7, #0]
 8003474:	4827      	ldr	r0, [pc, #156]	; (8003514 <_svfiprintf_r+0x1e4>)
 8003476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800347a:	2206      	movs	r2, #6
 800347c:	1c7e      	adds	r6, r7, #1
 800347e:	f7fc fea7 	bl	80001d0 <memchr>
 8003482:	2800      	cmp	r0, #0
 8003484:	d038      	beq.n	80034f8 <_svfiprintf_r+0x1c8>
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <_svfiprintf_r+0x1e8>)
 8003488:	bb13      	cbnz	r3, 80034d0 <_svfiprintf_r+0x1a0>
 800348a:	9b03      	ldr	r3, [sp, #12]
 800348c:	3307      	adds	r3, #7
 800348e:	f023 0307 	bic.w	r3, r3, #7
 8003492:	3308      	adds	r3, #8
 8003494:	9303      	str	r3, [sp, #12]
 8003496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003498:	444b      	add	r3, r9
 800349a:	9309      	str	r3, [sp, #36]	; 0x24
 800349c:	e76d      	b.n	800337a <_svfiprintf_r+0x4a>
 800349e:	fb05 3202 	mla	r2, r5, r2, r3
 80034a2:	2001      	movs	r0, #1
 80034a4:	460f      	mov	r7, r1
 80034a6:	e7a6      	b.n	80033f6 <_svfiprintf_r+0xc6>
 80034a8:	2300      	movs	r3, #0
 80034aa:	3701      	adds	r7, #1
 80034ac:	9305      	str	r3, [sp, #20]
 80034ae:	4619      	mov	r1, r3
 80034b0:	250a      	movs	r5, #10
 80034b2:	4638      	mov	r0, r7
 80034b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034b8:	3a30      	subs	r2, #48	; 0x30
 80034ba:	2a09      	cmp	r2, #9
 80034bc:	d903      	bls.n	80034c6 <_svfiprintf_r+0x196>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0c8      	beq.n	8003454 <_svfiprintf_r+0x124>
 80034c2:	9105      	str	r1, [sp, #20]
 80034c4:	e7c6      	b.n	8003454 <_svfiprintf_r+0x124>
 80034c6:	fb05 2101 	mla	r1, r5, r1, r2
 80034ca:	2301      	movs	r3, #1
 80034cc:	4607      	mov	r7, r0
 80034ce:	e7f0      	b.n	80034b2 <_svfiprintf_r+0x182>
 80034d0:	ab03      	add	r3, sp, #12
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	4622      	mov	r2, r4
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <_svfiprintf_r+0x1ec>)
 80034d8:	a904      	add	r1, sp, #16
 80034da:	4640      	mov	r0, r8
 80034dc:	f3af 8000 	nop.w
 80034e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034e4:	4681      	mov	r9, r0
 80034e6:	d1d6      	bne.n	8003496 <_svfiprintf_r+0x166>
 80034e8:	89a3      	ldrh	r3, [r4, #12]
 80034ea:	065b      	lsls	r3, r3, #25
 80034ec:	f53f af35 	bmi.w	800335a <_svfiprintf_r+0x2a>
 80034f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034f2:	b01d      	add	sp, #116	; 0x74
 80034f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f8:	ab03      	add	r3, sp, #12
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	4622      	mov	r2, r4
 80034fe:	4b07      	ldr	r3, [pc, #28]	; (800351c <_svfiprintf_r+0x1ec>)
 8003500:	a904      	add	r1, sp, #16
 8003502:	4640      	mov	r0, r8
 8003504:	f000 f882 	bl	800360c <_printf_i>
 8003508:	e7ea      	b.n	80034e0 <_svfiprintf_r+0x1b0>
 800350a:	bf00      	nop
 800350c:	0800477c 	.word	0x0800477c
 8003510:	08004782 	.word	0x08004782
 8003514:	08004786 	.word	0x08004786
 8003518:	00000000 	.word	0x00000000
 800351c:	0800327d 	.word	0x0800327d

08003520 <_printf_common>:
 8003520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003524:	4691      	mov	r9, r2
 8003526:	461f      	mov	r7, r3
 8003528:	688a      	ldr	r2, [r1, #8]
 800352a:	690b      	ldr	r3, [r1, #16]
 800352c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003530:	4293      	cmp	r3, r2
 8003532:	bfb8      	it	lt
 8003534:	4613      	movlt	r3, r2
 8003536:	f8c9 3000 	str.w	r3, [r9]
 800353a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800353e:	4606      	mov	r6, r0
 8003540:	460c      	mov	r4, r1
 8003542:	b112      	cbz	r2, 800354a <_printf_common+0x2a>
 8003544:	3301      	adds	r3, #1
 8003546:	f8c9 3000 	str.w	r3, [r9]
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	0699      	lsls	r1, r3, #26
 800354e:	bf42      	ittt	mi
 8003550:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003554:	3302      	addmi	r3, #2
 8003556:	f8c9 3000 	strmi.w	r3, [r9]
 800355a:	6825      	ldr	r5, [r4, #0]
 800355c:	f015 0506 	ands.w	r5, r5, #6
 8003560:	d107      	bne.n	8003572 <_printf_common+0x52>
 8003562:	f104 0a19 	add.w	sl, r4, #25
 8003566:	68e3      	ldr	r3, [r4, #12]
 8003568:	f8d9 2000 	ldr.w	r2, [r9]
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	42ab      	cmp	r3, r5
 8003570:	dc28      	bgt.n	80035c4 <_printf_common+0xa4>
 8003572:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	3300      	adds	r3, #0
 800357a:	bf18      	it	ne
 800357c:	2301      	movne	r3, #1
 800357e:	0692      	lsls	r2, r2, #26
 8003580:	d42d      	bmi.n	80035de <_printf_common+0xbe>
 8003582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003586:	4639      	mov	r1, r7
 8003588:	4630      	mov	r0, r6
 800358a:	47c0      	blx	r8
 800358c:	3001      	adds	r0, #1
 800358e:	d020      	beq.n	80035d2 <_printf_common+0xb2>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	68e5      	ldr	r5, [r4, #12]
 8003594:	f8d9 2000 	ldr.w	r2, [r9]
 8003598:	f003 0306 	and.w	r3, r3, #6
 800359c:	2b04      	cmp	r3, #4
 800359e:	bf08      	it	eq
 80035a0:	1aad      	subeq	r5, r5, r2
 80035a2:	68a3      	ldr	r3, [r4, #8]
 80035a4:	6922      	ldr	r2, [r4, #16]
 80035a6:	bf0c      	ite	eq
 80035a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ac:	2500      	movne	r5, #0
 80035ae:	4293      	cmp	r3, r2
 80035b0:	bfc4      	itt	gt
 80035b2:	1a9b      	subgt	r3, r3, r2
 80035b4:	18ed      	addgt	r5, r5, r3
 80035b6:	f04f 0900 	mov.w	r9, #0
 80035ba:	341a      	adds	r4, #26
 80035bc:	454d      	cmp	r5, r9
 80035be:	d11a      	bne.n	80035f6 <_printf_common+0xd6>
 80035c0:	2000      	movs	r0, #0
 80035c2:	e008      	b.n	80035d6 <_printf_common+0xb6>
 80035c4:	2301      	movs	r3, #1
 80035c6:	4652      	mov	r2, sl
 80035c8:	4639      	mov	r1, r7
 80035ca:	4630      	mov	r0, r6
 80035cc:	47c0      	blx	r8
 80035ce:	3001      	adds	r0, #1
 80035d0:	d103      	bne.n	80035da <_printf_common+0xba>
 80035d2:	f04f 30ff 	mov.w	r0, #4294967295
 80035d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035da:	3501      	adds	r5, #1
 80035dc:	e7c3      	b.n	8003566 <_printf_common+0x46>
 80035de:	18e1      	adds	r1, r4, r3
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	2030      	movs	r0, #48	; 0x30
 80035e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035e8:	4422      	add	r2, r4
 80035ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035f2:	3302      	adds	r3, #2
 80035f4:	e7c5      	b.n	8003582 <_printf_common+0x62>
 80035f6:	2301      	movs	r3, #1
 80035f8:	4622      	mov	r2, r4
 80035fa:	4639      	mov	r1, r7
 80035fc:	4630      	mov	r0, r6
 80035fe:	47c0      	blx	r8
 8003600:	3001      	adds	r0, #1
 8003602:	d0e6      	beq.n	80035d2 <_printf_common+0xb2>
 8003604:	f109 0901 	add.w	r9, r9, #1
 8003608:	e7d8      	b.n	80035bc <_printf_common+0x9c>
	...

0800360c <_printf_i>:
 800360c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003610:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003614:	460c      	mov	r4, r1
 8003616:	7e09      	ldrb	r1, [r1, #24]
 8003618:	b085      	sub	sp, #20
 800361a:	296e      	cmp	r1, #110	; 0x6e
 800361c:	4617      	mov	r7, r2
 800361e:	4606      	mov	r6, r0
 8003620:	4698      	mov	r8, r3
 8003622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003624:	f000 80b3 	beq.w	800378e <_printf_i+0x182>
 8003628:	d822      	bhi.n	8003670 <_printf_i+0x64>
 800362a:	2963      	cmp	r1, #99	; 0x63
 800362c:	d036      	beq.n	800369c <_printf_i+0x90>
 800362e:	d80a      	bhi.n	8003646 <_printf_i+0x3a>
 8003630:	2900      	cmp	r1, #0
 8003632:	f000 80b9 	beq.w	80037a8 <_printf_i+0x19c>
 8003636:	2958      	cmp	r1, #88	; 0x58
 8003638:	f000 8083 	beq.w	8003742 <_printf_i+0x136>
 800363c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003640:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003644:	e032      	b.n	80036ac <_printf_i+0xa0>
 8003646:	2964      	cmp	r1, #100	; 0x64
 8003648:	d001      	beq.n	800364e <_printf_i+0x42>
 800364a:	2969      	cmp	r1, #105	; 0x69
 800364c:	d1f6      	bne.n	800363c <_printf_i+0x30>
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	6813      	ldr	r3, [r2, #0]
 8003652:	0605      	lsls	r5, r0, #24
 8003654:	f103 0104 	add.w	r1, r3, #4
 8003658:	d52a      	bpl.n	80036b0 <_printf_i+0xa4>
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6011      	str	r1, [r2, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	da03      	bge.n	800366a <_printf_i+0x5e>
 8003662:	222d      	movs	r2, #45	; 0x2d
 8003664:	425b      	negs	r3, r3
 8003666:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800366a:	486f      	ldr	r0, [pc, #444]	; (8003828 <_printf_i+0x21c>)
 800366c:	220a      	movs	r2, #10
 800366e:	e039      	b.n	80036e4 <_printf_i+0xd8>
 8003670:	2973      	cmp	r1, #115	; 0x73
 8003672:	f000 809d 	beq.w	80037b0 <_printf_i+0x1a4>
 8003676:	d808      	bhi.n	800368a <_printf_i+0x7e>
 8003678:	296f      	cmp	r1, #111	; 0x6f
 800367a:	d020      	beq.n	80036be <_printf_i+0xb2>
 800367c:	2970      	cmp	r1, #112	; 0x70
 800367e:	d1dd      	bne.n	800363c <_printf_i+0x30>
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	f043 0320 	orr.w	r3, r3, #32
 8003686:	6023      	str	r3, [r4, #0]
 8003688:	e003      	b.n	8003692 <_printf_i+0x86>
 800368a:	2975      	cmp	r1, #117	; 0x75
 800368c:	d017      	beq.n	80036be <_printf_i+0xb2>
 800368e:	2978      	cmp	r1, #120	; 0x78
 8003690:	d1d4      	bne.n	800363c <_printf_i+0x30>
 8003692:	2378      	movs	r3, #120	; 0x78
 8003694:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003698:	4864      	ldr	r0, [pc, #400]	; (800382c <_printf_i+0x220>)
 800369a:	e055      	b.n	8003748 <_printf_i+0x13c>
 800369c:	6813      	ldr	r3, [r2, #0]
 800369e:	1d19      	adds	r1, r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6011      	str	r1, [r2, #0]
 80036a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036ac:	2301      	movs	r3, #1
 80036ae:	e08c      	b.n	80037ca <_printf_i+0x1be>
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6011      	str	r1, [r2, #0]
 80036b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036b8:	bf18      	it	ne
 80036ba:	b21b      	sxthne	r3, r3
 80036bc:	e7cf      	b.n	800365e <_printf_i+0x52>
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	6825      	ldr	r5, [r4, #0]
 80036c2:	1d18      	adds	r0, r3, #4
 80036c4:	6010      	str	r0, [r2, #0]
 80036c6:	0628      	lsls	r0, r5, #24
 80036c8:	d501      	bpl.n	80036ce <_printf_i+0xc2>
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	e002      	b.n	80036d4 <_printf_i+0xc8>
 80036ce:	0668      	lsls	r0, r5, #25
 80036d0:	d5fb      	bpl.n	80036ca <_printf_i+0xbe>
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	4854      	ldr	r0, [pc, #336]	; (8003828 <_printf_i+0x21c>)
 80036d6:	296f      	cmp	r1, #111	; 0x6f
 80036d8:	bf14      	ite	ne
 80036da:	220a      	movne	r2, #10
 80036dc:	2208      	moveq	r2, #8
 80036de:	2100      	movs	r1, #0
 80036e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036e4:	6865      	ldr	r5, [r4, #4]
 80036e6:	60a5      	str	r5, [r4, #8]
 80036e8:	2d00      	cmp	r5, #0
 80036ea:	f2c0 8095 	blt.w	8003818 <_printf_i+0x20c>
 80036ee:	6821      	ldr	r1, [r4, #0]
 80036f0:	f021 0104 	bic.w	r1, r1, #4
 80036f4:	6021      	str	r1, [r4, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d13d      	bne.n	8003776 <_printf_i+0x16a>
 80036fa:	2d00      	cmp	r5, #0
 80036fc:	f040 808e 	bne.w	800381c <_printf_i+0x210>
 8003700:	4665      	mov	r5, ip
 8003702:	2a08      	cmp	r2, #8
 8003704:	d10b      	bne.n	800371e <_printf_i+0x112>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	07db      	lsls	r3, r3, #31
 800370a:	d508      	bpl.n	800371e <_printf_i+0x112>
 800370c:	6923      	ldr	r3, [r4, #16]
 800370e:	6862      	ldr	r2, [r4, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	bfde      	ittt	le
 8003714:	2330      	movle	r3, #48	; 0x30
 8003716:	f805 3c01 	strble.w	r3, [r5, #-1]
 800371a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800371e:	ebac 0305 	sub.w	r3, ip, r5
 8003722:	6123      	str	r3, [r4, #16]
 8003724:	f8cd 8000 	str.w	r8, [sp]
 8003728:	463b      	mov	r3, r7
 800372a:	aa03      	add	r2, sp, #12
 800372c:	4621      	mov	r1, r4
 800372e:	4630      	mov	r0, r6
 8003730:	f7ff fef6 	bl	8003520 <_printf_common>
 8003734:	3001      	adds	r0, #1
 8003736:	d14d      	bne.n	80037d4 <_printf_i+0x1c8>
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	b005      	add	sp, #20
 800373e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003742:	4839      	ldr	r0, [pc, #228]	; (8003828 <_printf_i+0x21c>)
 8003744:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003748:	6813      	ldr	r3, [r2, #0]
 800374a:	6821      	ldr	r1, [r4, #0]
 800374c:	1d1d      	adds	r5, r3, #4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6015      	str	r5, [r2, #0]
 8003752:	060a      	lsls	r2, r1, #24
 8003754:	d50b      	bpl.n	800376e <_printf_i+0x162>
 8003756:	07ca      	lsls	r2, r1, #31
 8003758:	bf44      	itt	mi
 800375a:	f041 0120 	orrmi.w	r1, r1, #32
 800375e:	6021      	strmi	r1, [r4, #0]
 8003760:	b91b      	cbnz	r3, 800376a <_printf_i+0x15e>
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	f022 0220 	bic.w	r2, r2, #32
 8003768:	6022      	str	r2, [r4, #0]
 800376a:	2210      	movs	r2, #16
 800376c:	e7b7      	b.n	80036de <_printf_i+0xd2>
 800376e:	064d      	lsls	r5, r1, #25
 8003770:	bf48      	it	mi
 8003772:	b29b      	uxthmi	r3, r3
 8003774:	e7ef      	b.n	8003756 <_printf_i+0x14a>
 8003776:	4665      	mov	r5, ip
 8003778:	fbb3 f1f2 	udiv	r1, r3, r2
 800377c:	fb02 3311 	mls	r3, r2, r1, r3
 8003780:	5cc3      	ldrb	r3, [r0, r3]
 8003782:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003786:	460b      	mov	r3, r1
 8003788:	2900      	cmp	r1, #0
 800378a:	d1f5      	bne.n	8003778 <_printf_i+0x16c>
 800378c:	e7b9      	b.n	8003702 <_printf_i+0xf6>
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	6825      	ldr	r5, [r4, #0]
 8003792:	6961      	ldr	r1, [r4, #20]
 8003794:	1d18      	adds	r0, r3, #4
 8003796:	6010      	str	r0, [r2, #0]
 8003798:	0628      	lsls	r0, r5, #24
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	d501      	bpl.n	80037a2 <_printf_i+0x196>
 800379e:	6019      	str	r1, [r3, #0]
 80037a0:	e002      	b.n	80037a8 <_printf_i+0x19c>
 80037a2:	066a      	lsls	r2, r5, #25
 80037a4:	d5fb      	bpl.n	800379e <_printf_i+0x192>
 80037a6:	8019      	strh	r1, [r3, #0]
 80037a8:	2300      	movs	r3, #0
 80037aa:	6123      	str	r3, [r4, #16]
 80037ac:	4665      	mov	r5, ip
 80037ae:	e7b9      	b.n	8003724 <_printf_i+0x118>
 80037b0:	6813      	ldr	r3, [r2, #0]
 80037b2:	1d19      	adds	r1, r3, #4
 80037b4:	6011      	str	r1, [r2, #0]
 80037b6:	681d      	ldr	r5, [r3, #0]
 80037b8:	6862      	ldr	r2, [r4, #4]
 80037ba:	2100      	movs	r1, #0
 80037bc:	4628      	mov	r0, r5
 80037be:	f7fc fd07 	bl	80001d0 <memchr>
 80037c2:	b108      	cbz	r0, 80037c8 <_printf_i+0x1bc>
 80037c4:	1b40      	subs	r0, r0, r5
 80037c6:	6060      	str	r0, [r4, #4]
 80037c8:	6863      	ldr	r3, [r4, #4]
 80037ca:	6123      	str	r3, [r4, #16]
 80037cc:	2300      	movs	r3, #0
 80037ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037d2:	e7a7      	b.n	8003724 <_printf_i+0x118>
 80037d4:	6923      	ldr	r3, [r4, #16]
 80037d6:	462a      	mov	r2, r5
 80037d8:	4639      	mov	r1, r7
 80037da:	4630      	mov	r0, r6
 80037dc:	47c0      	blx	r8
 80037de:	3001      	adds	r0, #1
 80037e0:	d0aa      	beq.n	8003738 <_printf_i+0x12c>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	079b      	lsls	r3, r3, #30
 80037e6:	d413      	bmi.n	8003810 <_printf_i+0x204>
 80037e8:	68e0      	ldr	r0, [r4, #12]
 80037ea:	9b03      	ldr	r3, [sp, #12]
 80037ec:	4298      	cmp	r0, r3
 80037ee:	bfb8      	it	lt
 80037f0:	4618      	movlt	r0, r3
 80037f2:	e7a3      	b.n	800373c <_printf_i+0x130>
 80037f4:	2301      	movs	r3, #1
 80037f6:	464a      	mov	r2, r9
 80037f8:	4639      	mov	r1, r7
 80037fa:	4630      	mov	r0, r6
 80037fc:	47c0      	blx	r8
 80037fe:	3001      	adds	r0, #1
 8003800:	d09a      	beq.n	8003738 <_printf_i+0x12c>
 8003802:	3501      	adds	r5, #1
 8003804:	68e3      	ldr	r3, [r4, #12]
 8003806:	9a03      	ldr	r2, [sp, #12]
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	42ab      	cmp	r3, r5
 800380c:	dcf2      	bgt.n	80037f4 <_printf_i+0x1e8>
 800380e:	e7eb      	b.n	80037e8 <_printf_i+0x1dc>
 8003810:	2500      	movs	r5, #0
 8003812:	f104 0919 	add.w	r9, r4, #25
 8003816:	e7f5      	b.n	8003804 <_printf_i+0x1f8>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ac      	bne.n	8003776 <_printf_i+0x16a>
 800381c:	7803      	ldrb	r3, [r0, #0]
 800381e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003822:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003826:	e76c      	b.n	8003702 <_printf_i+0xf6>
 8003828:	0800478d 	.word	0x0800478d
 800382c:	0800479e 	.word	0x0800479e

08003830 <_sbrk_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4c06      	ldr	r4, [pc, #24]	; (800384c <_sbrk_r+0x1c>)
 8003834:	2300      	movs	r3, #0
 8003836:	4605      	mov	r5, r0
 8003838:	4608      	mov	r0, r1
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	f7fe fa72 	bl	8001d24 <_sbrk>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d102      	bne.n	800384a <_sbrk_r+0x1a>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	b103      	cbz	r3, 800384a <_sbrk_r+0x1a>
 8003848:	602b      	str	r3, [r5, #0]
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	200001d0 	.word	0x200001d0

08003850 <strcpy>:
 8003850:	4603      	mov	r3, r0
 8003852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003856:	f803 2b01 	strb.w	r2, [r3], #1
 800385a:	2a00      	cmp	r2, #0
 800385c:	d1f9      	bne.n	8003852 <strcpy+0x2>
 800385e:	4770      	bx	lr

08003860 <quorem>:
 8003860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003864:	6903      	ldr	r3, [r0, #16]
 8003866:	690c      	ldr	r4, [r1, #16]
 8003868:	42a3      	cmp	r3, r4
 800386a:	4680      	mov	r8, r0
 800386c:	f2c0 8082 	blt.w	8003974 <quorem+0x114>
 8003870:	3c01      	subs	r4, #1
 8003872:	f101 0714 	add.w	r7, r1, #20
 8003876:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800387a:	f100 0614 	add.w	r6, r0, #20
 800387e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003882:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003886:	eb06 030c 	add.w	r3, r6, ip
 800388a:	3501      	adds	r5, #1
 800388c:	eb07 090c 	add.w	r9, r7, ip
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	fbb0 f5f5 	udiv	r5, r0, r5
 8003896:	b395      	cbz	r5, 80038fe <quorem+0x9e>
 8003898:	f04f 0a00 	mov.w	sl, #0
 800389c:	4638      	mov	r0, r7
 800389e:	46b6      	mov	lr, r6
 80038a0:	46d3      	mov	fp, sl
 80038a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80038a6:	b293      	uxth	r3, r2
 80038a8:	fb05 a303 	mla	r3, r5, r3, sl
 80038ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	ebab 0303 	sub.w	r3, fp, r3
 80038b6:	0c12      	lsrs	r2, r2, #16
 80038b8:	f8de b000 	ldr.w	fp, [lr]
 80038bc:	fb05 a202 	mla	r2, r5, r2, sl
 80038c0:	fa13 f38b 	uxtah	r3, r3, fp
 80038c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80038c8:	fa1f fb82 	uxth.w	fp, r2
 80038cc:	f8de 2000 	ldr.w	r2, [lr]
 80038d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80038d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038d8:	b29b      	uxth	r3, r3
 80038da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038de:	4581      	cmp	r9, r0
 80038e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80038e4:	f84e 3b04 	str.w	r3, [lr], #4
 80038e8:	d2db      	bcs.n	80038a2 <quorem+0x42>
 80038ea:	f856 300c 	ldr.w	r3, [r6, ip]
 80038ee:	b933      	cbnz	r3, 80038fe <quorem+0x9e>
 80038f0:	9b01      	ldr	r3, [sp, #4]
 80038f2:	3b04      	subs	r3, #4
 80038f4:	429e      	cmp	r6, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	d330      	bcc.n	800395c <quorem+0xfc>
 80038fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80038fe:	4640      	mov	r0, r8
 8003900:	f7ff fb4a 	bl	8002f98 <__mcmp>
 8003904:	2800      	cmp	r0, #0
 8003906:	db25      	blt.n	8003954 <quorem+0xf4>
 8003908:	3501      	adds	r5, #1
 800390a:	4630      	mov	r0, r6
 800390c:	f04f 0c00 	mov.w	ip, #0
 8003910:	f857 2b04 	ldr.w	r2, [r7], #4
 8003914:	f8d0 e000 	ldr.w	lr, [r0]
 8003918:	b293      	uxth	r3, r2
 800391a:	ebac 0303 	sub.w	r3, ip, r3
 800391e:	0c12      	lsrs	r2, r2, #16
 8003920:	fa13 f38e 	uxtah	r3, r3, lr
 8003924:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800392c:	b29b      	uxth	r3, r3
 800392e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003932:	45b9      	cmp	r9, r7
 8003934:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003938:	f840 3b04 	str.w	r3, [r0], #4
 800393c:	d2e8      	bcs.n	8003910 <quorem+0xb0>
 800393e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003942:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003946:	b92a      	cbnz	r2, 8003954 <quorem+0xf4>
 8003948:	3b04      	subs	r3, #4
 800394a:	429e      	cmp	r6, r3
 800394c:	461a      	mov	r2, r3
 800394e:	d30b      	bcc.n	8003968 <quorem+0x108>
 8003950:	f8c8 4010 	str.w	r4, [r8, #16]
 8003954:	4628      	mov	r0, r5
 8003956:	b003      	add	sp, #12
 8003958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	3b04      	subs	r3, #4
 8003960:	2a00      	cmp	r2, #0
 8003962:	d1ca      	bne.n	80038fa <quorem+0x9a>
 8003964:	3c01      	subs	r4, #1
 8003966:	e7c5      	b.n	80038f4 <quorem+0x94>
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	3b04      	subs	r3, #4
 800396c:	2a00      	cmp	r2, #0
 800396e:	d1ef      	bne.n	8003950 <quorem+0xf0>
 8003970:	3c01      	subs	r4, #1
 8003972:	e7ea      	b.n	800394a <quorem+0xea>
 8003974:	2000      	movs	r0, #0
 8003976:	e7ee      	b.n	8003956 <quorem+0xf6>

08003978 <_dtoa_r>:
 8003978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397c:	ec57 6b10 	vmov	r6, r7, d0
 8003980:	b097      	sub	sp, #92	; 0x5c
 8003982:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003984:	9106      	str	r1, [sp, #24]
 8003986:	4604      	mov	r4, r0
 8003988:	920b      	str	r2, [sp, #44]	; 0x2c
 800398a:	9312      	str	r3, [sp, #72]	; 0x48
 800398c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003990:	e9cd 6700 	strd	r6, r7, [sp]
 8003994:	b93d      	cbnz	r5, 80039a6 <_dtoa_r+0x2e>
 8003996:	2010      	movs	r0, #16
 8003998:	f000 fda6 	bl	80044e8 <malloc>
 800399c:	6260      	str	r0, [r4, #36]	; 0x24
 800399e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80039a2:	6005      	str	r5, [r0, #0]
 80039a4:	60c5      	str	r5, [r0, #12]
 80039a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	b151      	cbz	r1, 80039c2 <_dtoa_r+0x4a>
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	604a      	str	r2, [r1, #4]
 80039b0:	2301      	movs	r3, #1
 80039b2:	4093      	lsls	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7ff f90c 	bl	8002bd4 <_Bfree>
 80039bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	1e3b      	subs	r3, r7, #0
 80039c4:	bfbb      	ittet	lt
 80039c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80039ca:	9301      	strlt	r3, [sp, #4]
 80039cc:	2300      	movge	r3, #0
 80039ce:	2201      	movlt	r2, #1
 80039d0:	bfac      	ite	ge
 80039d2:	f8c8 3000 	strge.w	r3, [r8]
 80039d6:	f8c8 2000 	strlt.w	r2, [r8]
 80039da:	4baf      	ldr	r3, [pc, #700]	; (8003c98 <_dtoa_r+0x320>)
 80039dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80039e0:	ea33 0308 	bics.w	r3, r3, r8
 80039e4:	d114      	bne.n	8003a10 <_dtoa_r+0x98>
 80039e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80039e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	9b00      	ldr	r3, [sp, #0]
 80039f0:	b923      	cbnz	r3, 80039fc <_dtoa_r+0x84>
 80039f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80039f6:	2800      	cmp	r0, #0
 80039f8:	f000 8542 	beq.w	8004480 <_dtoa_r+0xb08>
 80039fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8003cac <_dtoa_r+0x334>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8544 	beq.w	8004490 <_dtoa_r+0xb18>
 8003a08:	f10b 0303 	add.w	r3, fp, #3
 8003a0c:	f000 bd3e 	b.w	800448c <_dtoa_r+0xb14>
 8003a10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2300      	movs	r3, #0
 8003a18:	4630      	mov	r0, r6
 8003a1a:	4639      	mov	r1, r7
 8003a1c:	f7fd f84c 	bl	8000ab8 <__aeabi_dcmpeq>
 8003a20:	4681      	mov	r9, r0
 8003a22:	b168      	cbz	r0, 8003a40 <_dtoa_r+0xc8>
 8003a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003a26:	2301      	movs	r3, #1
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8524 	beq.w	800447a <_dtoa_r+0xb02>
 8003a32:	4b9a      	ldr	r3, [pc, #616]	; (8003c9c <_dtoa_r+0x324>)
 8003a34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003a36:	f103 3bff 	add.w	fp, r3, #4294967295
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	f000 bd28 	b.w	8004490 <_dtoa_r+0xb18>
 8003a40:	aa14      	add	r2, sp, #80	; 0x50
 8003a42:	a915      	add	r1, sp, #84	; 0x54
 8003a44:	ec47 6b10 	vmov	d0, r6, r7
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f7ff fb1c 	bl	8003086 <__d2b>
 8003a4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003a52:	9004      	str	r0, [sp, #16]
 8003a54:	2d00      	cmp	r5, #0
 8003a56:	d07c      	beq.n	8003b52 <_dtoa_r+0x1da>
 8003a58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003a5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003a60:	46b2      	mov	sl, r6
 8003a62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003a66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003a6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4b8b      	ldr	r3, [pc, #556]	; (8003ca0 <_dtoa_r+0x328>)
 8003a72:	4650      	mov	r0, sl
 8003a74:	4659      	mov	r1, fp
 8003a76:	f7fc fbff 	bl	8000278 <__aeabi_dsub>
 8003a7a:	a381      	add	r3, pc, #516	; (adr r3, 8003c80 <_dtoa_r+0x308>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f7fc fdb2 	bl	80005e8 <__aeabi_dmul>
 8003a84:	a380      	add	r3, pc, #512	; (adr r3, 8003c88 <_dtoa_r+0x310>)
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	f7fc fbf7 	bl	800027c <__adddf3>
 8003a8e:	4606      	mov	r6, r0
 8003a90:	4628      	mov	r0, r5
 8003a92:	460f      	mov	r7, r1
 8003a94:	f7fc fd3e 	bl	8000514 <__aeabi_i2d>
 8003a98:	a37d      	add	r3, pc, #500	; (adr r3, 8003c90 <_dtoa_r+0x318>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f7fc fda3 	bl	80005e8 <__aeabi_dmul>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	4639      	mov	r1, r7
 8003aaa:	f7fc fbe7 	bl	800027c <__adddf3>
 8003aae:	4606      	mov	r6, r0
 8003ab0:	460f      	mov	r7, r1
 8003ab2:	f7fd f833 	bl	8000b1c <__aeabi_d2iz>
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	4682      	mov	sl, r0
 8003aba:	2300      	movs	r3, #0
 8003abc:	4630      	mov	r0, r6
 8003abe:	4639      	mov	r1, r7
 8003ac0:	f7fd f804 	bl	8000acc <__aeabi_dcmplt>
 8003ac4:	b148      	cbz	r0, 8003ada <_dtoa_r+0x162>
 8003ac6:	4650      	mov	r0, sl
 8003ac8:	f7fc fd24 	bl	8000514 <__aeabi_i2d>
 8003acc:	4632      	mov	r2, r6
 8003ace:	463b      	mov	r3, r7
 8003ad0:	f7fc fff2 	bl	8000ab8 <__aeabi_dcmpeq>
 8003ad4:	b908      	cbnz	r0, 8003ada <_dtoa_r+0x162>
 8003ad6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ada:	f1ba 0f16 	cmp.w	sl, #22
 8003ade:	d859      	bhi.n	8003b94 <_dtoa_r+0x21c>
 8003ae0:	4970      	ldr	r1, [pc, #448]	; (8003ca4 <_dtoa_r+0x32c>)
 8003ae2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003aea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003aee:	f7fd f80b 	bl	8000b08 <__aeabi_dcmpgt>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d050      	beq.n	8003b98 <_dtoa_r+0x220>
 8003af6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003afa:	2300      	movs	r3, #0
 8003afc:	930f      	str	r3, [sp, #60]	; 0x3c
 8003afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003b00:	1b5d      	subs	r5, r3, r5
 8003b02:	f1b5 0801 	subs.w	r8, r5, #1
 8003b06:	bf49      	itett	mi
 8003b08:	f1c5 0301 	rsbmi	r3, r5, #1
 8003b0c:	2300      	movpl	r3, #0
 8003b0e:	9305      	strmi	r3, [sp, #20]
 8003b10:	f04f 0800 	movmi.w	r8, #0
 8003b14:	bf58      	it	pl
 8003b16:	9305      	strpl	r3, [sp, #20]
 8003b18:	f1ba 0f00 	cmp.w	sl, #0
 8003b1c:	db3e      	blt.n	8003b9c <_dtoa_r+0x224>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	44d0      	add	r8, sl
 8003b22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003b26:	9307      	str	r3, [sp, #28]
 8003b28:	9b06      	ldr	r3, [sp, #24]
 8003b2a:	2b09      	cmp	r3, #9
 8003b2c:	f200 8090 	bhi.w	8003c50 <_dtoa_r+0x2d8>
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	bfc4      	itt	gt
 8003b34:	3b04      	subgt	r3, #4
 8003b36:	9306      	strgt	r3, [sp, #24]
 8003b38:	9b06      	ldr	r3, [sp, #24]
 8003b3a:	f1a3 0302 	sub.w	r3, r3, #2
 8003b3e:	bfcc      	ite	gt
 8003b40:	2500      	movgt	r5, #0
 8003b42:	2501      	movle	r5, #1
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	f200 808f 	bhi.w	8003c68 <_dtoa_r+0x2f0>
 8003b4a:	e8df f003 	tbb	[pc, r3]
 8003b4e:	7f7d      	.short	0x7f7d
 8003b50:	7131      	.short	0x7131
 8003b52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8003b56:	441d      	add	r5, r3
 8003b58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003b5c:	2820      	cmp	r0, #32
 8003b5e:	dd13      	ble.n	8003b88 <_dtoa_r+0x210>
 8003b60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003b64:	9b00      	ldr	r3, [sp, #0]
 8003b66:	fa08 f800 	lsl.w	r8, r8, r0
 8003b6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003b6e:	fa23 f000 	lsr.w	r0, r3, r0
 8003b72:	ea48 0000 	orr.w	r0, r8, r0
 8003b76:	f7fc fcbd 	bl	80004f4 <__aeabi_ui2d>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4682      	mov	sl, r0
 8003b7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8003b82:	3d01      	subs	r5, #1
 8003b84:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b86:	e772      	b.n	8003a6e <_dtoa_r+0xf6>
 8003b88:	9b00      	ldr	r3, [sp, #0]
 8003b8a:	f1c0 0020 	rsb	r0, r0, #32
 8003b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8003b92:	e7f0      	b.n	8003b76 <_dtoa_r+0x1fe>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e7b1      	b.n	8003afc <_dtoa_r+0x184>
 8003b98:	900f      	str	r0, [sp, #60]	; 0x3c
 8003b9a:	e7b0      	b.n	8003afe <_dtoa_r+0x186>
 8003b9c:	9b05      	ldr	r3, [sp, #20]
 8003b9e:	eba3 030a 	sub.w	r3, r3, sl
 8003ba2:	9305      	str	r3, [sp, #20]
 8003ba4:	f1ca 0300 	rsb	r3, sl, #0
 8003ba8:	9307      	str	r3, [sp, #28]
 8003baa:	2300      	movs	r3, #0
 8003bac:	930e      	str	r3, [sp, #56]	; 0x38
 8003bae:	e7bb      	b.n	8003b28 <_dtoa_r+0x1b0>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8003bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	dd59      	ble.n	8003c6e <_dtoa_r+0x2f6>
 8003bba:	9302      	str	r3, [sp, #8]
 8003bbc:	4699      	mov	r9, r3
 8003bbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	6072      	str	r2, [r6, #4]
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	f102 0014 	add.w	r0, r2, #20
 8003bca:	4298      	cmp	r0, r3
 8003bcc:	6871      	ldr	r1, [r6, #4]
 8003bce:	d953      	bls.n	8003c78 <_dtoa_r+0x300>
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f7fe ffcb 	bl	8002b6c <_Balloc>
 8003bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bd8:	6030      	str	r0, [r6, #0]
 8003bda:	f1b9 0f0e 	cmp.w	r9, #14
 8003bde:	f8d3 b000 	ldr.w	fp, [r3]
 8003be2:	f200 80e6 	bhi.w	8003db2 <_dtoa_r+0x43a>
 8003be6:	2d00      	cmp	r5, #0
 8003be8:	f000 80e3 	beq.w	8003db2 <_dtoa_r+0x43a>
 8003bec:	ed9d 7b00 	vldr	d7, [sp]
 8003bf0:	f1ba 0f00 	cmp.w	sl, #0
 8003bf4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003bf8:	dd74      	ble.n	8003ce4 <_dtoa_r+0x36c>
 8003bfa:	4a2a      	ldr	r2, [pc, #168]	; (8003ca4 <_dtoa_r+0x32c>)
 8003bfc:	f00a 030f 	and.w	r3, sl, #15
 8003c00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003c04:	ed93 7b00 	vldr	d7, [r3]
 8003c08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003c0c:	06f0      	lsls	r0, r6, #27
 8003c0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003c12:	d565      	bpl.n	8003ce0 <_dtoa_r+0x368>
 8003c14:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <_dtoa_r+0x330>)
 8003c16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c1e:	f7fc fe0d 	bl	800083c <__aeabi_ddiv>
 8003c22:	e9cd 0100 	strd	r0, r1, [sp]
 8003c26:	f006 060f 	and.w	r6, r6, #15
 8003c2a:	2503      	movs	r5, #3
 8003c2c:	4f1e      	ldr	r7, [pc, #120]	; (8003ca8 <_dtoa_r+0x330>)
 8003c2e:	e04c      	b.n	8003cca <_dtoa_r+0x352>
 8003c30:	2301      	movs	r3, #1
 8003c32:	930a      	str	r3, [sp, #40]	; 0x28
 8003c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c36:	4453      	add	r3, sl
 8003c38:	f103 0901 	add.w	r9, r3, #1
 8003c3c:	9302      	str	r3, [sp, #8]
 8003c3e:	464b      	mov	r3, r9
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	bfb8      	it	lt
 8003c44:	2301      	movlt	r3, #1
 8003c46:	e7ba      	b.n	8003bbe <_dtoa_r+0x246>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e7b2      	b.n	8003bb2 <_dtoa_r+0x23a>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e7f0      	b.n	8003c32 <_dtoa_r+0x2ba>
 8003c50:	2501      	movs	r5, #1
 8003c52:	2300      	movs	r3, #0
 8003c54:	9306      	str	r3, [sp, #24]
 8003c56:	950a      	str	r5, [sp, #40]	; 0x28
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	9302      	str	r3, [sp, #8]
 8003c5e:	4699      	mov	r9, r3
 8003c60:	2200      	movs	r2, #0
 8003c62:	2312      	movs	r3, #18
 8003c64:	920b      	str	r2, [sp, #44]	; 0x2c
 8003c66:	e7aa      	b.n	8003bbe <_dtoa_r+0x246>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8003c6c:	e7f4      	b.n	8003c58 <_dtoa_r+0x2e0>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	9302      	str	r3, [sp, #8]
 8003c72:	4699      	mov	r9, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	e7f5      	b.n	8003c64 <_dtoa_r+0x2ec>
 8003c78:	3101      	adds	r1, #1
 8003c7a:	6071      	str	r1, [r6, #4]
 8003c7c:	0052      	lsls	r2, r2, #1
 8003c7e:	e7a2      	b.n	8003bc6 <_dtoa_r+0x24e>
 8003c80:	636f4361 	.word	0x636f4361
 8003c84:	3fd287a7 	.word	0x3fd287a7
 8003c88:	8b60c8b3 	.word	0x8b60c8b3
 8003c8c:	3fc68a28 	.word	0x3fc68a28
 8003c90:	509f79fb 	.word	0x509f79fb
 8003c94:	3fd34413 	.word	0x3fd34413
 8003c98:	7ff00000 	.word	0x7ff00000
 8003c9c:	080047bd 	.word	0x080047bd
 8003ca0:	3ff80000 	.word	0x3ff80000
 8003ca4:	080046a8 	.word	0x080046a8
 8003ca8:	08004680 	.word	0x08004680
 8003cac:	080047b8 	.word	0x080047b8
 8003cb0:	07f1      	lsls	r1, r6, #31
 8003cb2:	d508      	bpl.n	8003cc6 <_dtoa_r+0x34e>
 8003cb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cbc:	f7fc fc94 	bl	80005e8 <__aeabi_dmul>
 8003cc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003cc4:	3501      	adds	r5, #1
 8003cc6:	1076      	asrs	r6, r6, #1
 8003cc8:	3708      	adds	r7, #8
 8003cca:	2e00      	cmp	r6, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <_dtoa_r+0x338>
 8003cce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003cd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cd6:	f7fc fdb1 	bl	800083c <__aeabi_ddiv>
 8003cda:	e9cd 0100 	strd	r0, r1, [sp]
 8003cde:	e01a      	b.n	8003d16 <_dtoa_r+0x39e>
 8003ce0:	2502      	movs	r5, #2
 8003ce2:	e7a3      	b.n	8003c2c <_dtoa_r+0x2b4>
 8003ce4:	f000 80a0 	beq.w	8003e28 <_dtoa_r+0x4b0>
 8003ce8:	f1ca 0600 	rsb	r6, sl, #0
 8003cec:	4b9f      	ldr	r3, [pc, #636]	; (8003f6c <_dtoa_r+0x5f4>)
 8003cee:	4fa0      	ldr	r7, [pc, #640]	; (8003f70 <_dtoa_r+0x5f8>)
 8003cf0:	f006 020f 	and.w	r2, r6, #15
 8003cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d00:	f7fc fc72 	bl	80005e8 <__aeabi_dmul>
 8003d04:	e9cd 0100 	strd	r0, r1, [sp]
 8003d08:	1136      	asrs	r6, r6, #4
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2502      	movs	r5, #2
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	d17f      	bne.n	8003e12 <_dtoa_r+0x49a>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e1      	bne.n	8003cda <_dtoa_r+0x362>
 8003d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8087 	beq.w	8003e2c <_dtoa_r+0x4b4>
 8003d1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003d22:	2200      	movs	r2, #0
 8003d24:	4b93      	ldr	r3, [pc, #588]	; (8003f74 <_dtoa_r+0x5fc>)
 8003d26:	4630      	mov	r0, r6
 8003d28:	4639      	mov	r1, r7
 8003d2a:	f7fc fecf 	bl	8000acc <__aeabi_dcmplt>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d07c      	beq.n	8003e2c <_dtoa_r+0x4b4>
 8003d32:	f1b9 0f00 	cmp.w	r9, #0
 8003d36:	d079      	beq.n	8003e2c <_dtoa_r+0x4b4>
 8003d38:	9b02      	ldr	r3, [sp, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	dd35      	ble.n	8003daa <_dtoa_r+0x432>
 8003d3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003d42:	9308      	str	r3, [sp, #32]
 8003d44:	4639      	mov	r1, r7
 8003d46:	2200      	movs	r2, #0
 8003d48:	4b8b      	ldr	r3, [pc, #556]	; (8003f78 <_dtoa_r+0x600>)
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f7fc fc4c 	bl	80005e8 <__aeabi_dmul>
 8003d50:	e9cd 0100 	strd	r0, r1, [sp]
 8003d54:	9f02      	ldr	r7, [sp, #8]
 8003d56:	3501      	adds	r5, #1
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f7fc fbdb 	bl	8000514 <__aeabi_i2d>
 8003d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d62:	f7fc fc41 	bl	80005e8 <__aeabi_dmul>
 8003d66:	2200      	movs	r2, #0
 8003d68:	4b84      	ldr	r3, [pc, #528]	; (8003f7c <_dtoa_r+0x604>)
 8003d6a:	f7fc fa87 	bl	800027c <__adddf3>
 8003d6e:	4605      	mov	r5, r0
 8003d70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003d74:	2f00      	cmp	r7, #0
 8003d76:	d15d      	bne.n	8003e34 <_dtoa_r+0x4bc>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4b81      	ldr	r3, [pc, #516]	; (8003f80 <_dtoa_r+0x608>)
 8003d7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d80:	f7fc fa7a 	bl	8000278 <__aeabi_dsub>
 8003d84:	462a      	mov	r2, r5
 8003d86:	4633      	mov	r3, r6
 8003d88:	e9cd 0100 	strd	r0, r1, [sp]
 8003d8c:	f7fc febc 	bl	8000b08 <__aeabi_dcmpgt>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	f040 8288 	bne.w	80042a6 <_dtoa_r+0x92e>
 8003d96:	462a      	mov	r2, r5
 8003d98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003da0:	f7fc fe94 	bl	8000acc <__aeabi_dcmplt>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	f040 827c 	bne.w	80042a2 <_dtoa_r+0x92a>
 8003daa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003dae:	e9cd 2300 	strd	r2, r3, [sp]
 8003db2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f2c0 8150 	blt.w	800405a <_dtoa_r+0x6e2>
 8003dba:	f1ba 0f0e 	cmp.w	sl, #14
 8003dbe:	f300 814c 	bgt.w	800405a <_dtoa_r+0x6e2>
 8003dc2:	4b6a      	ldr	r3, [pc, #424]	; (8003f6c <_dtoa_r+0x5f4>)
 8003dc4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003dc8:	ed93 7b00 	vldr	d7, [r3]
 8003dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003dd4:	f280 80d8 	bge.w	8003f88 <_dtoa_r+0x610>
 8003dd8:	f1b9 0f00 	cmp.w	r9, #0
 8003ddc:	f300 80d4 	bgt.w	8003f88 <_dtoa_r+0x610>
 8003de0:	f040 825e 	bne.w	80042a0 <_dtoa_r+0x928>
 8003de4:	2200      	movs	r2, #0
 8003de6:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <_dtoa_r+0x608>)
 8003de8:	ec51 0b17 	vmov	r0, r1, d7
 8003dec:	f7fc fbfc 	bl	80005e8 <__aeabi_dmul>
 8003df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003df4:	f7fc fe7e 	bl	8000af4 <__aeabi_dcmpge>
 8003df8:	464f      	mov	r7, r9
 8003dfa:	464e      	mov	r6, r9
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	f040 8234 	bne.w	800426a <_dtoa_r+0x8f2>
 8003e02:	2331      	movs	r3, #49	; 0x31
 8003e04:	f10b 0501 	add.w	r5, fp, #1
 8003e08:	f88b 3000 	strb.w	r3, [fp]
 8003e0c:	f10a 0a01 	add.w	sl, sl, #1
 8003e10:	e22f      	b.n	8004272 <_dtoa_r+0x8fa>
 8003e12:	07f2      	lsls	r2, r6, #31
 8003e14:	d505      	bpl.n	8003e22 <_dtoa_r+0x4aa>
 8003e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e1a:	f7fc fbe5 	bl	80005e8 <__aeabi_dmul>
 8003e1e:	3501      	adds	r5, #1
 8003e20:	2301      	movs	r3, #1
 8003e22:	1076      	asrs	r6, r6, #1
 8003e24:	3708      	adds	r7, #8
 8003e26:	e772      	b.n	8003d0e <_dtoa_r+0x396>
 8003e28:	2502      	movs	r5, #2
 8003e2a:	e774      	b.n	8003d16 <_dtoa_r+0x39e>
 8003e2c:	f8cd a020 	str.w	sl, [sp, #32]
 8003e30:	464f      	mov	r7, r9
 8003e32:	e791      	b.n	8003d58 <_dtoa_r+0x3e0>
 8003e34:	4b4d      	ldr	r3, [pc, #308]	; (8003f6c <_dtoa_r+0x5f4>)
 8003e36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d047      	beq.n	8003ed4 <_dtoa_r+0x55c>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	2000      	movs	r0, #0
 8003e4a:	494e      	ldr	r1, [pc, #312]	; (8003f84 <_dtoa_r+0x60c>)
 8003e4c:	f7fc fcf6 	bl	800083c <__aeabi_ddiv>
 8003e50:	462a      	mov	r2, r5
 8003e52:	4633      	mov	r3, r6
 8003e54:	f7fc fa10 	bl	8000278 <__aeabi_dsub>
 8003e58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003e5c:	465d      	mov	r5, fp
 8003e5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e62:	f7fc fe5b 	bl	8000b1c <__aeabi_d2iz>
 8003e66:	4606      	mov	r6, r0
 8003e68:	f7fc fb54 	bl	8000514 <__aeabi_i2d>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e74:	f7fc fa00 	bl	8000278 <__aeabi_dsub>
 8003e78:	3630      	adds	r6, #48	; 0x30
 8003e7a:	f805 6b01 	strb.w	r6, [r5], #1
 8003e7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003e82:	e9cd 0100 	strd	r0, r1, [sp]
 8003e86:	f7fc fe21 	bl	8000acc <__aeabi_dcmplt>
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d163      	bne.n	8003f56 <_dtoa_r+0x5de>
 8003e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e92:	2000      	movs	r0, #0
 8003e94:	4937      	ldr	r1, [pc, #220]	; (8003f74 <_dtoa_r+0x5fc>)
 8003e96:	f7fc f9ef 	bl	8000278 <__aeabi_dsub>
 8003e9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003e9e:	f7fc fe15 	bl	8000acc <__aeabi_dcmplt>
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	f040 80b7 	bne.w	8004016 <_dtoa_r+0x69e>
 8003ea8:	eba5 030b 	sub.w	r3, r5, fp
 8003eac:	429f      	cmp	r7, r3
 8003eae:	f77f af7c 	ble.w	8003daa <_dtoa_r+0x432>
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	4b30      	ldr	r3, [pc, #192]	; (8003f78 <_dtoa_r+0x600>)
 8003eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003eba:	f7fc fb95 	bl	80005e8 <__aeabi_dmul>
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003ec4:	4b2c      	ldr	r3, [pc, #176]	; (8003f78 <_dtoa_r+0x600>)
 8003ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003eca:	f7fc fb8d 	bl	80005e8 <__aeabi_dmul>
 8003ece:	e9cd 0100 	strd	r0, r1, [sp]
 8003ed2:	e7c4      	b.n	8003e5e <_dtoa_r+0x4e6>
 8003ed4:	462a      	mov	r2, r5
 8003ed6:	4633      	mov	r3, r6
 8003ed8:	f7fc fb86 	bl	80005e8 <__aeabi_dmul>
 8003edc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003ee0:	eb0b 0507 	add.w	r5, fp, r7
 8003ee4:	465e      	mov	r6, fp
 8003ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003eea:	f7fc fe17 	bl	8000b1c <__aeabi_d2iz>
 8003eee:	4607      	mov	r7, r0
 8003ef0:	f7fc fb10 	bl	8000514 <__aeabi_i2d>
 8003ef4:	3730      	adds	r7, #48	; 0x30
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003efe:	f7fc f9bb 	bl	8000278 <__aeabi_dsub>
 8003f02:	f806 7b01 	strb.w	r7, [r6], #1
 8003f06:	42ae      	cmp	r6, r5
 8003f08:	e9cd 0100 	strd	r0, r1, [sp]
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	d126      	bne.n	8003f60 <_dtoa_r+0x5e8>
 8003f12:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <_dtoa_r+0x60c>)
 8003f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f18:	f7fc f9b0 	bl	800027c <__adddf3>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f24:	f7fc fdf0 	bl	8000b08 <__aeabi_dcmpgt>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	d174      	bne.n	8004016 <_dtoa_r+0x69e>
 8003f2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003f30:	2000      	movs	r0, #0
 8003f32:	4914      	ldr	r1, [pc, #80]	; (8003f84 <_dtoa_r+0x60c>)
 8003f34:	f7fc f9a0 	bl	8000278 <__aeabi_dsub>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f40:	f7fc fdc4 	bl	8000acc <__aeabi_dcmplt>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	f43f af30 	beq.w	8003daa <_dtoa_r+0x432>
 8003f4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f4e:	2b30      	cmp	r3, #48	; 0x30
 8003f50:	f105 32ff 	add.w	r2, r5, #4294967295
 8003f54:	d002      	beq.n	8003f5c <_dtoa_r+0x5e4>
 8003f56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003f5a:	e04a      	b.n	8003ff2 <_dtoa_r+0x67a>
 8003f5c:	4615      	mov	r5, r2
 8003f5e:	e7f4      	b.n	8003f4a <_dtoa_r+0x5d2>
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <_dtoa_r+0x600>)
 8003f62:	f7fc fb41 	bl	80005e8 <__aeabi_dmul>
 8003f66:	e9cd 0100 	strd	r0, r1, [sp]
 8003f6a:	e7bc      	b.n	8003ee6 <_dtoa_r+0x56e>
 8003f6c:	080046a8 	.word	0x080046a8
 8003f70:	08004680 	.word	0x08004680
 8003f74:	3ff00000 	.word	0x3ff00000
 8003f78:	40240000 	.word	0x40240000
 8003f7c:	401c0000 	.word	0x401c0000
 8003f80:	40140000 	.word	0x40140000
 8003f84:	3fe00000 	.word	0x3fe00000
 8003f88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003f8c:	465d      	mov	r5, fp
 8003f8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f92:	4630      	mov	r0, r6
 8003f94:	4639      	mov	r1, r7
 8003f96:	f7fc fc51 	bl	800083c <__aeabi_ddiv>
 8003f9a:	f7fc fdbf 	bl	8000b1c <__aeabi_d2iz>
 8003f9e:	4680      	mov	r8, r0
 8003fa0:	f7fc fab8 	bl	8000514 <__aeabi_i2d>
 8003fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fa8:	f7fc fb1e 	bl	80005e8 <__aeabi_dmul>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	4639      	mov	r1, r7
 8003fb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003fb8:	f7fc f95e 	bl	8000278 <__aeabi_dsub>
 8003fbc:	f805 6b01 	strb.w	r6, [r5], #1
 8003fc0:	eba5 060b 	sub.w	r6, r5, fp
 8003fc4:	45b1      	cmp	r9, r6
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	d139      	bne.n	8004040 <_dtoa_r+0x6c8>
 8003fcc:	f7fc f956 	bl	800027c <__adddf3>
 8003fd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fd4:	4606      	mov	r6, r0
 8003fd6:	460f      	mov	r7, r1
 8003fd8:	f7fc fd96 	bl	8000b08 <__aeabi_dcmpgt>
 8003fdc:	b9c8      	cbnz	r0, 8004012 <_dtoa_r+0x69a>
 8003fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	4639      	mov	r1, r7
 8003fe6:	f7fc fd67 	bl	8000ab8 <__aeabi_dcmpeq>
 8003fea:	b110      	cbz	r0, 8003ff2 <_dtoa_r+0x67a>
 8003fec:	f018 0f01 	tst.w	r8, #1
 8003ff0:	d10f      	bne.n	8004012 <_dtoa_r+0x69a>
 8003ff2:	9904      	ldr	r1, [sp, #16]
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f7fe fded 	bl	8002bd4 <_Bfree>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ffe:	702b      	strb	r3, [r5, #0]
 8004000:	f10a 0301 	add.w	r3, sl, #1
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8241 	beq.w	8004490 <_dtoa_r+0xb18>
 800400e:	601d      	str	r5, [r3, #0]
 8004010:	e23e      	b.n	8004490 <_dtoa_r+0xb18>
 8004012:	f8cd a020 	str.w	sl, [sp, #32]
 8004016:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800401a:	2a39      	cmp	r2, #57	; 0x39
 800401c:	f105 33ff 	add.w	r3, r5, #4294967295
 8004020:	d108      	bne.n	8004034 <_dtoa_r+0x6bc>
 8004022:	459b      	cmp	fp, r3
 8004024:	d10a      	bne.n	800403c <_dtoa_r+0x6c4>
 8004026:	9b08      	ldr	r3, [sp, #32]
 8004028:	3301      	adds	r3, #1
 800402a:	9308      	str	r3, [sp, #32]
 800402c:	2330      	movs	r3, #48	; 0x30
 800402e:	f88b 3000 	strb.w	r3, [fp]
 8004032:	465b      	mov	r3, fp
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	3201      	adds	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	e78c      	b.n	8003f56 <_dtoa_r+0x5de>
 800403c:	461d      	mov	r5, r3
 800403e:	e7ea      	b.n	8004016 <_dtoa_r+0x69e>
 8004040:	2200      	movs	r2, #0
 8004042:	4b9b      	ldr	r3, [pc, #620]	; (80042b0 <_dtoa_r+0x938>)
 8004044:	f7fc fad0 	bl	80005e8 <__aeabi_dmul>
 8004048:	2200      	movs	r2, #0
 800404a:	2300      	movs	r3, #0
 800404c:	4606      	mov	r6, r0
 800404e:	460f      	mov	r7, r1
 8004050:	f7fc fd32 	bl	8000ab8 <__aeabi_dcmpeq>
 8004054:	2800      	cmp	r0, #0
 8004056:	d09a      	beq.n	8003f8e <_dtoa_r+0x616>
 8004058:	e7cb      	b.n	8003ff2 <_dtoa_r+0x67a>
 800405a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800405c:	2a00      	cmp	r2, #0
 800405e:	f000 808b 	beq.w	8004178 <_dtoa_r+0x800>
 8004062:	9a06      	ldr	r2, [sp, #24]
 8004064:	2a01      	cmp	r2, #1
 8004066:	dc6e      	bgt.n	8004146 <_dtoa_r+0x7ce>
 8004068:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800406a:	2a00      	cmp	r2, #0
 800406c:	d067      	beq.n	800413e <_dtoa_r+0x7c6>
 800406e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004072:	9f07      	ldr	r7, [sp, #28]
 8004074:	9d05      	ldr	r5, [sp, #20]
 8004076:	9a05      	ldr	r2, [sp, #20]
 8004078:	2101      	movs	r1, #1
 800407a:	441a      	add	r2, r3
 800407c:	4620      	mov	r0, r4
 800407e:	9205      	str	r2, [sp, #20]
 8004080:	4498      	add	r8, r3
 8004082:	f7fe fe47 	bl	8002d14 <__i2b>
 8004086:	4606      	mov	r6, r0
 8004088:	2d00      	cmp	r5, #0
 800408a:	dd0c      	ble.n	80040a6 <_dtoa_r+0x72e>
 800408c:	f1b8 0f00 	cmp.w	r8, #0
 8004090:	dd09      	ble.n	80040a6 <_dtoa_r+0x72e>
 8004092:	4545      	cmp	r5, r8
 8004094:	9a05      	ldr	r2, [sp, #20]
 8004096:	462b      	mov	r3, r5
 8004098:	bfa8      	it	ge
 800409a:	4643      	movge	r3, r8
 800409c:	1ad2      	subs	r2, r2, r3
 800409e:	9205      	str	r2, [sp, #20]
 80040a0:	1aed      	subs	r5, r5, r3
 80040a2:	eba8 0803 	sub.w	r8, r8, r3
 80040a6:	9b07      	ldr	r3, [sp, #28]
 80040a8:	b1eb      	cbz	r3, 80040e6 <_dtoa_r+0x76e>
 80040aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d067      	beq.n	8004180 <_dtoa_r+0x808>
 80040b0:	b18f      	cbz	r7, 80040d6 <_dtoa_r+0x75e>
 80040b2:	4631      	mov	r1, r6
 80040b4:	463a      	mov	r2, r7
 80040b6:	4620      	mov	r0, r4
 80040b8:	f7fe fecc 	bl	8002e54 <__pow5mult>
 80040bc:	9a04      	ldr	r2, [sp, #16]
 80040be:	4601      	mov	r1, r0
 80040c0:	4606      	mov	r6, r0
 80040c2:	4620      	mov	r0, r4
 80040c4:	f7fe fe2f 	bl	8002d26 <__multiply>
 80040c8:	9904      	ldr	r1, [sp, #16]
 80040ca:	9008      	str	r0, [sp, #32]
 80040cc:	4620      	mov	r0, r4
 80040ce:	f7fe fd81 	bl	8002bd4 <_Bfree>
 80040d2:	9b08      	ldr	r3, [sp, #32]
 80040d4:	9304      	str	r3, [sp, #16]
 80040d6:	9b07      	ldr	r3, [sp, #28]
 80040d8:	1bda      	subs	r2, r3, r7
 80040da:	d004      	beq.n	80040e6 <_dtoa_r+0x76e>
 80040dc:	9904      	ldr	r1, [sp, #16]
 80040de:	4620      	mov	r0, r4
 80040e0:	f7fe feb8 	bl	8002e54 <__pow5mult>
 80040e4:	9004      	str	r0, [sp, #16]
 80040e6:	2101      	movs	r1, #1
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7fe fe13 	bl	8002d14 <__i2b>
 80040ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040f0:	4607      	mov	r7, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 81d0 	beq.w	8004498 <_dtoa_r+0xb20>
 80040f8:	461a      	mov	r2, r3
 80040fa:	4601      	mov	r1, r0
 80040fc:	4620      	mov	r0, r4
 80040fe:	f7fe fea9 	bl	8002e54 <__pow5mult>
 8004102:	9b06      	ldr	r3, [sp, #24]
 8004104:	2b01      	cmp	r3, #1
 8004106:	4607      	mov	r7, r0
 8004108:	dc40      	bgt.n	800418c <_dtoa_r+0x814>
 800410a:	9b00      	ldr	r3, [sp, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d139      	bne.n	8004184 <_dtoa_r+0x80c>
 8004110:	9b01      	ldr	r3, [sp, #4]
 8004112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004116:	2b00      	cmp	r3, #0
 8004118:	d136      	bne.n	8004188 <_dtoa_r+0x810>
 800411a:	9b01      	ldr	r3, [sp, #4]
 800411c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004120:	0d1b      	lsrs	r3, r3, #20
 8004122:	051b      	lsls	r3, r3, #20
 8004124:	b12b      	cbz	r3, 8004132 <_dtoa_r+0x7ba>
 8004126:	9b05      	ldr	r3, [sp, #20]
 8004128:	3301      	adds	r3, #1
 800412a:	9305      	str	r3, [sp, #20]
 800412c:	f108 0801 	add.w	r8, r8, #1
 8004130:	2301      	movs	r3, #1
 8004132:	9307      	str	r3, [sp, #28]
 8004134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004136:	2b00      	cmp	r3, #0
 8004138:	d12a      	bne.n	8004190 <_dtoa_r+0x818>
 800413a:	2001      	movs	r0, #1
 800413c:	e030      	b.n	80041a0 <_dtoa_r+0x828>
 800413e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004140:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004144:	e795      	b.n	8004072 <_dtoa_r+0x6fa>
 8004146:	9b07      	ldr	r3, [sp, #28]
 8004148:	f109 37ff 	add.w	r7, r9, #4294967295
 800414c:	42bb      	cmp	r3, r7
 800414e:	bfbf      	itttt	lt
 8004150:	9b07      	ldrlt	r3, [sp, #28]
 8004152:	9707      	strlt	r7, [sp, #28]
 8004154:	1afa      	sublt	r2, r7, r3
 8004156:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004158:	bfbb      	ittet	lt
 800415a:	189b      	addlt	r3, r3, r2
 800415c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800415e:	1bdf      	subge	r7, r3, r7
 8004160:	2700      	movlt	r7, #0
 8004162:	f1b9 0f00 	cmp.w	r9, #0
 8004166:	bfb5      	itete	lt
 8004168:	9b05      	ldrlt	r3, [sp, #20]
 800416a:	9d05      	ldrge	r5, [sp, #20]
 800416c:	eba3 0509 	sublt.w	r5, r3, r9
 8004170:	464b      	movge	r3, r9
 8004172:	bfb8      	it	lt
 8004174:	2300      	movlt	r3, #0
 8004176:	e77e      	b.n	8004076 <_dtoa_r+0x6fe>
 8004178:	9f07      	ldr	r7, [sp, #28]
 800417a:	9d05      	ldr	r5, [sp, #20]
 800417c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800417e:	e783      	b.n	8004088 <_dtoa_r+0x710>
 8004180:	9a07      	ldr	r2, [sp, #28]
 8004182:	e7ab      	b.n	80040dc <_dtoa_r+0x764>
 8004184:	2300      	movs	r3, #0
 8004186:	e7d4      	b.n	8004132 <_dtoa_r+0x7ba>
 8004188:	9b00      	ldr	r3, [sp, #0]
 800418a:	e7d2      	b.n	8004132 <_dtoa_r+0x7ba>
 800418c:	2300      	movs	r3, #0
 800418e:	9307      	str	r3, [sp, #28]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004196:	6918      	ldr	r0, [r3, #16]
 8004198:	f7fe fd6e 	bl	8002c78 <__hi0bits>
 800419c:	f1c0 0020 	rsb	r0, r0, #32
 80041a0:	4440      	add	r0, r8
 80041a2:	f010 001f 	ands.w	r0, r0, #31
 80041a6:	d047      	beq.n	8004238 <_dtoa_r+0x8c0>
 80041a8:	f1c0 0320 	rsb	r3, r0, #32
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	dd3b      	ble.n	8004228 <_dtoa_r+0x8b0>
 80041b0:	9b05      	ldr	r3, [sp, #20]
 80041b2:	f1c0 001c 	rsb	r0, r0, #28
 80041b6:	4403      	add	r3, r0
 80041b8:	9305      	str	r3, [sp, #20]
 80041ba:	4405      	add	r5, r0
 80041bc:	4480      	add	r8, r0
 80041be:	9b05      	ldr	r3, [sp, #20]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	dd05      	ble.n	80041d0 <_dtoa_r+0x858>
 80041c4:	461a      	mov	r2, r3
 80041c6:	9904      	ldr	r1, [sp, #16]
 80041c8:	4620      	mov	r0, r4
 80041ca:	f7fe fe91 	bl	8002ef0 <__lshift>
 80041ce:	9004      	str	r0, [sp, #16]
 80041d0:	f1b8 0f00 	cmp.w	r8, #0
 80041d4:	dd05      	ble.n	80041e2 <_dtoa_r+0x86a>
 80041d6:	4639      	mov	r1, r7
 80041d8:	4642      	mov	r2, r8
 80041da:	4620      	mov	r0, r4
 80041dc:	f7fe fe88 	bl	8002ef0 <__lshift>
 80041e0:	4607      	mov	r7, r0
 80041e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041e4:	b353      	cbz	r3, 800423c <_dtoa_r+0x8c4>
 80041e6:	4639      	mov	r1, r7
 80041e8:	9804      	ldr	r0, [sp, #16]
 80041ea:	f7fe fed5 	bl	8002f98 <__mcmp>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	da24      	bge.n	800423c <_dtoa_r+0x8c4>
 80041f2:	2300      	movs	r3, #0
 80041f4:	220a      	movs	r2, #10
 80041f6:	9904      	ldr	r1, [sp, #16]
 80041f8:	4620      	mov	r0, r4
 80041fa:	f7fe fd02 	bl	8002c02 <__multadd>
 80041fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004200:	9004      	str	r0, [sp, #16]
 8004202:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 814d 	beq.w	80044a6 <_dtoa_r+0xb2e>
 800420c:	2300      	movs	r3, #0
 800420e:	4631      	mov	r1, r6
 8004210:	220a      	movs	r2, #10
 8004212:	4620      	mov	r0, r4
 8004214:	f7fe fcf5 	bl	8002c02 <__multadd>
 8004218:	9b02      	ldr	r3, [sp, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	4606      	mov	r6, r0
 800421e:	dc4f      	bgt.n	80042c0 <_dtoa_r+0x948>
 8004220:	9b06      	ldr	r3, [sp, #24]
 8004222:	2b02      	cmp	r3, #2
 8004224:	dd4c      	ble.n	80042c0 <_dtoa_r+0x948>
 8004226:	e011      	b.n	800424c <_dtoa_r+0x8d4>
 8004228:	d0c9      	beq.n	80041be <_dtoa_r+0x846>
 800422a:	9a05      	ldr	r2, [sp, #20]
 800422c:	331c      	adds	r3, #28
 800422e:	441a      	add	r2, r3
 8004230:	9205      	str	r2, [sp, #20]
 8004232:	441d      	add	r5, r3
 8004234:	4498      	add	r8, r3
 8004236:	e7c2      	b.n	80041be <_dtoa_r+0x846>
 8004238:	4603      	mov	r3, r0
 800423a:	e7f6      	b.n	800422a <_dtoa_r+0x8b2>
 800423c:	f1b9 0f00 	cmp.w	r9, #0
 8004240:	dc38      	bgt.n	80042b4 <_dtoa_r+0x93c>
 8004242:	9b06      	ldr	r3, [sp, #24]
 8004244:	2b02      	cmp	r3, #2
 8004246:	dd35      	ble.n	80042b4 <_dtoa_r+0x93c>
 8004248:	f8cd 9008 	str.w	r9, [sp, #8]
 800424c:	9b02      	ldr	r3, [sp, #8]
 800424e:	b963      	cbnz	r3, 800426a <_dtoa_r+0x8f2>
 8004250:	4639      	mov	r1, r7
 8004252:	2205      	movs	r2, #5
 8004254:	4620      	mov	r0, r4
 8004256:	f7fe fcd4 	bl	8002c02 <__multadd>
 800425a:	4601      	mov	r1, r0
 800425c:	4607      	mov	r7, r0
 800425e:	9804      	ldr	r0, [sp, #16]
 8004260:	f7fe fe9a 	bl	8002f98 <__mcmp>
 8004264:	2800      	cmp	r0, #0
 8004266:	f73f adcc 	bgt.w	8003e02 <_dtoa_r+0x48a>
 800426a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800426c:	465d      	mov	r5, fp
 800426e:	ea6f 0a03 	mvn.w	sl, r3
 8004272:	f04f 0900 	mov.w	r9, #0
 8004276:	4639      	mov	r1, r7
 8004278:	4620      	mov	r0, r4
 800427a:	f7fe fcab 	bl	8002bd4 <_Bfree>
 800427e:	2e00      	cmp	r6, #0
 8004280:	f43f aeb7 	beq.w	8003ff2 <_dtoa_r+0x67a>
 8004284:	f1b9 0f00 	cmp.w	r9, #0
 8004288:	d005      	beq.n	8004296 <_dtoa_r+0x91e>
 800428a:	45b1      	cmp	r9, r6
 800428c:	d003      	beq.n	8004296 <_dtoa_r+0x91e>
 800428e:	4649      	mov	r1, r9
 8004290:	4620      	mov	r0, r4
 8004292:	f7fe fc9f 	bl	8002bd4 <_Bfree>
 8004296:	4631      	mov	r1, r6
 8004298:	4620      	mov	r0, r4
 800429a:	f7fe fc9b 	bl	8002bd4 <_Bfree>
 800429e:	e6a8      	b.n	8003ff2 <_dtoa_r+0x67a>
 80042a0:	2700      	movs	r7, #0
 80042a2:	463e      	mov	r6, r7
 80042a4:	e7e1      	b.n	800426a <_dtoa_r+0x8f2>
 80042a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80042aa:	463e      	mov	r6, r7
 80042ac:	e5a9      	b.n	8003e02 <_dtoa_r+0x48a>
 80042ae:	bf00      	nop
 80042b0:	40240000 	.word	0x40240000
 80042b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80fa 	beq.w	80044b4 <_dtoa_r+0xb3c>
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	dd05      	ble.n	80042d0 <_dtoa_r+0x958>
 80042c4:	4631      	mov	r1, r6
 80042c6:	462a      	mov	r2, r5
 80042c8:	4620      	mov	r0, r4
 80042ca:	f7fe fe11 	bl	8002ef0 <__lshift>
 80042ce:	4606      	mov	r6, r0
 80042d0:	9b07      	ldr	r3, [sp, #28]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d04c      	beq.n	8004370 <_dtoa_r+0x9f8>
 80042d6:	6871      	ldr	r1, [r6, #4]
 80042d8:	4620      	mov	r0, r4
 80042da:	f7fe fc47 	bl	8002b6c <_Balloc>
 80042de:	6932      	ldr	r2, [r6, #16]
 80042e0:	3202      	adds	r2, #2
 80042e2:	4605      	mov	r5, r0
 80042e4:	0092      	lsls	r2, r2, #2
 80042e6:	f106 010c 	add.w	r1, r6, #12
 80042ea:	300c      	adds	r0, #12
 80042ec:	f000 f904 	bl	80044f8 <memcpy>
 80042f0:	2201      	movs	r2, #1
 80042f2:	4629      	mov	r1, r5
 80042f4:	4620      	mov	r0, r4
 80042f6:	f7fe fdfb 	bl	8002ef0 <__lshift>
 80042fa:	9b00      	ldr	r3, [sp, #0]
 80042fc:	f8cd b014 	str.w	fp, [sp, #20]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	46b1      	mov	r9, r6
 8004306:	9307      	str	r3, [sp, #28]
 8004308:	4606      	mov	r6, r0
 800430a:	4639      	mov	r1, r7
 800430c:	9804      	ldr	r0, [sp, #16]
 800430e:	f7ff faa7 	bl	8003860 <quorem>
 8004312:	4649      	mov	r1, r9
 8004314:	4605      	mov	r5, r0
 8004316:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800431a:	9804      	ldr	r0, [sp, #16]
 800431c:	f7fe fe3c 	bl	8002f98 <__mcmp>
 8004320:	4632      	mov	r2, r6
 8004322:	9000      	str	r0, [sp, #0]
 8004324:	4639      	mov	r1, r7
 8004326:	4620      	mov	r0, r4
 8004328:	f7fe fe50 	bl	8002fcc <__mdiff>
 800432c:	68c3      	ldr	r3, [r0, #12]
 800432e:	4602      	mov	r2, r0
 8004330:	bb03      	cbnz	r3, 8004374 <_dtoa_r+0x9fc>
 8004332:	4601      	mov	r1, r0
 8004334:	9008      	str	r0, [sp, #32]
 8004336:	9804      	ldr	r0, [sp, #16]
 8004338:	f7fe fe2e 	bl	8002f98 <__mcmp>
 800433c:	9a08      	ldr	r2, [sp, #32]
 800433e:	4603      	mov	r3, r0
 8004340:	4611      	mov	r1, r2
 8004342:	4620      	mov	r0, r4
 8004344:	9308      	str	r3, [sp, #32]
 8004346:	f7fe fc45 	bl	8002bd4 <_Bfree>
 800434a:	9b08      	ldr	r3, [sp, #32]
 800434c:	b9a3      	cbnz	r3, 8004378 <_dtoa_r+0xa00>
 800434e:	9a06      	ldr	r2, [sp, #24]
 8004350:	b992      	cbnz	r2, 8004378 <_dtoa_r+0xa00>
 8004352:	9a07      	ldr	r2, [sp, #28]
 8004354:	b982      	cbnz	r2, 8004378 <_dtoa_r+0xa00>
 8004356:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800435a:	d029      	beq.n	80043b0 <_dtoa_r+0xa38>
 800435c:	9b00      	ldr	r3, [sp, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	dd01      	ble.n	8004366 <_dtoa_r+0x9ee>
 8004362:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004366:	9b05      	ldr	r3, [sp, #20]
 8004368:	1c5d      	adds	r5, r3, #1
 800436a:	f883 8000 	strb.w	r8, [r3]
 800436e:	e782      	b.n	8004276 <_dtoa_r+0x8fe>
 8004370:	4630      	mov	r0, r6
 8004372:	e7c2      	b.n	80042fa <_dtoa_r+0x982>
 8004374:	2301      	movs	r3, #1
 8004376:	e7e3      	b.n	8004340 <_dtoa_r+0x9c8>
 8004378:	9a00      	ldr	r2, [sp, #0]
 800437a:	2a00      	cmp	r2, #0
 800437c:	db04      	blt.n	8004388 <_dtoa_r+0xa10>
 800437e:	d125      	bne.n	80043cc <_dtoa_r+0xa54>
 8004380:	9a06      	ldr	r2, [sp, #24]
 8004382:	bb1a      	cbnz	r2, 80043cc <_dtoa_r+0xa54>
 8004384:	9a07      	ldr	r2, [sp, #28]
 8004386:	bb0a      	cbnz	r2, 80043cc <_dtoa_r+0xa54>
 8004388:	2b00      	cmp	r3, #0
 800438a:	ddec      	ble.n	8004366 <_dtoa_r+0x9ee>
 800438c:	2201      	movs	r2, #1
 800438e:	9904      	ldr	r1, [sp, #16]
 8004390:	4620      	mov	r0, r4
 8004392:	f7fe fdad 	bl	8002ef0 <__lshift>
 8004396:	4639      	mov	r1, r7
 8004398:	9004      	str	r0, [sp, #16]
 800439a:	f7fe fdfd 	bl	8002f98 <__mcmp>
 800439e:	2800      	cmp	r0, #0
 80043a0:	dc03      	bgt.n	80043aa <_dtoa_r+0xa32>
 80043a2:	d1e0      	bne.n	8004366 <_dtoa_r+0x9ee>
 80043a4:	f018 0f01 	tst.w	r8, #1
 80043a8:	d0dd      	beq.n	8004366 <_dtoa_r+0x9ee>
 80043aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80043ae:	d1d8      	bne.n	8004362 <_dtoa_r+0x9ea>
 80043b0:	9b05      	ldr	r3, [sp, #20]
 80043b2:	9a05      	ldr	r2, [sp, #20]
 80043b4:	1c5d      	adds	r5, r3, #1
 80043b6:	2339      	movs	r3, #57	; 0x39
 80043b8:	7013      	strb	r3, [r2, #0]
 80043ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80043be:	2b39      	cmp	r3, #57	; 0x39
 80043c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80043c4:	d04f      	beq.n	8004466 <_dtoa_r+0xaee>
 80043c6:	3301      	adds	r3, #1
 80043c8:	7013      	strb	r3, [r2, #0]
 80043ca:	e754      	b.n	8004276 <_dtoa_r+0x8fe>
 80043cc:	9a05      	ldr	r2, [sp, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f102 0501 	add.w	r5, r2, #1
 80043d4:	dd06      	ble.n	80043e4 <_dtoa_r+0xa6c>
 80043d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80043da:	d0e9      	beq.n	80043b0 <_dtoa_r+0xa38>
 80043dc:	f108 0801 	add.w	r8, r8, #1
 80043e0:	9b05      	ldr	r3, [sp, #20]
 80043e2:	e7c2      	b.n	800436a <_dtoa_r+0x9f2>
 80043e4:	9a02      	ldr	r2, [sp, #8]
 80043e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80043ea:	eba5 030b 	sub.w	r3, r5, fp
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d021      	beq.n	8004436 <_dtoa_r+0xabe>
 80043f2:	2300      	movs	r3, #0
 80043f4:	220a      	movs	r2, #10
 80043f6:	9904      	ldr	r1, [sp, #16]
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7fe fc02 	bl	8002c02 <__multadd>
 80043fe:	45b1      	cmp	r9, r6
 8004400:	9004      	str	r0, [sp, #16]
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	f04f 020a 	mov.w	r2, #10
 800440a:	4649      	mov	r1, r9
 800440c:	4620      	mov	r0, r4
 800440e:	d105      	bne.n	800441c <_dtoa_r+0xaa4>
 8004410:	f7fe fbf7 	bl	8002c02 <__multadd>
 8004414:	4681      	mov	r9, r0
 8004416:	4606      	mov	r6, r0
 8004418:	9505      	str	r5, [sp, #20]
 800441a:	e776      	b.n	800430a <_dtoa_r+0x992>
 800441c:	f7fe fbf1 	bl	8002c02 <__multadd>
 8004420:	4631      	mov	r1, r6
 8004422:	4681      	mov	r9, r0
 8004424:	2300      	movs	r3, #0
 8004426:	220a      	movs	r2, #10
 8004428:	4620      	mov	r0, r4
 800442a:	f7fe fbea 	bl	8002c02 <__multadd>
 800442e:	4606      	mov	r6, r0
 8004430:	e7f2      	b.n	8004418 <_dtoa_r+0xaa0>
 8004432:	f04f 0900 	mov.w	r9, #0
 8004436:	2201      	movs	r2, #1
 8004438:	9904      	ldr	r1, [sp, #16]
 800443a:	4620      	mov	r0, r4
 800443c:	f7fe fd58 	bl	8002ef0 <__lshift>
 8004440:	4639      	mov	r1, r7
 8004442:	9004      	str	r0, [sp, #16]
 8004444:	f7fe fda8 	bl	8002f98 <__mcmp>
 8004448:	2800      	cmp	r0, #0
 800444a:	dcb6      	bgt.n	80043ba <_dtoa_r+0xa42>
 800444c:	d102      	bne.n	8004454 <_dtoa_r+0xadc>
 800444e:	f018 0f01 	tst.w	r8, #1
 8004452:	d1b2      	bne.n	80043ba <_dtoa_r+0xa42>
 8004454:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004458:	2b30      	cmp	r3, #48	; 0x30
 800445a:	f105 32ff 	add.w	r2, r5, #4294967295
 800445e:	f47f af0a 	bne.w	8004276 <_dtoa_r+0x8fe>
 8004462:	4615      	mov	r5, r2
 8004464:	e7f6      	b.n	8004454 <_dtoa_r+0xadc>
 8004466:	4593      	cmp	fp, r2
 8004468:	d105      	bne.n	8004476 <_dtoa_r+0xafe>
 800446a:	2331      	movs	r3, #49	; 0x31
 800446c:	f10a 0a01 	add.w	sl, sl, #1
 8004470:	f88b 3000 	strb.w	r3, [fp]
 8004474:	e6ff      	b.n	8004276 <_dtoa_r+0x8fe>
 8004476:	4615      	mov	r5, r2
 8004478:	e79f      	b.n	80043ba <_dtoa_r+0xa42>
 800447a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80044e0 <_dtoa_r+0xb68>
 800447e:	e007      	b.n	8004490 <_dtoa_r+0xb18>
 8004480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004482:	f8df b060 	ldr.w	fp, [pc, #96]	; 80044e4 <_dtoa_r+0xb6c>
 8004486:	b11b      	cbz	r3, 8004490 <_dtoa_r+0xb18>
 8004488:	f10b 0308 	add.w	r3, fp, #8
 800448c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4658      	mov	r0, fp
 8004492:	b017      	add	sp, #92	; 0x5c
 8004494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004498:	9b06      	ldr	r3, [sp, #24]
 800449a:	2b01      	cmp	r3, #1
 800449c:	f77f ae35 	ble.w	800410a <_dtoa_r+0x792>
 80044a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044a2:	9307      	str	r3, [sp, #28]
 80044a4:	e649      	b.n	800413a <_dtoa_r+0x7c2>
 80044a6:	9b02      	ldr	r3, [sp, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	dc03      	bgt.n	80044b4 <_dtoa_r+0xb3c>
 80044ac:	9b06      	ldr	r3, [sp, #24]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	f73f aecc 	bgt.w	800424c <_dtoa_r+0x8d4>
 80044b4:	465d      	mov	r5, fp
 80044b6:	4639      	mov	r1, r7
 80044b8:	9804      	ldr	r0, [sp, #16]
 80044ba:	f7ff f9d1 	bl	8003860 <quorem>
 80044be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80044c2:	f805 8b01 	strb.w	r8, [r5], #1
 80044c6:	9a02      	ldr	r2, [sp, #8]
 80044c8:	eba5 030b 	sub.w	r3, r5, fp
 80044cc:	429a      	cmp	r2, r3
 80044ce:	ddb0      	ble.n	8004432 <_dtoa_r+0xaba>
 80044d0:	2300      	movs	r3, #0
 80044d2:	220a      	movs	r2, #10
 80044d4:	9904      	ldr	r1, [sp, #16]
 80044d6:	4620      	mov	r0, r4
 80044d8:	f7fe fb93 	bl	8002c02 <__multadd>
 80044dc:	9004      	str	r0, [sp, #16]
 80044de:	e7ea      	b.n	80044b6 <_dtoa_r+0xb3e>
 80044e0:	080047bc 	.word	0x080047bc
 80044e4:	080047af 	.word	0x080047af

080044e8 <malloc>:
 80044e8:	4b02      	ldr	r3, [pc, #8]	; (80044f4 <malloc+0xc>)
 80044ea:	4601      	mov	r1, r0
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	f7fe be45 	b.w	800317c <_malloc_r>
 80044f2:	bf00      	nop
 80044f4:	20000020 	.word	0x20000020

080044f8 <memcpy>:
 80044f8:	b510      	push	{r4, lr}
 80044fa:	1e43      	subs	r3, r0, #1
 80044fc:	440a      	add	r2, r1
 80044fe:	4291      	cmp	r1, r2
 8004500:	d100      	bne.n	8004504 <memcpy+0xc>
 8004502:	bd10      	pop	{r4, pc}
 8004504:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800450c:	e7f7      	b.n	80044fe <memcpy+0x6>

0800450e <memmove>:
 800450e:	4288      	cmp	r0, r1
 8004510:	b510      	push	{r4, lr}
 8004512:	eb01 0302 	add.w	r3, r1, r2
 8004516:	d807      	bhi.n	8004528 <memmove+0x1a>
 8004518:	1e42      	subs	r2, r0, #1
 800451a:	4299      	cmp	r1, r3
 800451c:	d00a      	beq.n	8004534 <memmove+0x26>
 800451e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004522:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004526:	e7f8      	b.n	800451a <memmove+0xc>
 8004528:	4283      	cmp	r3, r0
 800452a:	d9f5      	bls.n	8004518 <memmove+0xa>
 800452c:	1881      	adds	r1, r0, r2
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	42d3      	cmn	r3, r2
 8004532:	d100      	bne.n	8004536 <memmove+0x28>
 8004534:	bd10      	pop	{r4, pc}
 8004536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800453a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800453e:	e7f7      	b.n	8004530 <memmove+0x22>

08004540 <__malloc_lock>:
 8004540:	4770      	bx	lr

08004542 <__malloc_unlock>:
 8004542:	4770      	bx	lr

08004544 <_free_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4605      	mov	r5, r0
 8004548:	2900      	cmp	r1, #0
 800454a:	d045      	beq.n	80045d8 <_free_r+0x94>
 800454c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004550:	1f0c      	subs	r4, r1, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	bfb8      	it	lt
 8004556:	18e4      	addlt	r4, r4, r3
 8004558:	f7ff fff2 	bl	8004540 <__malloc_lock>
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <_free_r+0x98>)
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	4610      	mov	r0, r2
 8004562:	b933      	cbnz	r3, 8004572 <_free_r+0x2e>
 8004564:	6063      	str	r3, [r4, #4]
 8004566:	6014      	str	r4, [r2, #0]
 8004568:	4628      	mov	r0, r5
 800456a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800456e:	f7ff bfe8 	b.w	8004542 <__malloc_unlock>
 8004572:	42a3      	cmp	r3, r4
 8004574:	d90c      	bls.n	8004590 <_free_r+0x4c>
 8004576:	6821      	ldr	r1, [r4, #0]
 8004578:	1862      	adds	r2, r4, r1
 800457a:	4293      	cmp	r3, r2
 800457c:	bf04      	itt	eq
 800457e:	681a      	ldreq	r2, [r3, #0]
 8004580:	685b      	ldreq	r3, [r3, #4]
 8004582:	6063      	str	r3, [r4, #4]
 8004584:	bf04      	itt	eq
 8004586:	1852      	addeq	r2, r2, r1
 8004588:	6022      	streq	r2, [r4, #0]
 800458a:	6004      	str	r4, [r0, #0]
 800458c:	e7ec      	b.n	8004568 <_free_r+0x24>
 800458e:	4613      	mov	r3, r2
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	b10a      	cbz	r2, 8004598 <_free_r+0x54>
 8004594:	42a2      	cmp	r2, r4
 8004596:	d9fa      	bls.n	800458e <_free_r+0x4a>
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	1858      	adds	r0, r3, r1
 800459c:	42a0      	cmp	r0, r4
 800459e:	d10b      	bne.n	80045b8 <_free_r+0x74>
 80045a0:	6820      	ldr	r0, [r4, #0]
 80045a2:	4401      	add	r1, r0
 80045a4:	1858      	adds	r0, r3, r1
 80045a6:	4282      	cmp	r2, r0
 80045a8:	6019      	str	r1, [r3, #0]
 80045aa:	d1dd      	bne.n	8004568 <_free_r+0x24>
 80045ac:	6810      	ldr	r0, [r2, #0]
 80045ae:	6852      	ldr	r2, [r2, #4]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	4401      	add	r1, r0
 80045b4:	6019      	str	r1, [r3, #0]
 80045b6:	e7d7      	b.n	8004568 <_free_r+0x24>
 80045b8:	d902      	bls.n	80045c0 <_free_r+0x7c>
 80045ba:	230c      	movs	r3, #12
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	e7d3      	b.n	8004568 <_free_r+0x24>
 80045c0:	6820      	ldr	r0, [r4, #0]
 80045c2:	1821      	adds	r1, r4, r0
 80045c4:	428a      	cmp	r2, r1
 80045c6:	bf04      	itt	eq
 80045c8:	6811      	ldreq	r1, [r2, #0]
 80045ca:	6852      	ldreq	r2, [r2, #4]
 80045cc:	6062      	str	r2, [r4, #4]
 80045ce:	bf04      	itt	eq
 80045d0:	1809      	addeq	r1, r1, r0
 80045d2:	6021      	streq	r1, [r4, #0]
 80045d4:	605c      	str	r4, [r3, #4]
 80045d6:	e7c7      	b.n	8004568 <_free_r+0x24>
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
 80045da:	bf00      	nop
 80045dc:	200000c0 	.word	0x200000c0

080045e0 <_malloc_usable_size_r>:
 80045e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e4:	1f18      	subs	r0, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfbc      	itt	lt
 80045ea:	580b      	ldrlt	r3, [r1, r0]
 80045ec:	18c0      	addlt	r0, r0, r3
 80045ee:	4770      	bx	lr

080045f0 <_init>:
 80045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f2:	bf00      	nop
 80045f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f6:	bc08      	pop	{r3}
 80045f8:	469e      	mov	lr, r3
 80045fa:	4770      	bx	lr

080045fc <_fini>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr
