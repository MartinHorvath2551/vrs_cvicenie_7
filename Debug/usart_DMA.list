
usart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002f68  08002f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003014  08003014  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003014  08003014  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003014  08003014  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003014  08003014  00013014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800301c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000068  08003084  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003084  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063c1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001508  00000000  00000000  00026459  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  00027968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000588  00000000  00000000  00027fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003530  00000000  00000000  00028530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004ec4  00000000  00000000  0002ba60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000721eb  00000000  00000000  00030924  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a2b0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf0  00000000  00000000  000a2b8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002f50 	.word	0x08002f50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002f50 	.word	0x08002f50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <LL_GPIO_SetPinMode>:
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa93 f3a3 	rbit	r3, r3
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	fab3 f383 	clz	r3, r3
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	401a      	ands	r2, r3
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	fa93 f3a3 	rbit	r3, r3
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	fab3 f383 	clz	r3, r3
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	431a      	orrs	r2, r3
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	bf00      	nop
 8000afc:	3724      	adds	r7, #36	; 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <LL_GPIO_SetPinOutputType>:
 8000b06:	b480      	push	{r7}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	431a      	orrs	r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <LL_GPIO_SetPinSpeed>:
 8000b36:	b480      	push	{r7}
 8000b38:	b089      	sub	sp, #36	; 0x24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa93 f3a3 	rbit	r3, r3
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	fab3 f383 	clz	r3, r3
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	401a      	ands	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	fa93 f3a3 	rbit	r3, r3
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fab3 f383 	clz	r3, r3
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	bf00      	nop
 8000b86:	3724      	adds	r7, #36	; 0x24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_GPIO_SetPinPull>:
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa93 f3a3 	rbit	r3, r3
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	fab3 f383 	clz	r3, r3
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa93 f3a3 	rbit	r3, r3
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	fab3 f383 	clz	r3, r3
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	bf00      	nop
 8000be0:	3724      	adds	r7, #36	; 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <LL_GPIO_SetAFPin_0_7>:
 8000bea:	b480      	push	{r7}
 8000bec:	b089      	sub	sp, #36	; 0x24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	6a1a      	ldr	r2, [r3, #32]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	fa93 f3a3 	rbit	r3, r3
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	fab3 f383 	clz	r3, r3
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	210f      	movs	r1, #15
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	61fb      	str	r3, [r7, #28]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	fa93 f3a3 	rbit	r3, r3
 8000c22:	61bb      	str	r3, [r7, #24]
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fab3 f383 	clz	r3, r3
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	431a      	orrs	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	621a      	str	r2, [r3, #32]
 8000c38:	bf00      	nop
 8000c3a:	3724      	adds	r7, #36	; 0x24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <LL_GPIO_SetAFPin_8_15>:
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	fa93 f3a3 	rbit	r3, r3
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	fab3 f383 	clz	r3, r3
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa93 f3a3 	rbit	r3, r3
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	fab3 f383 	clz	r3, r3
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	431a      	orrs	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
 8000c96:	bf00      	nop
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_GPIO_Init>:
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b088      	sub	sp, #32
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	fa93 f3a3 	rbit	r3, r3
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	fab3 f383 	clz	r3, r3
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e048      	b.n	8000d5e <LL_GPIO_Init+0xbc>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d03a      	beq.n	8000d58 <LL_GPIO_Init+0xb6>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	69b9      	ldr	r1, [r7, #24]
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff fede 	bl	8000aac <LL_GPIO_SetPinMode>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d003      	beq.n	8000d00 <LL_GPIO_Init+0x5e>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d106      	bne.n	8000d0e <LL_GPIO_Init+0x6c>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	461a      	mov	r2, r3
 8000d06:	69b9      	ldr	r1, [r7, #24]
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff14 	bl	8000b36 <LL_GPIO_SetPinSpeed>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	461a      	mov	r2, r3
 8000d14:	69b9      	ldr	r1, [r7, #24]
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff3a 	bl	8000b90 <LL_GPIO_SetPinPull>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d119      	bne.n	8000d58 <LL_GPIO_Init+0xb6>
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	fa93 f3a3 	rbit	r3, r3
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	fab3 f383 	clz	r3, r3
 8000d36:	2b07      	cmp	r3, #7
 8000d38:	d807      	bhi.n	8000d4a <LL_GPIO_Init+0xa8>
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	69b9      	ldr	r1, [r7, #24]
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ff51 	bl	8000bea <LL_GPIO_SetAFPin_0_7>
 8000d48:	e006      	b.n	8000d58 <LL_GPIO_Init+0xb6>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	69b9      	ldr	r1, [r7, #24]
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ff76 	bl	8000c44 <LL_GPIO_SetAFPin_8_15>
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa22 f303 	lsr.w	r3, r2, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1af      	bne.n	8000ccc <LL_GPIO_Init+0x2a>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d003      	beq.n	8000d7c <LL_GPIO_Init+0xda>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d107      	bne.n	8000d8c <LL_GPIO_Init+0xea>
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	461a      	mov	r2, r3
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff febd 	bl	8000b06 <LL_GPIO_SetPinOutputType>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3720      	adds	r7, #32
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <LL_RCC_HSI_IsReady>:
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <LL_RCC_HSI_IsReady+0x20>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	bf0c      	ite	eq
 8000da8:	2301      	moveq	r3, #1
 8000daa:	2300      	movne	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000

08000dbc <LL_RCC_LSE_IsReady>:
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <LL_RCC_LSE_IsReady+0x20>)
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	bf0c      	ite	eq
 8000dcc:	2301      	moveq	r3, #1
 8000dce:	2300      	movne	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000

08000de0 <LL_RCC_GetSysClkSource>:
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <LL_RCC_GetSysClkSource+0x18>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 030c 	and.w	r3, r3, #12
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <LL_RCC_GetAHBPrescaler>:
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <LL_RCC_GetAHBPrescaler+0x18>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000

08000e18 <LL_RCC_GetAPB1Prescaler>:
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000

08000e34 <LL_RCC_GetAPB2Prescaler>:
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <LL_RCC_GetAPB2Prescaler+0x18>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <LL_RCC_GetUSARTClockSource>:
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <LL_RCC_GetUSARTClockSource+0x28>)
 8000e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5c:	2103      	movs	r1, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	401a      	ands	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	061b      	lsls	r3, r3, #24
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40021000 	.word	0x40021000

08000e7c <LL_RCC_PLL_GetMainSource>:
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <LL_RCC_PLL_GetMainSource+0x18>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000

08000e98 <LL_RCC_PLL_GetMultiplicator>:
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <LL_RCC_PLL_GetPrediv>:
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <LL_RCC_PLL_GetPrediv+0x18>)
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	f003 030f 	and.w	r3, r3, #15
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <LL_RCC_GetSystemClocksFreq>:
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	f000 f860 	bl	8000f9c <RCC_GetSystemClockFreq>
 8000edc:	4602      	mov	r2, r0
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f87a 	bl	8000fe0 <RCC_GetHCLKClockFreq>
 8000eec:	4602      	mov	r2, r0
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f888 	bl	800100c <RCC_GetPCLK1ClockFreq>
 8000efc:	4602      	mov	r2, r0
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f894 	bl	8001034 <RCC_GetPCLK2ClockFreq>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <LL_RCC_GetUSARTClockFreq>:
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d12a      	bne.n	8000f84 <LL_RCC_GetUSARTClockFreq+0x68>
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff8e 	bl	8000e50 <LL_RCC_GetUSARTClockSource>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d00f      	beq.n	8000f5a <LL_RCC_GetUSARTClockFreq+0x3e>
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d005      	beq.n	8000f4a <LL_RCC_GetUSARTClockFreq+0x2e>
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d114      	bne.n	8000f6c <LL_RCC_GetUSARTClockFreq+0x50>
 8000f42:	f000 f82b 	bl	8000f9c <RCC_GetSystemClockFreq>
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	e021      	b.n	8000f8e <LL_RCC_GetUSARTClockFreq+0x72>
 8000f4a:	f7ff ff25 	bl	8000d98 <LL_RCC_HSI_IsReady>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d019      	beq.n	8000f88 <LL_RCC_GetUSARTClockFreq+0x6c>
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	e016      	b.n	8000f88 <LL_RCC_GetUSARTClockFreq+0x6c>
 8000f5a:	f7ff ff2f 	bl	8000dbc <LL_RCC_LSE_IsReady>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <LL_RCC_GetUSARTClockFreq+0x70>
 8000f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	e00f      	b.n	8000f8c <LL_RCC_GetUSARTClockFreq+0x70>
 8000f6c:	f000 f816 	bl	8000f9c <RCC_GetSystemClockFreq>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f834 	bl	8000fe0 <RCC_GetHCLKClockFreq>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f846 	bl	800100c <RCC_GetPCLK1ClockFreq>
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	e004      	b.n	8000f8e <LL_RCC_GetUSARTClockFreq+0x72>
 8000f84:	bf00      	nop
 8000f86:	e002      	b.n	8000f8e <LL_RCC_GetUSARTClockFreq+0x72>
 8000f88:	bf00      	nop
 8000f8a:	e000      	b.n	8000f8e <LL_RCC_GetUSARTClockFreq+0x72>
 8000f8c:	bf00      	nop
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	007a1200 	.word	0x007a1200

08000f9c <RCC_GetSystemClockFreq>:
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	f7ff ff1b 	bl	8000de0 <LL_RCC_GetSysClkSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d006      	beq.n	8000fbe <RCC_GetSystemClockFreq+0x22>
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d007      	beq.n	8000fc4 <RCC_GetSystemClockFreq+0x28>
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d109      	bne.n	8000fcc <RCC_GetSystemClockFreq+0x30>
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <RCC_GetSystemClockFreq+0x40>)
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	e009      	b.n	8000fd2 <RCC_GetSystemClockFreq+0x36>
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <RCC_GetSystemClockFreq+0x40>)
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	e006      	b.n	8000fd2 <RCC_GetSystemClockFreq+0x36>
 8000fc4:	f000 f84a 	bl	800105c <RCC_PLL_GetFreqDomain_SYS>
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	e002      	b.n	8000fd2 <RCC_GetSystemClockFreq+0x36>
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <RCC_GetSystemClockFreq+0x40>)
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	bf00      	nop
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	007a1200 	.word	0x007a1200

08000fe0 <RCC_GetHCLKClockFreq>:
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	f7ff ff08 	bl	8000dfc <LL_RCC_GetAHBPrescaler>
 8000fec:	4603      	mov	r3, r0
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <RCC_GetHCLKClockFreq+0x28>)
 8000ff6:	5cd3      	ldrb	r3, [r2, r3]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	40d3      	lsrs	r3, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	08002fc0 	.word	0x08002fc0

0800100c <RCC_GetPCLK1ClockFreq>:
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	f7ff ff00 	bl	8000e18 <LL_RCC_GetAPB1Prescaler>
 8001018:	4603      	mov	r3, r0
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <RCC_GetPCLK1ClockFreq+0x24>)
 800101e:	5cd3      	ldrb	r3, [r2, r3]
 8001020:	461a      	mov	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	40d3      	lsrs	r3, r2
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08002fd0 	.word	0x08002fd0

08001034 <RCC_GetPCLK2ClockFreq>:
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	f7ff fefa 	bl	8000e34 <LL_RCC_GetAPB2Prescaler>
 8001040:	4603      	mov	r3, r0
 8001042:	0adb      	lsrs	r3, r3, #11
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <RCC_GetPCLK2ClockFreq+0x24>)
 8001046:	5cd3      	ldrb	r3, [r2, r3]
 8001048:	461a      	mov	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	40d3      	lsrs	r3, r2
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	08002fd0 	.word	0x08002fd0

0800105c <RCC_PLL_GetFreqDomain_SYS>:
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	f7ff ff07 	bl	8000e7c <LL_RCC_PLL_GetMainSource>
 800106e:	60b8      	str	r0, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107a:	d003      	beq.n	8001084 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800107c:	e005      	b.n	800108a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	e005      	b.n	8001090 <RCC_PLL_GetFreqDomain_SYS+0x34>
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e002      	b.n	8001090 <RCC_PLL_GetFreqDomain_SYS+0x34>
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	bf00      	nop
 8001090:	f7ff ff10 	bl	8000eb4 <LL_RCC_PLL_GetPrediv>
 8001094:	4603      	mov	r3, r0
 8001096:	3301      	adds	r3, #1
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	fbb2 f4f3 	udiv	r4, r2, r3
 800109e:	f7ff fefb 	bl	8000e98 <LL_RCC_PLL_GetMultiplicator>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80010a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	fa92 f2a2 	rbit	r2, r2
 80010b4:	603a      	str	r2, [r7, #0]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	fab2 f282 	clz	r2, r2
 80010bc:	40d3      	lsrs	r3, r2
 80010be:	3302      	adds	r3, #2
 80010c0:	fb03 f304 	mul.w	r3, r3, r4
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	003d0900 	.word	0x003d0900
 80010d0:	007a1200 	.word	0x007a1200

080010d4 <LL_USART_IsEnabled>:
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	bf0c      	ite	eq
 80010e8:	2301      	moveq	r3, #1
 80010ea:	2300      	movne	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <LL_USART_SetStopBitsLength>:
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_USART_SetHWFlowCtrl>:
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_USART_SetBaudRate>:
 8001146:	b4b0      	push	{r4, r5, r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	2500      	movs	r5, #0
 8001156:	2400      	movs	r4, #0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800115e:	d114      	bne.n	800118a <LL_USART_SetBaudRate+0x44>
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	005a      	lsls	r2, r3, #1
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	085b      	lsrs	r3, r3, #1
 8001168:	441a      	add	r2, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001170:	b29b      	uxth	r3, r3
 8001172:	461d      	mov	r5, r3
 8001174:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001178:	402c      	ands	r4, r5
 800117a:	086b      	lsrs	r3, r5, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	431c      	orrs	r4, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	60dc      	str	r4, [r3, #12]
 8001188:	e00a      	b.n	80011a0 <LL_USART_SetBaudRate+0x5a>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	085a      	lsrs	r2, r3, #1
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	441a      	add	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	fbb2 f3f3 	udiv	r3, r2, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bcb0      	pop	{r4, r5, r7}
 80011a8:	4770      	bx	lr
	...

080011ac <LL_USART_Init>:
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	77fb      	strb	r3, [r7, #31]
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff88 	bl	80010d4 <LL_USART_IsEnabled>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d14e      	bne.n	8001268 <LL_USART_Init+0xbc>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <LL_USART_Init+0xc8>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	6851      	ldr	r1, [r2, #4]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	68d2      	ldr	r2, [r2, #12]
 80011da:	4311      	orrs	r1, r2
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	6912      	ldr	r2, [r2, #16]
 80011e0:	4311      	orrs	r1, r2
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	6992      	ldr	r2, [r2, #24]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	4619      	mov	r1, r3
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff80 	bl	80010fa <LL_USART_SetStopBitsLength>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	4619      	mov	r1, r3
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff8d 	bl	8001120 <LL_USART_SetHWFlowCtrl>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <LL_USART_Init+0xcc>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d104      	bne.n	8001218 <LL_USART_Init+0x6c>
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff fe84 	bl	8000f1c <LL_RCC_GetUSARTClockFreq>
 8001214:	61b8      	str	r0, [r7, #24]
 8001216:	e016      	b.n	8001246 <LL_USART_Init+0x9a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a18      	ldr	r2, [pc, #96]	; (800127c <LL_USART_Init+0xd0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d107      	bne.n	8001230 <LL_USART_Init+0x84>
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fe53 	bl	8000ed0 <LL_RCC_GetSystemClocksFreq>
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	e00a      	b.n	8001246 <LL_USART_Init+0x9a>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <LL_USART_Init+0xd4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d106      	bne.n	8001246 <LL_USART_Init+0x9a>
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fe47 	bl	8000ed0 <LL_RCC_GetSystemClocksFreq>
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00d      	beq.n	8001268 <LL_USART_Init+0xbc>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d009      	beq.n	8001268 <LL_USART_Init+0xbc>
 8001254:	2300      	movs	r3, #0
 8001256:	77fb      	strb	r3, [r7, #31]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	699a      	ldr	r2, [r3, #24]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	69b9      	ldr	r1, [r7, #24]
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff6f 	bl	8001146 <LL_USART_SetBaudRate>
 8001268:	7ffb      	ldrb	r3, [r7, #31]
 800126a:	4618      	mov	r0, r3
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	efff69f3 	.word	0xefff69f3
 8001278:	40013800 	.word	0x40013800
 800127c:	40004400 	.word	0x40004400
 8001280:	40004800 	.word	0x40004800

08001284 <LL_InitTick>:
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <LL_InitTick+0x30>)
 8001298:	3b01      	subs	r3, #1
 800129a:	6053      	str	r3, [r2, #4]
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <LL_InitTick+0x30>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <LL_InitTick+0x30>)
 80012a4:	2205      	movs	r2, #5
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <LL_Init1msTick>:
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ffdd 	bl	8001284 <LL_InitTick>
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <LL_mDelay>:
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <LL_mDelay+0x44>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ea:	d00c      	beq.n	8001306 <LL_mDelay+0x32>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	e008      	b.n	8001306 <LL_mDelay+0x32>
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <LL_mDelay+0x44>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <LL_mDelay+0x32>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f3      	bne.n	80012f4 <LL_mDelay+0x20>
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e010 	.word	0xe000e010

0800131c <LL_SetSystemCoreClock>:
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <LL_SetSystemCoreClock+0x1c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000000 	.word	0x20000000

0800133c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <NVIC_EnableIRQ+0x30>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	da0b      	bge.n	800139c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <NVIC_SetPriority+0x4c>)
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	3b04      	subs	r3, #4
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139a:	e009      	b.n	80013b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4907      	ldr	r1, [pc, #28]	; (80013c0 <NVIC_SetPriority+0x50>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4013      	ands	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40021000 	.word	0x40021000

080013f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff ffe3 	bl	80013c4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80013fe:	2100      	movs	r1, #0
 8001400:	2010      	movs	r0, #16
 8001402:	f7ff ffb5 	bl	8001370 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001406:	2010      	movs	r0, #16
 8001408:	f7ff ff98 	bl	800133c <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 800140c:	2100      	movs	r1, #0
 800140e:	2011      	movs	r0, #17
 8001410:	f7ff ffae 	bl	8001370 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001414:	2011      	movs	r0, #17
 8001416:	f7ff ff91 	bl	800133c <NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <LL_AHB1_GRP1_EnableClock>:
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4313      	orrs	r3, r2
 8001432:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4013      	ands	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000

08001450 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	463b      	mov	r3, r7
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001482:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001486:	f7ff ffcb 	bl	8001420 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800148a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800148e:	f7ff ffc7 	bl	8001420 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8001492:	2108      	movs	r1, #8
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <MX_GPIO_Init+0x54>)
 8001496:	f7ff ffdb 	bl	8001450 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800149a:	2308      	movs	r3, #8
 800149c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800149e:	2301      	movs	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	463b      	mov	r3, r7
 80014b0:	4619      	mov	r1, r3
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <MX_GPIO_Init+0x54>)
 80014b4:	f7ff fbf5 	bl	8000ca2 <LL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	48000400 	.word	0x48000400

080014c4 <NVIC_SetPriorityGrouping>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <LL_RCC_HSI_Enable+0x1c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <LL_RCC_HSI_Enable+0x1c>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <LL_RCC_HSI_IsReady+0x20>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b02      	cmp	r3, #2
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	40021000 	.word	0x40021000

08001550 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4904      	ldr	r1, [pc, #16]	; (8001578 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000

0800157c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <LL_RCC_SetSysClkSource+0x24>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f023 0203 	bic.w	r2, r3, #3
 800158c:	4904      	ldr	r1, [pc, #16]	; (80015a0 <LL_RCC_SetSysClkSource+0x24>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000

080015a4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <LL_RCC_GetSysClkSource+0x18>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000

080015c0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <LL_RCC_SetAHBPrescaler+0x24>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d0:	4904      	ldr	r1, [pc, #16]	; (80015e4 <LL_RCC_SetAHBPrescaler+0x24>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000

080015e8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <LL_RCC_SetAPB1Prescaler+0x24>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015f8:	4904      	ldr	r1, [pc, #16]	; (800160c <LL_RCC_SetAPB1Prescaler+0x24>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000

08001610 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <LL_RCC_SetAPB2Prescaler+0x24>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001620:	4904      	ldr	r1, [pc, #16]	; (8001634 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000

08001638 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001642:	69da      	ldr	r2, [r3, #28]
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4313      	orrs	r3, r2
 800164a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <LL_APB1_GRP1_EnableClock+0x2c>)
 800164e:	69da      	ldr	r2, [r3, #28]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4013      	ands	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000

08001668 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001672:	699a      	ldr	r2, [r3, #24]
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <LL_APB2_GRP1_EnableClock+0x2c>)
 800167e:	699a      	ldr	r2, [r3, #24]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000

08001698 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <LL_FLASH_SetLatency+0x24>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 0207 	bic.w	r2, r3, #7
 80016a8:	4904      	ldr	r1, [pc, #16]	; (80016bc <LL_FLASH_SetLatency+0x24>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40022000 	.word	0x40022000

080016c0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <LL_FLASH_GetLatency+0x18>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40022000 	.word	0x40022000

080016dc <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d106      	bne.n	80016f8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <LL_SYSTICK_SetClkSource+0x34>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <LL_SYSTICK_SetClkSource+0x34>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80016f6:	e005      	b.n	8001704 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <LL_SYSTICK_SetClkSource+0x34>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <LL_SYSTICK_SetClkSource+0x34>)
 80016fe:	f023 0304 	bic.w	r3, r3, #4
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e010 	.word	0xe000e010

08001714 <main>:
	int lowL = 0;



int main(void)
{
 8001714:	b5b0      	push	{r4, r5, r7, lr}
 8001716:	b096      	sub	sp, #88	; 0x58
 8001718:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff ffa4 	bl	8001668 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001720:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001724:	f7ff ff88 	bl	8001638 <LL_APB1_GRP1_EnableClock>
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f7ff fecb 	bl	80014c4 <NVIC_SetPriorityGrouping>

  /* Configure the system clock */
  SystemClock_Config();
 800172e:	f000 f881 	bl	8001834 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001732:	f7ff fe9b 	bl	800146c <MX_GPIO_Init>
  MX_DMA_Init();
 8001736:	f7ff fe5d 	bl	80013f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800173a:	f000 fe09 	bl	8002350 <MX_USART2_UART_Init>




  	  //type your code here:
  USART2_RegisterCallback(proccesDmaData);
 800173e:	4836      	ldr	r0, [pc, #216]	; (8001818 <main+0x104>)
 8001740:	f000 fdf4 	bl	800232c <USART2_RegisterCallback>
	   */

  	  	  	  //type your code here:
		#if POLLING
	  	//Polling for new data, no interrupts
	  		USART2_CheckDmaReception();
 8001744:	f000 fefc 	bl	8002540 <USART2_CheckDmaReception>
	  		LL_mDelay(10);
 8001748:	200a      	movs	r0, #10
 800174a:	f7ff fdc3 	bl	80012d4 <LL_mDelay>
		#else
	  		USART2_PutBuffer(tx_data, sizeof(tx_data));
	  		LL_mDelay(1000);
		#endif

		uint8_t tx_data[] = "";
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		uint8_t tx_data1[] = "Buffer capacity: 256";
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <main+0x108>)
 8001756:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800175a:	461d      	mov	r5, r3
 800175c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800175e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001760:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001764:	6020      	str	r0, [r4, #0]
 8001766:	3404      	adds	r4, #4
 8001768:	7021      	strb	r1, [r4, #0]
		uint8_t tx_data2[] = " bytes, occupied memory: ";
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <main+0x10c>)
 800176c:	f107 0420 	add.w	r4, r7, #32
 8001770:	461d      	mov	r5, r3
 8001772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001776:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800177a:	c403      	stmia	r4!, {r0, r1}
 800177c:	8022      	strh	r2, [r4, #0]
		uint8_t tx_data3[] = " bytes, load [in %]: ";
 800177e:	4b29      	ldr	r3, [pc, #164]	; (8001824 <main+0x110>)
 8001780:	f107 0408 	add.w	r4, r7, #8
 8001784:	461d      	mov	r5, r3
 8001786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800178a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800178e:	6020      	str	r0, [r4, #0]
 8001790:	3404      	adds	r4, #4
 8001792:	8021      	strh	r1, [r4, #0]
		uint8_t tx_data4[] = "%";
 8001794:	2325      	movs	r3, #37	; 0x25
 8001796:	80bb      	strh	r3, [r7, #4]

		sprintf(tx_data2, "%d", occupied_memory);
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <main+0x114>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	f107 0320 	add.w	r3, r7, #32
 80017a2:	4922      	ldr	r1, [pc, #136]	; (800182c <main+0x118>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 ffbd 	bl	8002724 <siprintf>
		sprintf(tx_data3, "%d", (int)load);
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <main+0x11c>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	ee17 2a90 	vmov	r2, s15
 80017bc:	491b      	ldr	r1, [pc, #108]	; (800182c <main+0x118>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 ffb0 	bl	8002724 <siprintf>



		strcat(tx_data, tx_data1);
 80017c4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80017c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 ffc8 	bl	8002764 <strcat>
		strcat(tx_data, tx_data2);
 80017d4:	f107 0220 	add.w	r2, r7, #32
 80017d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 ffc0 	bl	8002764 <strcat>
		strcat(tx_data, tx_data3);
 80017e4:	f107 0208 	add.w	r2, r7, #8
 80017e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 ffb8 	bl	8002764 <strcat>
		strcat(tx_data, tx_data4);
 80017f4:	1d3a      	adds	r2, r7, #4
 80017f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 ffb1 	bl	8002764 <strcat>


		USART2_PutBuffer(tx_data, sizeof(tx_data));
 8001802:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001806:	2101      	movs	r1, #1
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fe79 	bl	8002500 <USART2_PutBuffer>

	  	LL_mDelay(200);
 800180e:	20c8      	movs	r0, #200	; 0xc8
 8001810:	f7ff fd60 	bl	80012d4 <LL_mDelay>
  {
 8001814:	e796      	b.n	8001744 <main+0x30>
 8001816:	bf00      	nop
 8001818:	080018a1 	.word	0x080018a1
 800181c:	08002f6c 	.word	0x08002f6c
 8001820:	08002f84 	.word	0x08002f84
 8001824:	08002fa0 	.word	0x08002fa0
 8001828:	200000a8 	.word	0x200000a8
 800182c:	08002f68 	.word	0x08002f68
 8001830:	200000ac 	.word	0x200000ac

08001834 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff ff2d 	bl	8001698 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800183e:	f7ff ff3f 	bl	80016c0 <LL_FLASH_GetLatency>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001848:	f000 f8a2 	bl	8001990 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 800184c:	f7ff fe5e 	bl	800150c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001850:	bf00      	nop
 8001852:	f7ff fe6b 	bl	800152c <LL_RCC_HSI_IsReady>
 8001856:	4603      	mov	r3, r0
 8001858:	2b01      	cmp	r3, #1
 800185a:	d1fa      	bne.n	8001852 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800185c:	2010      	movs	r0, #16
 800185e:	f7ff fe77 	bl	8001550 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff feac 	bl	80015c0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff febd 	bl	80015e8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff fece 	bl	8001610 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fe81 	bl	800157c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800187a:	bf00      	nop
 800187c:	f7ff fe92 	bl	80015a4 <LL_RCC_GetSysClkSource>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1fa      	bne.n	800187c <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <SystemClock_Config+0x68>)
 8001888:	f7ff fd16 	bl	80012b8 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800188c:	2004      	movs	r0, #4
 800188e:	f7ff ff25 	bl	80016dc <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001892:	4802      	ldr	r0, [pc, #8]	; (800189c <SystemClock_Config+0x68>)
 8001894:	f7ff fd42 	bl	800131c <LL_SetSystemCoreClock>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	007a1200 	.word	0x007a1200

080018a0 <proccesDmaData>:

/*
 * Implementation of function processing data received via USART.
 */
void proccesDmaData(const uint8_t* data, uint16_t len)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
	/* Process received data */

		// type your algorithm here:

	for(uint8_t i = 0; i < len; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e05a      	b.n	8001968 <proccesDmaData+0xc8>
	{
		if(*(data+i) == '#')
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b23      	cmp	r3, #35	; 0x23
 80018bc:	d103      	bne.n	80018c6 <proccesDmaData+0x26>
		{
			start = 1;
 80018be:	4b30      	ldr	r3, [pc, #192]	; (8001980 <proccesDmaData+0xe0>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e011      	b.n	80018ea <proccesDmaData+0x4a>
		}
		else if(*(data+i) == '$')
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b24      	cmp	r3, #36	; 0x24
 80018d0:	d10b      	bne.n	80018ea <proccesDmaData+0x4a>
		{
			start = 0;
 80018d2:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <proccesDmaData+0xe0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
			count = 0;
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <proccesDmaData+0xe4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
			lowL = 0;
 80018de:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <proccesDmaData+0xe8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
		    capL = 0;
 80018e4:	4b29      	ldr	r3, [pc, #164]	; (800198c <proccesDmaData+0xec>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
		}

		if(start == 1)
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <proccesDmaData+0xe0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d137      	bne.n	8001962 <proccesDmaData+0xc2>
		{
			count++;
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <proccesDmaData+0xe4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	4a22      	ldr	r2, [pc, #136]	; (8001984 <proccesDmaData+0xe4>)
 80018fa:	6013      	str	r3, [r2, #0]
			if(count >= 34)
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <proccesDmaData+0xe4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b21      	cmp	r3, #33	; 0x21
 8001902:	dd0c      	ble.n	800191e <proccesDmaData+0x7e>
			{
				start = 0;
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <proccesDmaData+0xe0>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
				count = 0;
 800190a:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <proccesDmaData+0xe4>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
				lowL = 0;
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <proccesDmaData+0xe8>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
				capL = 0;
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <proccesDmaData+0xec>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e021      	b.n	8001962 <proccesDmaData+0xc2>
			}
			else
			{
				if(*(data+i) > 96 && *(data+i) < 123)
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b60      	cmp	r3, #96	; 0x60
 8001928:	d90a      	bls.n	8001940 <proccesDmaData+0xa0>
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b7a      	cmp	r3, #122	; 0x7a
 8001934:	d804      	bhi.n	8001940 <proccesDmaData+0xa0>
				{
					lowL++;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <proccesDmaData+0xe8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a12      	ldr	r2, [pc, #72]	; (8001988 <proccesDmaData+0xe8>)
 800193e:	6013      	str	r3, [r2, #0]
				}
				if(*(data+i) > 64 && *(data+i) < 91)
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b40      	cmp	r3, #64	; 0x40
 800194a:	d90a      	bls.n	8001962 <proccesDmaData+0xc2>
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b5a      	cmp	r3, #90	; 0x5a
 8001956:	d804      	bhi.n	8001962 <proccesDmaData+0xc2>
				{
					capL++;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <proccesDmaData+0xec>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <proccesDmaData+0xec>)
 8001960:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < len; i++)
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	3301      	adds	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	b29b      	uxth	r3, r3
 800196c:	887a      	ldrh	r2, [r7, #2]
 800196e:	429a      	cmp	r2, r3
 8001970:	d89f      	bhi.n	80018b2 <proccesDmaData+0x12>

		}


	}
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000084 	.word	0x20000084
 8001984:	20000088 	.word	0x20000088
 8001988:	20000090 	.word	0x20000090
 800198c:	2000008c 	.word	0x2000008c

08001990 <Error_Handler>:


void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <LL_DMA_DisableChannel+0x3c>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	461a      	mov	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	3a01      	subs	r2, #1
 80019be:	4907      	ldr	r1, [pc, #28]	; (80019dc <LL_DMA_DisableChannel+0x3c>)
 80019c0:	5c8a      	ldrb	r2, [r1, r2]
 80019c2:	4611      	mov	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	440a      	add	r2, r1
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6013      	str	r3, [r2, #0]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	08002fb8 	.word	0x08002fb8

080019e0 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019f4:	bf0c      	ite	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	2300      	movne	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a66:	605a      	str	r2, [r3, #4]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a82:	605a      	str	r2, [r3, #4]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a9e:	605a      	str	r2, [r3, #4]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	2b10      	cmp	r3, #16
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae2:	2b40      	cmp	r3, #64	; 0x40
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2210      	movs	r2, #16
 8001b04:	621a      	str	r2, [r3, #32]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <HardFault_Handler+0x4>

08001b26 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <MemManage_Handler+0x4>

08001b2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <BusFault_Handler+0x4>

08001b32 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <UsageFault_Handler+0x4>

08001b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001b74:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <DMA1_Channel6_IRQHandler+0x38>)
 8001b76:	f7ff ff33 	bl	80019e0 <LL_DMA_IsActiveFlag_TC6>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8001b80:	f000 fcde 	bl	8002540 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8001b84:	4808      	ldr	r0, [pc, #32]	; (8001ba8 <DMA1_Channel6_IRQHandler+0x38>)
 8001b86:	f7ff ff67 	bl	8001a58 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8001b8a:	e00a      	b.n	8001ba2 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001b8c:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <DMA1_Channel6_IRQHandler+0x38>)
 8001b8e:	f7ff ff4f 	bl	8001a30 <LL_DMA_IsActiveFlag_HT6>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d104      	bne.n	8001ba2 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8001b98:	f000 fcd2 	bl	8002540 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <DMA1_Channel6_IRQHandler+0x38>)
 8001b9e:	f7ff ff77 	bl	8001a90 <LL_DMA_ClearFlag_HT6>
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40020000 	.word	0x40020000

08001bac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001bb0:	480a      	ldr	r0, [pc, #40]	; (8001bdc <DMA1_Channel7_IRQHandler+0x30>)
 8001bb2:	f7ff ff29 	bl	8001a08 <LL_DMA_IsActiveFlag_TC7>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10d      	bne.n	8001bd8 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001bbc:	4807      	ldr	r0, [pc, #28]	; (8001bdc <DMA1_Channel7_IRQHandler+0x30>)
 8001bbe:	f7ff ff59 	bl	8001a74 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001bc2:	bf00      	nop
 8001bc4:	4806      	ldr	r0, [pc, #24]	; (8001be0 <DMA1_Channel7_IRQHandler+0x34>)
 8001bc6:	f7ff ff84 	bl	8001ad2 <LL_USART_IsActiveFlag_TC>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f9      	beq.n	8001bc4 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001bd0:	2107      	movs	r1, #7
 8001bd2:	4802      	ldr	r0, [pc, #8]	; (8001bdc <DMA1_Channel7_IRQHandler+0x30>)
 8001bd4:	f7ff fee4 	bl	80019a0 <LL_DMA_DisableChannel>
	}
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40004400 	.word	0x40004400

08001be4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001be8:	4806      	ldr	r0, [pc, #24]	; (8001c04 <USART2_IRQHandler+0x20>)
 8001bea:	f7ff ff5f 	bl	8001aac <LL_USART_IsActiveFlag_IDLE>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001bf4:	f000 fca4 	bl	8002540 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <USART2_IRQHandler+0x20>)
 8001bfa:	f7ff ff7d 	bl	8001af8 <LL_USART_ClearFlag_IDLE>
	}
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40004400 	.word	0x40004400

08001c08 <_sbrk>:
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <_sbrk+0x50>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x16>
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <_sbrk+0x50>)
 8001c1a:	4a10      	ldr	r2, [pc, #64]	; (8001c5c <_sbrk+0x54>)
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <_sbrk+0x50>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <_sbrk+0x50>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	466a      	mov	r2, sp
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d907      	bls.n	8001c42 <_sbrk+0x3a>
 8001c32:	f000 fd45 	bl	80026c0 <__errno>
 8001c36:	4602      	mov	r2, r0
 8001c38:	230c      	movs	r3, #12
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c40:	e006      	b.n	8001c50 <_sbrk+0x48>
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <_sbrk+0x50>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <_sbrk+0x50>)
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000094 	.word	0x20000094
 8001c5c:	200001b8 	.word	0x200001b8

08001c60 <SystemInit>:
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <SystemInit+0x84>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ce4 <SystemInit+0x84>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c74:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <SystemInit+0x88>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <SystemInit+0x88>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <SystemInit+0x88>)
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4918      	ldr	r1, [pc, #96]	; (8001ce8 <SystemInit+0x88>)
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <SystemInit+0x8c>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <SystemInit+0x88>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a15      	ldr	r2, [pc, #84]	; (8001ce8 <SystemInit+0x88>)
 8001c92:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <SystemInit+0x88>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a11      	ldr	r2, [pc, #68]	; (8001ce8 <SystemInit+0x88>)
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <SystemInit+0x88>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <SystemInit+0x88>)
 8001cae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001cb2:	6053      	str	r3, [r2, #4]
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <SystemInit+0x88>)
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <SystemInit+0x88>)
 8001cba:	f023 030f 	bic.w	r3, r3, #15
 8001cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <SystemInit+0x88>)
 8001cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc4:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <SystemInit+0x88>)
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <SystemInit+0x90>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	630b      	str	r3, [r1, #48]	; 0x30
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <SystemInit+0x88>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <SystemInit+0x84>)
 8001cd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	f87fc00c 	.word	0xf87fc00c
 8001cf0:	ff00fccc 	.word	0xff00fccc

08001cf4 <NVIC_EnableIRQ>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	; (8001d24 <NVIC_EnableIRQ+0x30>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <NVIC_SetPriority>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	da0b      	bge.n	8001d54 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <NVIC_SetPriority+0x4c>)
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	3b04      	subs	r3, #4
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	761a      	strb	r2, [r3, #24]
}
 8001d52:	e009      	b.n	8001d68 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	4907      	ldr	r1, [pc, #28]	; (8001d78 <NVIC_SetPriority+0x50>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <LL_DMA_EnableChannel>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <LL_DMA_EnableChannel+0x3c>)
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	4907      	ldr	r1, [pc, #28]	; (8001db8 <LL_DMA_EnableChannel+0x3c>)
 8001d9c:	5c8a      	ldrb	r2, [r1, r2]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	440a      	add	r2, r1
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6013      	str	r3, [r2, #0]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	08002fd8 	.word	0x08002fd8

08001dbc <LL_DMA_DisableChannel>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <LL_DMA_DisableChannel+0x3c>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	3a01      	subs	r2, #1
 8001dda:	4907      	ldr	r1, [pc, #28]	; (8001df8 <LL_DMA_DisableChannel+0x3c>)
 8001ddc:	5c8a      	ldrb	r2, [r1, r2]
 8001dde:	4611      	mov	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	440a      	add	r2, r1
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6013      	str	r3, [r2, #0]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	08002fd8 	.word	0x08002fd8

08001dfc <LL_DMA_SetDataTransferDirection>:
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <LL_DMA_SetDataTransferDirection+0x48>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	461a      	mov	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e1c:	f023 0310 	bic.w	r3, r3, #16
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	3a01      	subs	r2, #1
 8001e24:	4907      	ldr	r1, [pc, #28]	; (8001e44 <LL_DMA_SetDataTransferDirection+0x48>)
 8001e26:	5c8a      	ldrb	r2, [r1, r2]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	440a      	add	r2, r1
 8001e2e:	4611      	mov	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	08002fd8 	.word	0x08002fd8

08001e48 <LL_DMA_GetDataTransferDirection>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001e58:	5cd3      	ldrb	r3, [r2, r3]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f244 0310 	movw	r3, #16400	; 0x4010
 8001e66:	4013      	ands	r3, r2
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	08002fd8 	.word	0x08002fd8

08001e78 <LL_DMA_SetMode>:
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <LL_DMA_SetMode+0x44>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 0220 	bic.w	r2, r3, #32
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <LL_DMA_SetMode+0x44>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	440b      	add	r3, r1
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	08002fd8 	.word	0x08002fd8

08001ec0 <LL_DMA_SetPeriphIncMode>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <LL_DMA_SetPeriphIncMode+0x44>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4413      	add	r3, r2
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	4907      	ldr	r1, [pc, #28]	; (8001f04 <LL_DMA_SetPeriphIncMode+0x44>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	440b      	add	r3, r1
 8001eee:	4619      	mov	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	08002fd8 	.word	0x08002fd8

08001f08 <LL_DMA_SetMemoryIncMode>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <LL_DMA_SetMemoryIncMode+0x44>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4413      	add	r3, r2
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <LL_DMA_SetMemoryIncMode+0x44>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	4619      	mov	r1, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	440b      	add	r3, r1
 8001f36:	4619      	mov	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	08002fd8 	.word	0x08002fd8

08001f50 <LL_DMA_SetPeriphSize>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <LL_DMA_SetPeriphSize+0x44>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	461a      	mov	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4413      	add	r3, r2
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <LL_DMA_SetPeriphSize+0x44>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	440b      	add	r3, r1
 8001f7e:	4619      	mov	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	08002fd8 	.word	0x08002fd8

08001f98 <LL_DMA_SetMemorySize>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <LL_DMA_SetMemorySize+0x44>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	461a      	mov	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	4907      	ldr	r1, [pc, #28]	; (8001fdc <LL_DMA_SetMemorySize+0x44>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	440b      	add	r3, r1
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	08002fd8 	.word	0x08002fd8

08001fe0 <LL_DMA_SetChannelPriorityLevel>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001ff2:	5cd3      	ldrb	r3, [r2, r3]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3b01      	subs	r3, #1
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	4619      	mov	r1, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	440b      	add	r3, r1
 800200e:	4619      	mov	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	08002fd8 	.word	0x08002fd8

08002028 <LL_DMA_SetDataLength>:
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3b01      	subs	r3, #1
 8002038:	4a0c      	ldr	r2, [pc, #48]	; (800206c <LL_DMA_SetDataLength+0x44>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	461a      	mov	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4413      	add	r3, r2
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	3a01      	subs	r2, #1
 800204c:	4907      	ldr	r1, [pc, #28]	; (800206c <LL_DMA_SetDataLength+0x44>)
 800204e:	5c8a      	ldrb	r2, [r1, r2]
 8002050:	4611      	mov	r1, r2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	440a      	add	r2, r1
 8002056:	4611      	mov	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	08002fd8 	.word	0x08002fd8

08002070 <LL_DMA_GetDataLength>:
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	3b01      	subs	r3, #1
 800207e:	4a06      	ldr	r2, [pc, #24]	; (8002098 <LL_DMA_GetDataLength+0x28>)
 8002080:	5cd3      	ldrb	r3, [r2, r3]
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	b29b      	uxth	r3, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	08002fd8 	.word	0x08002fd8

0800209c <LL_DMA_ConfigAddresses>:
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d114      	bne.n	80020da <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	4a16      	ldr	r2, [pc, #88]	; (8002110 <LL_DMA_ConfigAddresses+0x74>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	461a      	mov	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4413      	add	r3, r2
 80020be:	461a      	mov	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	4a11      	ldr	r2, [pc, #68]	; (8002110 <LL_DMA_ConfigAddresses+0x74>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	461a      	mov	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4413      	add	r3, r2
 80020d2:	461a      	mov	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	6093      	str	r3, [r2, #8]
}
 80020d8:	e013      	b.n	8002102 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	3b01      	subs	r3, #1
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <LL_DMA_ConfigAddresses+0x74>)
 80020e0:	5cd3      	ldrb	r3, [r2, r3]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	4a07      	ldr	r2, [pc, #28]	; (8002110 <LL_DMA_ConfigAddresses+0x74>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	60d3      	str	r3, [r2, #12]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	08002fd8 	.word	0x08002fd8

08002114 <LL_DMA_SetMemoryAddress>:
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	3b01      	subs	r3, #1
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <LL_DMA_SetMemoryAddress+0x2c>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	461a      	mov	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	461a      	mov	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	08002fd8 	.word	0x08002fd8

08002144 <LL_DMA_SetPeriphAddress>:
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3b01      	subs	r3, #1
 8002154:	4a06      	ldr	r2, [pc, #24]	; (8002170 <LL_DMA_SetPeriphAddress+0x2c>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	461a      	mov	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6093      	str	r3, [r2, #8]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	08002fd8 	.word	0x08002fd8

08002174 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	3b01      	subs	r3, #1
 8002182:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <LL_DMA_EnableIT_TC+0x3c>)
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	3a01      	subs	r2, #1
 8002192:	4907      	ldr	r1, [pc, #28]	; (80021b0 <LL_DMA_EnableIT_TC+0x3c>)
 8002194:	5c8a      	ldrb	r2, [r1, r2]
 8002196:	4611      	mov	r1, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	440a      	add	r2, r1
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6013      	str	r3, [r2, #0]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	08002fd8 	.word	0x08002fd8

080021b4 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <LL_DMA_EnableIT_TE+0x3c>)
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	461a      	mov	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	3a01      	subs	r2, #1
 80021d2:	4907      	ldr	r1, [pc, #28]	; (80021f0 <LL_DMA_EnableIT_TE+0x3c>)
 80021d4:	5c8a      	ldrb	r2, [r1, r2]
 80021d6:	4611      	mov	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	440a      	add	r2, r1
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6013      	str	r3, [r2, #0]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	08002fd8 	.word	0x08002fd8

080021f4 <LL_AHB1_GRP1_EnableClock>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4313      	orrs	r3, r2
 8002206:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4013      	ands	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40021000 	.word	0x40021000

08002224 <LL_APB1_GRP1_EnableClock>:
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <LL_APB1_GRP1_EnableClock+0x2c>)
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	4907      	ldr	r1, [pc, #28]	; (8002250 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4313      	orrs	r3, r2
 8002236:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <LL_APB1_GRP1_EnableClock+0x2c>)
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4013      	ands	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002242:	68fb      	ldr	r3, [r7, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40021000 	.word	0x40021000

08002254 <LL_USART_Enable>:
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	601a      	str	r2, [r3, #0]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_USART_ConfigAsyncMode>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	609a      	str	r2, [r3, #8]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002300:	b490      	push	{r4, r7}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 800230a:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3328      	adds	r3, #40	; 0x28
 8002316:	461c      	mov	r4, r3
 8002318:	e002      	b.n	8002320 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3324      	adds	r3, #36	; 0x24
 800231e:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8002320:	4623      	mov	r3, r4
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bc90      	pop	{r4, r7}
 800232a:	4770      	bx	lr

0800232c <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a03      	ldr	r2, [pc, #12]	; (800234c <USART2_RegisterCallback+0x20>)
 800233e:	6013      	str	r3, [r2, #0]
	}
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	20000098 	.word	0x20000098

08002350 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002350:	b5b0      	push	{r4, r5, r7, lr}
 8002352:	b090      	sub	sp, #64	; 0x40
 8002354:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	615a      	str	r2, [r3, #20]
 8002368:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
 8002378:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800237a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800237e:	f7ff ff51 	bl	8002224 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002382:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002386:	f7ff ff35 	bl	80021f4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800238a:	f248 0304 	movw	r3, #32772	; 0x8004
 800238e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002390:	2302      	movs	r3, #2
 8002392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80023a0:	2307      	movs	r3, #7
 80023a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ac:	f7fe fc79 	bl	8000ca2 <LL_GPIO_Init>
   */
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2106      	movs	r1, #6
 80023b4:	484f      	ldr	r0, [pc, #316]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 80023b6:	f7ff fd21 	bl	8001dfc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80023ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023be:	2106      	movs	r1, #6
 80023c0:	484c      	ldr	r0, [pc, #304]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 80023c2:	f7ff fe0d 	bl	8001fe0 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2106      	movs	r1, #6
 80023ca:	484a      	ldr	r0, [pc, #296]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 80023cc:	f7ff fd54 	bl	8001e78 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2106      	movs	r1, #6
 80023d4:	4847      	ldr	r0, [pc, #284]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 80023d6:	f7ff fd73 	bl	8001ec0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80023da:	2280      	movs	r2, #128	; 0x80
 80023dc:	2106      	movs	r1, #6
 80023de:	4845      	ldr	r0, [pc, #276]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 80023e0:	f7ff fd92 	bl	8001f08 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2106      	movs	r1, #6
 80023e8:	4842      	ldr	r0, [pc, #264]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 80023ea:	f7ff fdb1 	bl	8001f50 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2106      	movs	r1, #6
 80023f2:	4840      	ldr	r0, [pc, #256]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 80023f4:	f7ff fdd0 	bl	8001f98 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,
 80023f8:	2101      	movs	r1, #1
 80023fa:	483f      	ldr	r0, [pc, #252]	; (80024f8 <MX_USART2_UART_Init+0x1a8>)
 80023fc:	f7ff ff80 	bl	8002300 <LL_USART_DMA_GetRegAddr>
 8002400:	4605      	mov	r5, r0
 8002402:	4c3e      	ldr	r4, [pc, #248]	; (80024fc <MX_USART2_UART_Init+0x1ac>)
 8002404:	2106      	movs	r1, #6
 8002406:	483b      	ldr	r0, [pc, #236]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 8002408:	f7ff fd1e 	bl	8001e48 <LL_DMA_GetDataTransferDirection>
 800240c:	4603      	mov	r3, r0
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4623      	mov	r3, r4
 8002412:	462a      	mov	r2, r5
 8002414:	2106      	movs	r1, #6
 8002416:	4837      	ldr	r0, [pc, #220]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 8002418:	f7ff fe40 	bl	800209c <LL_DMA_ConfigAddresses>
  						 LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  						 (uint32_t)bufferUSART2dma,
  						 LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800241c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002420:	2106      	movs	r1, #6
 8002422:	4834      	ldr	r0, [pc, #208]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 8002424:	f7ff fe00 	bl	8002028 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002428:	2106      	movs	r1, #6
 800242a:	4832      	ldr	r0, [pc, #200]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 800242c:	f7ff fca6 	bl	8001d7c <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002430:	4831      	ldr	r0, [pc, #196]	; (80024f8 <MX_USART2_UART_Init+0x1a8>)
 8002432:	f7ff ff45 	bl	80022c0 <LL_USART_EnableDMAReq_RX>
  #endif

  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002436:	2210      	movs	r2, #16
 8002438:	2107      	movs	r1, #7
 800243a:	482e      	ldr	r0, [pc, #184]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 800243c:	f7ff fcde 	bl	8001dfc <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002440:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002444:	2107      	movs	r1, #7
 8002446:	482b      	ldr	r0, [pc, #172]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 8002448:	f7ff fdca 	bl	8001fe0 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800244c:	2200      	movs	r2, #0
 800244e:	2107      	movs	r1, #7
 8002450:	4828      	ldr	r0, [pc, #160]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 8002452:	f7ff fd11 	bl	8001e78 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002456:	2200      	movs	r2, #0
 8002458:	2107      	movs	r1, #7
 800245a:	4826      	ldr	r0, [pc, #152]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 800245c:	f7ff fd30 	bl	8001ec0 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002460:	2280      	movs	r2, #128	; 0x80
 8002462:	2107      	movs	r1, #7
 8002464:	4823      	ldr	r0, [pc, #140]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 8002466:	f7ff fd4f 	bl	8001f08 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800246a:	2200      	movs	r2, #0
 800246c:	2107      	movs	r1, #7
 800246e:	4821      	ldr	r0, [pc, #132]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 8002470:	f7ff fd6e 	bl	8001f50 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002474:	2200      	movs	r2, #0
 8002476:	2107      	movs	r1, #7
 8002478:	481e      	ldr	r0, [pc, #120]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 800247a:	f7ff fd8d 	bl	8001f98 <LL_DMA_SetMemorySize>

    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 800247e:	2100      	movs	r1, #0
 8002480:	481d      	ldr	r0, [pc, #116]	; (80024f8 <MX_USART2_UART_Init+0x1a8>)
 8002482:	f7ff ff3d 	bl	8002300 <LL_USART_DMA_GetRegAddr>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	2107      	movs	r1, #7
 800248c:	4819      	ldr	r0, [pc, #100]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 800248e:	f7ff fe59 	bl	8002144 <LL_DMA_SetPeriphAddress>
    LL_USART_EnableDMAReq_TX(USART2);
 8002492:	4819      	ldr	r0, [pc, #100]	; (80024f8 <MX_USART2_UART_Init+0x1a8>)
 8002494:	f7ff ff24 	bl	80022e0 <LL_USART_EnableDMAReq_TX>

    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002498:	2107      	movs	r1, #7
 800249a:	4816      	ldr	r0, [pc, #88]	; (80024f4 <MX_USART2_UART_Init+0x1a4>)
 800249c:	f7ff fe8a 	bl	80021b4 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80024a0:	2100      	movs	r1, #0
 80024a2:	2026      	movs	r0, #38	; 0x26
 80024a4:	f7ff fc40 	bl	8001d28 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80024a8:	2026      	movs	r0, #38	; 0x26
 80024aa:	f7ff fc23 	bl	8001cf4 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80024ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80024b2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80024b4:	2300      	movs	r3, #0
 80024b6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80024bc:	2300      	movs	r3, #0
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80024c0:	230c      	movs	r3, #12
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80024c8:	2300      	movs	r3, #0
 80024ca:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	4619      	mov	r1, r3
 80024d2:	4809      	ldr	r0, [pc, #36]	; (80024f8 <MX_USART2_UART_Init+0x1a8>)
 80024d4:	f7fe fe6a 	bl	80011ac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80024d8:	4807      	ldr	r0, [pc, #28]	; (80024f8 <MX_USART2_UART_Init+0x1a8>)
 80024da:	f7ff fecb 	bl	8002274 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <MX_USART2_UART_Init+0x1a8>)
 80024e0:	f7ff fede 	bl	80022a0 <LL_USART_DisableIT_CTS>

  	  //type your code here:
#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
#endif
  LL_USART_Enable(USART2);
 80024e4:	4804      	ldr	r0, [pc, #16]	; (80024f8 <MX_USART2_UART_Init+0x1a8>)
 80024e6:	f7ff feb5 	bl	8002254 <LL_USART_Enable>
}
 80024ea:	bf00      	nop
 80024ec:	3738      	adds	r7, #56	; 0x38
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bdb0      	pop	{r4, r5, r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40004400 	.word	0x40004400
 80024fc:	200000b0 	.word	0x200000b0

08002500 <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	461a      	mov	r2, r3
 8002510:	2107      	movs	r1, #7
 8002512:	480a      	ldr	r0, [pc, #40]	; (800253c <USART2_PutBuffer+0x3c>)
 8002514:	f7ff fdfe 	bl	8002114 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	461a      	mov	r2, r3
 800251c:	2107      	movs	r1, #7
 800251e:	4807      	ldr	r0, [pc, #28]	; (800253c <USART2_PutBuffer+0x3c>)
 8002520:	f7ff fd82 	bl	8002028 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002524:	2107      	movs	r1, #7
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <USART2_PutBuffer+0x3c>)
 8002528:	f7ff fe24 	bl	8002174 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 800252c:	2107      	movs	r1, #7
 800252e:	4803      	ldr	r0, [pc, #12]	; (800253c <USART2_PutBuffer+0x3c>)
 8002530:	f7ff fc24 	bl	8001d7c <LL_DMA_EnableChannel>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40020000 	.word	0x40020000

08002540 <USART2_CheckDmaReception>:
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */

void USART2_CheckDmaReception(void)
{
 8002540:	b5b0      	push	{r4, r5, r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af02      	add	r7, sp, #8
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 8002546:	4b41      	ldr	r3, [pc, #260]	; (800264c <USART2_CheckDmaReception+0x10c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d07a      	beq.n	8002644 <USART2_CheckDmaReception+0x104>

		static uint16_t old_pos = 0;

		uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800254e:	2106      	movs	r1, #6
 8002550:	483f      	ldr	r0, [pc, #252]	; (8002650 <USART2_CheckDmaReception+0x110>)
 8002552:	f7ff fd8d 	bl	8002070 <LL_DMA_GetDataLength>
 8002556:	4603      	mov	r3, r0
 8002558:	b29b      	uxth	r3, r3
 800255a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800255e:	80fb      	strh	r3, [r7, #6]

		occupied_memory=DMA_USART2_BUFFER_SIZE-pos;
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	425b      	negs	r3, r3
 8002566:	b2da      	uxtb	r2, r3
 8002568:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <USART2_CheckDmaReception+0x114>)
 800256a:	701a      	strb	r2, [r3, #0]
		load=occupied_memory/DMA_USART2_BUFFER_SIZE*100.0;
 800256c:	4b39      	ldr	r3, [pc, #228]	; (8002654 <USART2_CheckDmaReception+0x114>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	da00      	bge.n	8002576 <USART2_CheckDmaReception+0x36>
 8002574:	33ff      	adds	r3, #255	; 0xff
 8002576:	121b      	asrs	r3, r3, #8
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ffcb 	bl	8000514 <__aeabi_i2d>
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	4b35      	ldr	r3, [pc, #212]	; (8002658 <USART2_CheckDmaReception+0x118>)
 8002584:	f7fe f830 	bl	80005e8 <__aeabi_dmul>
 8002588:	4603      	mov	r3, r0
 800258a:	460c      	mov	r4, r1
 800258c:	4618      	mov	r0, r3
 800258e:	4621      	mov	r1, r4
 8002590:	f7fe fa3c 	bl	8000a0c <__aeabi_d2f>
 8002594:	4602      	mov	r2, r0
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <USART2_CheckDmaReception+0x11c>)
 8002598:	601a      	str	r2, [r3, #0]

		if (pos != old_pos)
 800259a:	4b31      	ldr	r3, [pc, #196]	; (8002660 <USART2_CheckDmaReception+0x120>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d050      	beq.n	8002646 <USART2_CheckDmaReception+0x106>
		{
			if (pos < (DMA_USART2_BUFFER_SIZE-20))
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	2beb      	cmp	r3, #235	; 0xeb
 80025a8:	d811      	bhi.n	80025ce <USART2_CheckDmaReception+0x8e>
			{
				USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <USART2_CheckDmaReception+0x10c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2c      	ldr	r2, [pc, #176]	; (8002660 <USART2_CheckDmaReception+0x120>)
 80025b0:	8812      	ldrh	r2, [r2, #0]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4a2b      	ldr	r2, [pc, #172]	; (8002664 <USART2_CheckDmaReception+0x124>)
 80025b6:	1888      	adds	r0, r1, r2
 80025b8:	4a29      	ldr	r2, [pc, #164]	; (8002660 <USART2_CheckDmaReception+0x120>)
 80025ba:	8812      	ldrh	r2, [r2, #0]
 80025bc:	88f9      	ldrh	r1, [r7, #6]
 80025be:	1a8a      	subs	r2, r1, r2
 80025c0:	b292      	uxth	r2, r2
 80025c2:	4611      	mov	r1, r2
 80025c4:	4798      	blx	r3
				old_pos = pos;
 80025c6:	4a26      	ldr	r2, [pc, #152]	; (8002660 <USART2_CheckDmaReception+0x120>)
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	8013      	strh	r3, [r2, #0]
 80025cc:	e03b      	b.n	8002646 <USART2_CheckDmaReception+0x106>
			}
			else
			{
				USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <USART2_CheckDmaReception+0x10c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a23      	ldr	r2, [pc, #140]	; (8002660 <USART2_CheckDmaReception+0x120>)
 80025d4:	8812      	ldrh	r2, [r2, #0]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4a22      	ldr	r2, [pc, #136]	; (8002664 <USART2_CheckDmaReception+0x124>)
 80025da:	1888      	adds	r0, r1, r2
 80025dc:	4a20      	ldr	r2, [pc, #128]	; (8002660 <USART2_CheckDmaReception+0x120>)
 80025de:	8812      	ldrh	r2, [r2, #0]
 80025e0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80025e4:	b292      	uxth	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	4798      	blx	r3

				memset(bufferUSART2dma, 0, DMA_USART2_BUFFER_SIZE);
 80025ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ee:	2100      	movs	r1, #0
 80025f0:	481c      	ldr	r0, [pc, #112]	; (8002664 <USART2_CheckDmaReception+0x124>)
 80025f2:	f000 f88f 	bl	8002714 <memset>

				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 80025f6:	2106      	movs	r1, #6
 80025f8:	4815      	ldr	r0, [pc, #84]	; (8002650 <USART2_CheckDmaReception+0x110>)
 80025fa:	f7ff fbdf 	bl	8001dbc <LL_DMA_DisableChannel>
				LL_DMA_ConfigAddresses(    DMA1, LL_DMA_CHANNEL_6,
 80025fe:	2101      	movs	r1, #1
 8002600:	4819      	ldr	r0, [pc, #100]	; (8002668 <USART2_CheckDmaReception+0x128>)
 8002602:	f7ff fe7d 	bl	8002300 <LL_USART_DMA_GetRegAddr>
 8002606:	4605      	mov	r5, r0
 8002608:	4c16      	ldr	r4, [pc, #88]	; (8002664 <USART2_CheckDmaReception+0x124>)
 800260a:	2106      	movs	r1, #6
 800260c:	4810      	ldr	r0, [pc, #64]	; (8002650 <USART2_CheckDmaReception+0x110>)
 800260e:	f7ff fc1b 	bl	8001e48 <LL_DMA_GetDataTransferDirection>
 8002612:	4603      	mov	r3, r0
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	4623      	mov	r3, r4
 8002618:	462a      	mov	r2, r5
 800261a:	2106      	movs	r1, #6
 800261c:	480c      	ldr	r0, [pc, #48]	; (8002650 <USART2_CheckDmaReception+0x110>)
 800261e:	f7ff fd3d 	bl	800209c <LL_DMA_ConfigAddresses>
				LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
				(uint32_t)bufferUSART2dma,
				LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

				LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002626:	2106      	movs	r1, #6
 8002628:	4809      	ldr	r0, [pc, #36]	; (8002650 <USART2_CheckDmaReception+0x110>)
 800262a:	f7ff fcfd 	bl	8002028 <LL_DMA_SetDataLength>
				LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800262e:	2106      	movs	r1, #6
 8002630:	4807      	ldr	r0, [pc, #28]	; (8002650 <USART2_CheckDmaReception+0x110>)
 8002632:	f7ff fba3 	bl	8001d7c <LL_DMA_EnableChannel>
				LL_USART_EnableDMAReq_RX(USART2);
 8002636:	480c      	ldr	r0, [pc, #48]	; (8002668 <USART2_CheckDmaReception+0x128>)
 8002638:	f7ff fe42 	bl	80022c0 <LL_USART_EnableDMAReq_RX>

				old_pos = 0;
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <USART2_CheckDmaReception+0x120>)
 800263e:	2200      	movs	r2, #0
 8002640:	801a      	strh	r2, [r3, #0]
 8002642:	e000      	b.n	8002646 <USART2_CheckDmaReception+0x106>
	if(USART2_ProcessData == 0) return;
 8002644:	bf00      	nop

			}
		}
}
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bdb0      	pop	{r4, r5, r7, pc}
 800264c:	20000098 	.word	0x20000098
 8002650:	40020000 	.word	0x40020000
 8002654:	200000a8 	.word	0x200000a8
 8002658:	40590000 	.word	0x40590000
 800265c:	200000ac 	.word	0x200000ac
 8002660:	2000009c 	.word	0x2000009c
 8002664:	200000b0 	.word	0x200000b0
 8002668:	40004400 	.word	0x40004400

0800266c <Reset_Handler>:
 800266c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a4 <LoopForever+0x2>
 8002670:	2100      	movs	r1, #0
 8002672:	e003      	b.n	800267c <LoopCopyDataInit>

08002674 <CopyDataInit>:
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <LoopForever+0x6>)
 8002676:	585b      	ldr	r3, [r3, r1]
 8002678:	5043      	str	r3, [r0, r1]
 800267a:	3104      	adds	r1, #4

0800267c <LoopCopyDataInit>:
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <LoopForever+0xa>)
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <LoopForever+0xe>)
 8002680:	1842      	adds	r2, r0, r1
 8002682:	429a      	cmp	r2, r3
 8002684:	d3f6      	bcc.n	8002674 <CopyDataInit>
 8002686:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <LoopForever+0x12>)
 8002688:	e002      	b.n	8002690 <LoopFillZerobss>

0800268a <FillZerobss>:
 800268a:	2300      	movs	r3, #0
 800268c:	f842 3b04 	str.w	r3, [r2], #4

08002690 <LoopFillZerobss>:
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <LoopForever+0x16>)
 8002692:	429a      	cmp	r2, r3
 8002694:	d3f9      	bcc.n	800268a <FillZerobss>
 8002696:	f7ff fae3 	bl	8001c60 <SystemInit>
 800269a:	f000 f817 	bl	80026cc <__libc_init_array>
 800269e:	f7ff f839 	bl	8001714 <main>

080026a2 <LoopForever>:
 80026a2:	e7fe      	b.n	80026a2 <LoopForever>
 80026a4:	20003000 	.word	0x20003000
 80026a8:	0800301c 	.word	0x0800301c
 80026ac:	20000000 	.word	0x20000000
 80026b0:	20000068 	.word	0x20000068
 80026b4:	20000068 	.word	0x20000068
 80026b8:	200001b4 	.word	0x200001b4

080026bc <ADC1_2_IRQHandler>:
 80026bc:	e7fe      	b.n	80026bc <ADC1_2_IRQHandler>
	...

080026c0 <__errno>:
 80026c0:	4b01      	ldr	r3, [pc, #4]	; (80026c8 <__errno+0x8>)
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000004 	.word	0x20000004

080026cc <__libc_init_array>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	4e0d      	ldr	r6, [pc, #52]	; (8002704 <__libc_init_array+0x38>)
 80026d0:	4c0d      	ldr	r4, [pc, #52]	; (8002708 <__libc_init_array+0x3c>)
 80026d2:	1ba4      	subs	r4, r4, r6
 80026d4:	10a4      	asrs	r4, r4, #2
 80026d6:	2500      	movs	r5, #0
 80026d8:	42a5      	cmp	r5, r4
 80026da:	d109      	bne.n	80026f0 <__libc_init_array+0x24>
 80026dc:	4e0b      	ldr	r6, [pc, #44]	; (800270c <__libc_init_array+0x40>)
 80026de:	4c0c      	ldr	r4, [pc, #48]	; (8002710 <__libc_init_array+0x44>)
 80026e0:	f000 fc36 	bl	8002f50 <_init>
 80026e4:	1ba4      	subs	r4, r4, r6
 80026e6:	10a4      	asrs	r4, r4, #2
 80026e8:	2500      	movs	r5, #0
 80026ea:	42a5      	cmp	r5, r4
 80026ec:	d105      	bne.n	80026fa <__libc_init_array+0x2e>
 80026ee:	bd70      	pop	{r4, r5, r6, pc}
 80026f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026f4:	4798      	blx	r3
 80026f6:	3501      	adds	r5, #1
 80026f8:	e7ee      	b.n	80026d8 <__libc_init_array+0xc>
 80026fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026fe:	4798      	blx	r3
 8002700:	3501      	adds	r5, #1
 8002702:	e7f2      	b.n	80026ea <__libc_init_array+0x1e>
 8002704:	08003014 	.word	0x08003014
 8002708:	08003014 	.word	0x08003014
 800270c:	08003014 	.word	0x08003014
 8002710:	08003018 	.word	0x08003018

08002714 <memset>:
 8002714:	4402      	add	r2, r0
 8002716:	4603      	mov	r3, r0
 8002718:	4293      	cmp	r3, r2
 800271a:	d100      	bne.n	800271e <memset+0xa>
 800271c:	4770      	bx	lr
 800271e:	f803 1b01 	strb.w	r1, [r3], #1
 8002722:	e7f9      	b.n	8002718 <memset+0x4>

08002724 <siprintf>:
 8002724:	b40e      	push	{r1, r2, r3}
 8002726:	b500      	push	{lr}
 8002728:	b09c      	sub	sp, #112	; 0x70
 800272a:	ab1d      	add	r3, sp, #116	; 0x74
 800272c:	9002      	str	r0, [sp, #8]
 800272e:	9006      	str	r0, [sp, #24]
 8002730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002734:	4809      	ldr	r0, [pc, #36]	; (800275c <siprintf+0x38>)
 8002736:	9107      	str	r1, [sp, #28]
 8002738:	9104      	str	r1, [sp, #16]
 800273a:	4909      	ldr	r1, [pc, #36]	; (8002760 <siprintf+0x3c>)
 800273c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002740:	9105      	str	r1, [sp, #20]
 8002742:	6800      	ldr	r0, [r0, #0]
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	a902      	add	r1, sp, #8
 8002748:	f000 f876 	bl	8002838 <_svfiprintf_r>
 800274c:	9b02      	ldr	r3, [sp, #8]
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	b01c      	add	sp, #112	; 0x70
 8002754:	f85d eb04 	ldr.w	lr, [sp], #4
 8002758:	b003      	add	sp, #12
 800275a:	4770      	bx	lr
 800275c:	20000004 	.word	0x20000004
 8002760:	ffff0208 	.word	0xffff0208

08002764 <strcat>:
 8002764:	b510      	push	{r4, lr}
 8002766:	4603      	mov	r3, r0
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	1c5c      	adds	r4, r3, #1
 800276c:	b93a      	cbnz	r2, 800277e <strcat+0x1a>
 800276e:	3b01      	subs	r3, #1
 8002770:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002774:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002778:	2a00      	cmp	r2, #0
 800277a:	d1f9      	bne.n	8002770 <strcat+0xc>
 800277c:	bd10      	pop	{r4, pc}
 800277e:	4623      	mov	r3, r4
 8002780:	e7f2      	b.n	8002768 <strcat+0x4>

08002782 <__ssputs_r>:
 8002782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002786:	688e      	ldr	r6, [r1, #8]
 8002788:	429e      	cmp	r6, r3
 800278a:	4682      	mov	sl, r0
 800278c:	460c      	mov	r4, r1
 800278e:	4690      	mov	r8, r2
 8002790:	4699      	mov	r9, r3
 8002792:	d837      	bhi.n	8002804 <__ssputs_r+0x82>
 8002794:	898a      	ldrh	r2, [r1, #12]
 8002796:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800279a:	d031      	beq.n	8002800 <__ssputs_r+0x7e>
 800279c:	6825      	ldr	r5, [r4, #0]
 800279e:	6909      	ldr	r1, [r1, #16]
 80027a0:	1a6f      	subs	r7, r5, r1
 80027a2:	6965      	ldr	r5, [r4, #20]
 80027a4:	2302      	movs	r3, #2
 80027a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027aa:	fb95 f5f3 	sdiv	r5, r5, r3
 80027ae:	f109 0301 	add.w	r3, r9, #1
 80027b2:	443b      	add	r3, r7
 80027b4:	429d      	cmp	r5, r3
 80027b6:	bf38      	it	cc
 80027b8:	461d      	movcc	r5, r3
 80027ba:	0553      	lsls	r3, r2, #21
 80027bc:	d530      	bpl.n	8002820 <__ssputs_r+0x9e>
 80027be:	4629      	mov	r1, r5
 80027c0:	f000 fb2c 	bl	8002e1c <_malloc_r>
 80027c4:	4606      	mov	r6, r0
 80027c6:	b950      	cbnz	r0, 80027de <__ssputs_r+0x5c>
 80027c8:	230c      	movs	r3, #12
 80027ca:	f8ca 3000 	str.w	r3, [sl]
 80027ce:	89a3      	ldrh	r3, [r4, #12]
 80027d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d4:	81a3      	strh	r3, [r4, #12]
 80027d6:	f04f 30ff 	mov.w	r0, #4294967295
 80027da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027de:	463a      	mov	r2, r7
 80027e0:	6921      	ldr	r1, [r4, #16]
 80027e2:	f000 faa9 	bl	8002d38 <memcpy>
 80027e6:	89a3      	ldrh	r3, [r4, #12]
 80027e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f0:	81a3      	strh	r3, [r4, #12]
 80027f2:	6126      	str	r6, [r4, #16]
 80027f4:	6165      	str	r5, [r4, #20]
 80027f6:	443e      	add	r6, r7
 80027f8:	1bed      	subs	r5, r5, r7
 80027fa:	6026      	str	r6, [r4, #0]
 80027fc:	60a5      	str	r5, [r4, #8]
 80027fe:	464e      	mov	r6, r9
 8002800:	454e      	cmp	r6, r9
 8002802:	d900      	bls.n	8002806 <__ssputs_r+0x84>
 8002804:	464e      	mov	r6, r9
 8002806:	4632      	mov	r2, r6
 8002808:	4641      	mov	r1, r8
 800280a:	6820      	ldr	r0, [r4, #0]
 800280c:	f000 fa9f 	bl	8002d4e <memmove>
 8002810:	68a3      	ldr	r3, [r4, #8]
 8002812:	1b9b      	subs	r3, r3, r6
 8002814:	60a3      	str	r3, [r4, #8]
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	441e      	add	r6, r3
 800281a:	6026      	str	r6, [r4, #0]
 800281c:	2000      	movs	r0, #0
 800281e:	e7dc      	b.n	80027da <__ssputs_r+0x58>
 8002820:	462a      	mov	r2, r5
 8002822:	f000 fb55 	bl	8002ed0 <_realloc_r>
 8002826:	4606      	mov	r6, r0
 8002828:	2800      	cmp	r0, #0
 800282a:	d1e2      	bne.n	80027f2 <__ssputs_r+0x70>
 800282c:	6921      	ldr	r1, [r4, #16]
 800282e:	4650      	mov	r0, sl
 8002830:	f000 faa6 	bl	8002d80 <_free_r>
 8002834:	e7c8      	b.n	80027c8 <__ssputs_r+0x46>
	...

08002838 <_svfiprintf_r>:
 8002838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283c:	461d      	mov	r5, r3
 800283e:	898b      	ldrh	r3, [r1, #12]
 8002840:	061f      	lsls	r7, r3, #24
 8002842:	b09d      	sub	sp, #116	; 0x74
 8002844:	4680      	mov	r8, r0
 8002846:	460c      	mov	r4, r1
 8002848:	4616      	mov	r6, r2
 800284a:	d50f      	bpl.n	800286c <_svfiprintf_r+0x34>
 800284c:	690b      	ldr	r3, [r1, #16]
 800284e:	b96b      	cbnz	r3, 800286c <_svfiprintf_r+0x34>
 8002850:	2140      	movs	r1, #64	; 0x40
 8002852:	f000 fae3 	bl	8002e1c <_malloc_r>
 8002856:	6020      	str	r0, [r4, #0]
 8002858:	6120      	str	r0, [r4, #16]
 800285a:	b928      	cbnz	r0, 8002868 <_svfiprintf_r+0x30>
 800285c:	230c      	movs	r3, #12
 800285e:	f8c8 3000 	str.w	r3, [r8]
 8002862:	f04f 30ff 	mov.w	r0, #4294967295
 8002866:	e0c8      	b.n	80029fa <_svfiprintf_r+0x1c2>
 8002868:	2340      	movs	r3, #64	; 0x40
 800286a:	6163      	str	r3, [r4, #20]
 800286c:	2300      	movs	r3, #0
 800286e:	9309      	str	r3, [sp, #36]	; 0x24
 8002870:	2320      	movs	r3, #32
 8002872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002876:	2330      	movs	r3, #48	; 0x30
 8002878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800287c:	9503      	str	r5, [sp, #12]
 800287e:	f04f 0b01 	mov.w	fp, #1
 8002882:	4637      	mov	r7, r6
 8002884:	463d      	mov	r5, r7
 8002886:	f815 3b01 	ldrb.w	r3, [r5], #1
 800288a:	b10b      	cbz	r3, 8002890 <_svfiprintf_r+0x58>
 800288c:	2b25      	cmp	r3, #37	; 0x25
 800288e:	d13e      	bne.n	800290e <_svfiprintf_r+0xd6>
 8002890:	ebb7 0a06 	subs.w	sl, r7, r6
 8002894:	d00b      	beq.n	80028ae <_svfiprintf_r+0x76>
 8002896:	4653      	mov	r3, sl
 8002898:	4632      	mov	r2, r6
 800289a:	4621      	mov	r1, r4
 800289c:	4640      	mov	r0, r8
 800289e:	f7ff ff70 	bl	8002782 <__ssputs_r>
 80028a2:	3001      	adds	r0, #1
 80028a4:	f000 80a4 	beq.w	80029f0 <_svfiprintf_r+0x1b8>
 80028a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028aa:	4453      	add	r3, sl
 80028ac:	9309      	str	r3, [sp, #36]	; 0x24
 80028ae:	783b      	ldrb	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 809d 	beq.w	80029f0 <_svfiprintf_r+0x1b8>
 80028b6:	2300      	movs	r3, #0
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028c0:	9304      	str	r3, [sp, #16]
 80028c2:	9307      	str	r3, [sp, #28]
 80028c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028c8:	931a      	str	r3, [sp, #104]	; 0x68
 80028ca:	462f      	mov	r7, r5
 80028cc:	2205      	movs	r2, #5
 80028ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80028d2:	4850      	ldr	r0, [pc, #320]	; (8002a14 <_svfiprintf_r+0x1dc>)
 80028d4:	f7fd fc7c 	bl	80001d0 <memchr>
 80028d8:	9b04      	ldr	r3, [sp, #16]
 80028da:	b9d0      	cbnz	r0, 8002912 <_svfiprintf_r+0xda>
 80028dc:	06d9      	lsls	r1, r3, #27
 80028de:	bf44      	itt	mi
 80028e0:	2220      	movmi	r2, #32
 80028e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028e6:	071a      	lsls	r2, r3, #28
 80028e8:	bf44      	itt	mi
 80028ea:	222b      	movmi	r2, #43	; 0x2b
 80028ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028f0:	782a      	ldrb	r2, [r5, #0]
 80028f2:	2a2a      	cmp	r2, #42	; 0x2a
 80028f4:	d015      	beq.n	8002922 <_svfiprintf_r+0xea>
 80028f6:	9a07      	ldr	r2, [sp, #28]
 80028f8:	462f      	mov	r7, r5
 80028fa:	2000      	movs	r0, #0
 80028fc:	250a      	movs	r5, #10
 80028fe:	4639      	mov	r1, r7
 8002900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002904:	3b30      	subs	r3, #48	; 0x30
 8002906:	2b09      	cmp	r3, #9
 8002908:	d94d      	bls.n	80029a6 <_svfiprintf_r+0x16e>
 800290a:	b1b8      	cbz	r0, 800293c <_svfiprintf_r+0x104>
 800290c:	e00f      	b.n	800292e <_svfiprintf_r+0xf6>
 800290e:	462f      	mov	r7, r5
 8002910:	e7b8      	b.n	8002884 <_svfiprintf_r+0x4c>
 8002912:	4a40      	ldr	r2, [pc, #256]	; (8002a14 <_svfiprintf_r+0x1dc>)
 8002914:	1a80      	subs	r0, r0, r2
 8002916:	fa0b f000 	lsl.w	r0, fp, r0
 800291a:	4318      	orrs	r0, r3
 800291c:	9004      	str	r0, [sp, #16]
 800291e:	463d      	mov	r5, r7
 8002920:	e7d3      	b.n	80028ca <_svfiprintf_r+0x92>
 8002922:	9a03      	ldr	r2, [sp, #12]
 8002924:	1d11      	adds	r1, r2, #4
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	9103      	str	r1, [sp, #12]
 800292a:	2a00      	cmp	r2, #0
 800292c:	db01      	blt.n	8002932 <_svfiprintf_r+0xfa>
 800292e:	9207      	str	r2, [sp, #28]
 8002930:	e004      	b.n	800293c <_svfiprintf_r+0x104>
 8002932:	4252      	negs	r2, r2
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	9207      	str	r2, [sp, #28]
 800293a:	9304      	str	r3, [sp, #16]
 800293c:	783b      	ldrb	r3, [r7, #0]
 800293e:	2b2e      	cmp	r3, #46	; 0x2e
 8002940:	d10c      	bne.n	800295c <_svfiprintf_r+0x124>
 8002942:	787b      	ldrb	r3, [r7, #1]
 8002944:	2b2a      	cmp	r3, #42	; 0x2a
 8002946:	d133      	bne.n	80029b0 <_svfiprintf_r+0x178>
 8002948:	9b03      	ldr	r3, [sp, #12]
 800294a:	1d1a      	adds	r2, r3, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	9203      	str	r2, [sp, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	bfb8      	it	lt
 8002954:	f04f 33ff 	movlt.w	r3, #4294967295
 8002958:	3702      	adds	r7, #2
 800295a:	9305      	str	r3, [sp, #20]
 800295c:	4d2e      	ldr	r5, [pc, #184]	; (8002a18 <_svfiprintf_r+0x1e0>)
 800295e:	7839      	ldrb	r1, [r7, #0]
 8002960:	2203      	movs	r2, #3
 8002962:	4628      	mov	r0, r5
 8002964:	f7fd fc34 	bl	80001d0 <memchr>
 8002968:	b138      	cbz	r0, 800297a <_svfiprintf_r+0x142>
 800296a:	2340      	movs	r3, #64	; 0x40
 800296c:	1b40      	subs	r0, r0, r5
 800296e:	fa03 f000 	lsl.w	r0, r3, r0
 8002972:	9b04      	ldr	r3, [sp, #16]
 8002974:	4303      	orrs	r3, r0
 8002976:	3701      	adds	r7, #1
 8002978:	9304      	str	r3, [sp, #16]
 800297a:	7839      	ldrb	r1, [r7, #0]
 800297c:	4827      	ldr	r0, [pc, #156]	; (8002a1c <_svfiprintf_r+0x1e4>)
 800297e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002982:	2206      	movs	r2, #6
 8002984:	1c7e      	adds	r6, r7, #1
 8002986:	f7fd fc23 	bl	80001d0 <memchr>
 800298a:	2800      	cmp	r0, #0
 800298c:	d038      	beq.n	8002a00 <_svfiprintf_r+0x1c8>
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <_svfiprintf_r+0x1e8>)
 8002990:	bb13      	cbnz	r3, 80029d8 <_svfiprintf_r+0x1a0>
 8002992:	9b03      	ldr	r3, [sp, #12]
 8002994:	3307      	adds	r3, #7
 8002996:	f023 0307 	bic.w	r3, r3, #7
 800299a:	3308      	adds	r3, #8
 800299c:	9303      	str	r3, [sp, #12]
 800299e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029a0:	444b      	add	r3, r9
 80029a2:	9309      	str	r3, [sp, #36]	; 0x24
 80029a4:	e76d      	b.n	8002882 <_svfiprintf_r+0x4a>
 80029a6:	fb05 3202 	mla	r2, r5, r2, r3
 80029aa:	2001      	movs	r0, #1
 80029ac:	460f      	mov	r7, r1
 80029ae:	e7a6      	b.n	80028fe <_svfiprintf_r+0xc6>
 80029b0:	2300      	movs	r3, #0
 80029b2:	3701      	adds	r7, #1
 80029b4:	9305      	str	r3, [sp, #20]
 80029b6:	4619      	mov	r1, r3
 80029b8:	250a      	movs	r5, #10
 80029ba:	4638      	mov	r0, r7
 80029bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029c0:	3a30      	subs	r2, #48	; 0x30
 80029c2:	2a09      	cmp	r2, #9
 80029c4:	d903      	bls.n	80029ce <_svfiprintf_r+0x196>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0c8      	beq.n	800295c <_svfiprintf_r+0x124>
 80029ca:	9105      	str	r1, [sp, #20]
 80029cc:	e7c6      	b.n	800295c <_svfiprintf_r+0x124>
 80029ce:	fb05 2101 	mla	r1, r5, r1, r2
 80029d2:	2301      	movs	r3, #1
 80029d4:	4607      	mov	r7, r0
 80029d6:	e7f0      	b.n	80029ba <_svfiprintf_r+0x182>
 80029d8:	ab03      	add	r3, sp, #12
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	4622      	mov	r2, r4
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <_svfiprintf_r+0x1ec>)
 80029e0:	a904      	add	r1, sp, #16
 80029e2:	4640      	mov	r0, r8
 80029e4:	f3af 8000 	nop.w
 80029e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80029ec:	4681      	mov	r9, r0
 80029ee:	d1d6      	bne.n	800299e <_svfiprintf_r+0x166>
 80029f0:	89a3      	ldrh	r3, [r4, #12]
 80029f2:	065b      	lsls	r3, r3, #25
 80029f4:	f53f af35 	bmi.w	8002862 <_svfiprintf_r+0x2a>
 80029f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029fa:	b01d      	add	sp, #116	; 0x74
 80029fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a00:	ab03      	add	r3, sp, #12
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	4622      	mov	r2, r4
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <_svfiprintf_r+0x1ec>)
 8002a08:	a904      	add	r1, sp, #16
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f000 f882 	bl	8002b14 <_printf_i>
 8002a10:	e7ea      	b.n	80029e8 <_svfiprintf_r+0x1b0>
 8002a12:	bf00      	nop
 8002a14:	08002fdf 	.word	0x08002fdf
 8002a18:	08002fe5 	.word	0x08002fe5
 8002a1c:	08002fe9 	.word	0x08002fe9
 8002a20:	00000000 	.word	0x00000000
 8002a24:	08002783 	.word	0x08002783

08002a28 <_printf_common>:
 8002a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a2c:	4691      	mov	r9, r2
 8002a2e:	461f      	mov	r7, r3
 8002a30:	688a      	ldr	r2, [r1, #8]
 8002a32:	690b      	ldr	r3, [r1, #16]
 8002a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	bfb8      	it	lt
 8002a3c:	4613      	movlt	r3, r2
 8002a3e:	f8c9 3000 	str.w	r3, [r9]
 8002a42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a46:	4606      	mov	r6, r0
 8002a48:	460c      	mov	r4, r1
 8002a4a:	b112      	cbz	r2, 8002a52 <_printf_common+0x2a>
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f8c9 3000 	str.w	r3, [r9]
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	0699      	lsls	r1, r3, #26
 8002a56:	bf42      	ittt	mi
 8002a58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a5c:	3302      	addmi	r3, #2
 8002a5e:	f8c9 3000 	strmi.w	r3, [r9]
 8002a62:	6825      	ldr	r5, [r4, #0]
 8002a64:	f015 0506 	ands.w	r5, r5, #6
 8002a68:	d107      	bne.n	8002a7a <_printf_common+0x52>
 8002a6a:	f104 0a19 	add.w	sl, r4, #25
 8002a6e:	68e3      	ldr	r3, [r4, #12]
 8002a70:	f8d9 2000 	ldr.w	r2, [r9]
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	42ab      	cmp	r3, r5
 8002a78:	dc28      	bgt.n	8002acc <_printf_common+0xa4>
 8002a7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a7e:	6822      	ldr	r2, [r4, #0]
 8002a80:	3300      	adds	r3, #0
 8002a82:	bf18      	it	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	0692      	lsls	r2, r2, #26
 8002a88:	d42d      	bmi.n	8002ae6 <_printf_common+0xbe>
 8002a8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a8e:	4639      	mov	r1, r7
 8002a90:	4630      	mov	r0, r6
 8002a92:	47c0      	blx	r8
 8002a94:	3001      	adds	r0, #1
 8002a96:	d020      	beq.n	8002ada <_printf_common+0xb2>
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	68e5      	ldr	r5, [r4, #12]
 8002a9c:	f8d9 2000 	ldr.w	r2, [r9]
 8002aa0:	f003 0306 	and.w	r3, r3, #6
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	bf08      	it	eq
 8002aa8:	1aad      	subeq	r5, r5, r2
 8002aaa:	68a3      	ldr	r3, [r4, #8]
 8002aac:	6922      	ldr	r2, [r4, #16]
 8002aae:	bf0c      	ite	eq
 8002ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ab4:	2500      	movne	r5, #0
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	bfc4      	itt	gt
 8002aba:	1a9b      	subgt	r3, r3, r2
 8002abc:	18ed      	addgt	r5, r5, r3
 8002abe:	f04f 0900 	mov.w	r9, #0
 8002ac2:	341a      	adds	r4, #26
 8002ac4:	454d      	cmp	r5, r9
 8002ac6:	d11a      	bne.n	8002afe <_printf_common+0xd6>
 8002ac8:	2000      	movs	r0, #0
 8002aca:	e008      	b.n	8002ade <_printf_common+0xb6>
 8002acc:	2301      	movs	r3, #1
 8002ace:	4652      	mov	r2, sl
 8002ad0:	4639      	mov	r1, r7
 8002ad2:	4630      	mov	r0, r6
 8002ad4:	47c0      	blx	r8
 8002ad6:	3001      	adds	r0, #1
 8002ad8:	d103      	bne.n	8002ae2 <_printf_common+0xba>
 8002ada:	f04f 30ff 	mov.w	r0, #4294967295
 8002ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ae2:	3501      	adds	r5, #1
 8002ae4:	e7c3      	b.n	8002a6e <_printf_common+0x46>
 8002ae6:	18e1      	adds	r1, r4, r3
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	2030      	movs	r0, #48	; 0x30
 8002aec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002af0:	4422      	add	r2, r4
 8002af2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002af6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002afa:	3302      	adds	r3, #2
 8002afc:	e7c5      	b.n	8002a8a <_printf_common+0x62>
 8002afe:	2301      	movs	r3, #1
 8002b00:	4622      	mov	r2, r4
 8002b02:	4639      	mov	r1, r7
 8002b04:	4630      	mov	r0, r6
 8002b06:	47c0      	blx	r8
 8002b08:	3001      	adds	r0, #1
 8002b0a:	d0e6      	beq.n	8002ada <_printf_common+0xb2>
 8002b0c:	f109 0901 	add.w	r9, r9, #1
 8002b10:	e7d8      	b.n	8002ac4 <_printf_common+0x9c>
	...

08002b14 <_printf_i>:
 8002b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b1c:	460c      	mov	r4, r1
 8002b1e:	7e09      	ldrb	r1, [r1, #24]
 8002b20:	b085      	sub	sp, #20
 8002b22:	296e      	cmp	r1, #110	; 0x6e
 8002b24:	4617      	mov	r7, r2
 8002b26:	4606      	mov	r6, r0
 8002b28:	4698      	mov	r8, r3
 8002b2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b2c:	f000 80b3 	beq.w	8002c96 <_printf_i+0x182>
 8002b30:	d822      	bhi.n	8002b78 <_printf_i+0x64>
 8002b32:	2963      	cmp	r1, #99	; 0x63
 8002b34:	d036      	beq.n	8002ba4 <_printf_i+0x90>
 8002b36:	d80a      	bhi.n	8002b4e <_printf_i+0x3a>
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	f000 80b9 	beq.w	8002cb0 <_printf_i+0x19c>
 8002b3e:	2958      	cmp	r1, #88	; 0x58
 8002b40:	f000 8083 	beq.w	8002c4a <_printf_i+0x136>
 8002b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b4c:	e032      	b.n	8002bb4 <_printf_i+0xa0>
 8002b4e:	2964      	cmp	r1, #100	; 0x64
 8002b50:	d001      	beq.n	8002b56 <_printf_i+0x42>
 8002b52:	2969      	cmp	r1, #105	; 0x69
 8002b54:	d1f6      	bne.n	8002b44 <_printf_i+0x30>
 8002b56:	6820      	ldr	r0, [r4, #0]
 8002b58:	6813      	ldr	r3, [r2, #0]
 8002b5a:	0605      	lsls	r5, r0, #24
 8002b5c:	f103 0104 	add.w	r1, r3, #4
 8002b60:	d52a      	bpl.n	8002bb8 <_printf_i+0xa4>
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6011      	str	r1, [r2, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	da03      	bge.n	8002b72 <_printf_i+0x5e>
 8002b6a:	222d      	movs	r2, #45	; 0x2d
 8002b6c:	425b      	negs	r3, r3
 8002b6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b72:	486f      	ldr	r0, [pc, #444]	; (8002d30 <_printf_i+0x21c>)
 8002b74:	220a      	movs	r2, #10
 8002b76:	e039      	b.n	8002bec <_printf_i+0xd8>
 8002b78:	2973      	cmp	r1, #115	; 0x73
 8002b7a:	f000 809d 	beq.w	8002cb8 <_printf_i+0x1a4>
 8002b7e:	d808      	bhi.n	8002b92 <_printf_i+0x7e>
 8002b80:	296f      	cmp	r1, #111	; 0x6f
 8002b82:	d020      	beq.n	8002bc6 <_printf_i+0xb2>
 8002b84:	2970      	cmp	r1, #112	; 0x70
 8002b86:	d1dd      	bne.n	8002b44 <_printf_i+0x30>
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	f043 0320 	orr.w	r3, r3, #32
 8002b8e:	6023      	str	r3, [r4, #0]
 8002b90:	e003      	b.n	8002b9a <_printf_i+0x86>
 8002b92:	2975      	cmp	r1, #117	; 0x75
 8002b94:	d017      	beq.n	8002bc6 <_printf_i+0xb2>
 8002b96:	2978      	cmp	r1, #120	; 0x78
 8002b98:	d1d4      	bne.n	8002b44 <_printf_i+0x30>
 8002b9a:	2378      	movs	r3, #120	; 0x78
 8002b9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ba0:	4864      	ldr	r0, [pc, #400]	; (8002d34 <_printf_i+0x220>)
 8002ba2:	e055      	b.n	8002c50 <_printf_i+0x13c>
 8002ba4:	6813      	ldr	r3, [r2, #0]
 8002ba6:	1d19      	adds	r1, r3, #4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6011      	str	r1, [r2, #0]
 8002bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e08c      	b.n	8002cd2 <_printf_i+0x1be>
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6011      	str	r1, [r2, #0]
 8002bbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bc0:	bf18      	it	ne
 8002bc2:	b21b      	sxthne	r3, r3
 8002bc4:	e7cf      	b.n	8002b66 <_printf_i+0x52>
 8002bc6:	6813      	ldr	r3, [r2, #0]
 8002bc8:	6825      	ldr	r5, [r4, #0]
 8002bca:	1d18      	adds	r0, r3, #4
 8002bcc:	6010      	str	r0, [r2, #0]
 8002bce:	0628      	lsls	r0, r5, #24
 8002bd0:	d501      	bpl.n	8002bd6 <_printf_i+0xc2>
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	e002      	b.n	8002bdc <_printf_i+0xc8>
 8002bd6:	0668      	lsls	r0, r5, #25
 8002bd8:	d5fb      	bpl.n	8002bd2 <_printf_i+0xbe>
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	4854      	ldr	r0, [pc, #336]	; (8002d30 <_printf_i+0x21c>)
 8002bde:	296f      	cmp	r1, #111	; 0x6f
 8002be0:	bf14      	ite	ne
 8002be2:	220a      	movne	r2, #10
 8002be4:	2208      	moveq	r2, #8
 8002be6:	2100      	movs	r1, #0
 8002be8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bec:	6865      	ldr	r5, [r4, #4]
 8002bee:	60a5      	str	r5, [r4, #8]
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	f2c0 8095 	blt.w	8002d20 <_printf_i+0x20c>
 8002bf6:	6821      	ldr	r1, [r4, #0]
 8002bf8:	f021 0104 	bic.w	r1, r1, #4
 8002bfc:	6021      	str	r1, [r4, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d13d      	bne.n	8002c7e <_printf_i+0x16a>
 8002c02:	2d00      	cmp	r5, #0
 8002c04:	f040 808e 	bne.w	8002d24 <_printf_i+0x210>
 8002c08:	4665      	mov	r5, ip
 8002c0a:	2a08      	cmp	r2, #8
 8002c0c:	d10b      	bne.n	8002c26 <_printf_i+0x112>
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	07db      	lsls	r3, r3, #31
 8002c12:	d508      	bpl.n	8002c26 <_printf_i+0x112>
 8002c14:	6923      	ldr	r3, [r4, #16]
 8002c16:	6862      	ldr	r2, [r4, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	bfde      	ittt	le
 8002c1c:	2330      	movle	r3, #48	; 0x30
 8002c1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c26:	ebac 0305 	sub.w	r3, ip, r5
 8002c2a:	6123      	str	r3, [r4, #16]
 8002c2c:	f8cd 8000 	str.w	r8, [sp]
 8002c30:	463b      	mov	r3, r7
 8002c32:	aa03      	add	r2, sp, #12
 8002c34:	4621      	mov	r1, r4
 8002c36:	4630      	mov	r0, r6
 8002c38:	f7ff fef6 	bl	8002a28 <_printf_common>
 8002c3c:	3001      	adds	r0, #1
 8002c3e:	d14d      	bne.n	8002cdc <_printf_i+0x1c8>
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	b005      	add	sp, #20
 8002c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c4a:	4839      	ldr	r0, [pc, #228]	; (8002d30 <_printf_i+0x21c>)
 8002c4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	6821      	ldr	r1, [r4, #0]
 8002c54:	1d1d      	adds	r5, r3, #4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6015      	str	r5, [r2, #0]
 8002c5a:	060a      	lsls	r2, r1, #24
 8002c5c:	d50b      	bpl.n	8002c76 <_printf_i+0x162>
 8002c5e:	07ca      	lsls	r2, r1, #31
 8002c60:	bf44      	itt	mi
 8002c62:	f041 0120 	orrmi.w	r1, r1, #32
 8002c66:	6021      	strmi	r1, [r4, #0]
 8002c68:	b91b      	cbnz	r3, 8002c72 <_printf_i+0x15e>
 8002c6a:	6822      	ldr	r2, [r4, #0]
 8002c6c:	f022 0220 	bic.w	r2, r2, #32
 8002c70:	6022      	str	r2, [r4, #0]
 8002c72:	2210      	movs	r2, #16
 8002c74:	e7b7      	b.n	8002be6 <_printf_i+0xd2>
 8002c76:	064d      	lsls	r5, r1, #25
 8002c78:	bf48      	it	mi
 8002c7a:	b29b      	uxthmi	r3, r3
 8002c7c:	e7ef      	b.n	8002c5e <_printf_i+0x14a>
 8002c7e:	4665      	mov	r5, ip
 8002c80:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c84:	fb02 3311 	mls	r3, r2, r1, r3
 8002c88:	5cc3      	ldrb	r3, [r0, r3]
 8002c8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c8e:	460b      	mov	r3, r1
 8002c90:	2900      	cmp	r1, #0
 8002c92:	d1f5      	bne.n	8002c80 <_printf_i+0x16c>
 8002c94:	e7b9      	b.n	8002c0a <_printf_i+0xf6>
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	6825      	ldr	r5, [r4, #0]
 8002c9a:	6961      	ldr	r1, [r4, #20]
 8002c9c:	1d18      	adds	r0, r3, #4
 8002c9e:	6010      	str	r0, [r2, #0]
 8002ca0:	0628      	lsls	r0, r5, #24
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	d501      	bpl.n	8002caa <_printf_i+0x196>
 8002ca6:	6019      	str	r1, [r3, #0]
 8002ca8:	e002      	b.n	8002cb0 <_printf_i+0x19c>
 8002caa:	066a      	lsls	r2, r5, #25
 8002cac:	d5fb      	bpl.n	8002ca6 <_printf_i+0x192>
 8002cae:	8019      	strh	r1, [r3, #0]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	6123      	str	r3, [r4, #16]
 8002cb4:	4665      	mov	r5, ip
 8002cb6:	e7b9      	b.n	8002c2c <_printf_i+0x118>
 8002cb8:	6813      	ldr	r3, [r2, #0]
 8002cba:	1d19      	adds	r1, r3, #4
 8002cbc:	6011      	str	r1, [r2, #0]
 8002cbe:	681d      	ldr	r5, [r3, #0]
 8002cc0:	6862      	ldr	r2, [r4, #4]
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	f7fd fa83 	bl	80001d0 <memchr>
 8002cca:	b108      	cbz	r0, 8002cd0 <_printf_i+0x1bc>
 8002ccc:	1b40      	subs	r0, r0, r5
 8002cce:	6060      	str	r0, [r4, #4]
 8002cd0:	6863      	ldr	r3, [r4, #4]
 8002cd2:	6123      	str	r3, [r4, #16]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cda:	e7a7      	b.n	8002c2c <_printf_i+0x118>
 8002cdc:	6923      	ldr	r3, [r4, #16]
 8002cde:	462a      	mov	r2, r5
 8002ce0:	4639      	mov	r1, r7
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	47c0      	blx	r8
 8002ce6:	3001      	adds	r0, #1
 8002ce8:	d0aa      	beq.n	8002c40 <_printf_i+0x12c>
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	079b      	lsls	r3, r3, #30
 8002cee:	d413      	bmi.n	8002d18 <_printf_i+0x204>
 8002cf0:	68e0      	ldr	r0, [r4, #12]
 8002cf2:	9b03      	ldr	r3, [sp, #12]
 8002cf4:	4298      	cmp	r0, r3
 8002cf6:	bfb8      	it	lt
 8002cf8:	4618      	movlt	r0, r3
 8002cfa:	e7a3      	b.n	8002c44 <_printf_i+0x130>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	464a      	mov	r2, r9
 8002d00:	4639      	mov	r1, r7
 8002d02:	4630      	mov	r0, r6
 8002d04:	47c0      	blx	r8
 8002d06:	3001      	adds	r0, #1
 8002d08:	d09a      	beq.n	8002c40 <_printf_i+0x12c>
 8002d0a:	3501      	adds	r5, #1
 8002d0c:	68e3      	ldr	r3, [r4, #12]
 8002d0e:	9a03      	ldr	r2, [sp, #12]
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	42ab      	cmp	r3, r5
 8002d14:	dcf2      	bgt.n	8002cfc <_printf_i+0x1e8>
 8002d16:	e7eb      	b.n	8002cf0 <_printf_i+0x1dc>
 8002d18:	2500      	movs	r5, #0
 8002d1a:	f104 0919 	add.w	r9, r4, #25
 8002d1e:	e7f5      	b.n	8002d0c <_printf_i+0x1f8>
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ac      	bne.n	8002c7e <_printf_i+0x16a>
 8002d24:	7803      	ldrb	r3, [r0, #0]
 8002d26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d2e:	e76c      	b.n	8002c0a <_printf_i+0xf6>
 8002d30:	08002ff0 	.word	0x08002ff0
 8002d34:	08003001 	.word	0x08003001

08002d38 <memcpy>:
 8002d38:	b510      	push	{r4, lr}
 8002d3a:	1e43      	subs	r3, r0, #1
 8002d3c:	440a      	add	r2, r1
 8002d3e:	4291      	cmp	r1, r2
 8002d40:	d100      	bne.n	8002d44 <memcpy+0xc>
 8002d42:	bd10      	pop	{r4, pc}
 8002d44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d4c:	e7f7      	b.n	8002d3e <memcpy+0x6>

08002d4e <memmove>:
 8002d4e:	4288      	cmp	r0, r1
 8002d50:	b510      	push	{r4, lr}
 8002d52:	eb01 0302 	add.w	r3, r1, r2
 8002d56:	d807      	bhi.n	8002d68 <memmove+0x1a>
 8002d58:	1e42      	subs	r2, r0, #1
 8002d5a:	4299      	cmp	r1, r3
 8002d5c:	d00a      	beq.n	8002d74 <memmove+0x26>
 8002d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d62:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d66:	e7f8      	b.n	8002d5a <memmove+0xc>
 8002d68:	4283      	cmp	r3, r0
 8002d6a:	d9f5      	bls.n	8002d58 <memmove+0xa>
 8002d6c:	1881      	adds	r1, r0, r2
 8002d6e:	1ad2      	subs	r2, r2, r3
 8002d70:	42d3      	cmn	r3, r2
 8002d72:	d100      	bne.n	8002d76 <memmove+0x28>
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d7a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d7e:	e7f7      	b.n	8002d70 <memmove+0x22>

08002d80 <_free_r>:
 8002d80:	b538      	push	{r3, r4, r5, lr}
 8002d82:	4605      	mov	r5, r0
 8002d84:	2900      	cmp	r1, #0
 8002d86:	d045      	beq.n	8002e14 <_free_r+0x94>
 8002d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d8c:	1f0c      	subs	r4, r1, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	bfb8      	it	lt
 8002d92:	18e4      	addlt	r4, r4, r3
 8002d94:	f000 f8d2 	bl	8002f3c <__malloc_lock>
 8002d98:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <_free_r+0x98>)
 8002d9a:	6813      	ldr	r3, [r2, #0]
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	b933      	cbnz	r3, 8002dae <_free_r+0x2e>
 8002da0:	6063      	str	r3, [r4, #4]
 8002da2:	6014      	str	r4, [r2, #0]
 8002da4:	4628      	mov	r0, r5
 8002da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002daa:	f000 b8c8 	b.w	8002f3e <__malloc_unlock>
 8002dae:	42a3      	cmp	r3, r4
 8002db0:	d90c      	bls.n	8002dcc <_free_r+0x4c>
 8002db2:	6821      	ldr	r1, [r4, #0]
 8002db4:	1862      	adds	r2, r4, r1
 8002db6:	4293      	cmp	r3, r2
 8002db8:	bf04      	itt	eq
 8002dba:	681a      	ldreq	r2, [r3, #0]
 8002dbc:	685b      	ldreq	r3, [r3, #4]
 8002dbe:	6063      	str	r3, [r4, #4]
 8002dc0:	bf04      	itt	eq
 8002dc2:	1852      	addeq	r2, r2, r1
 8002dc4:	6022      	streq	r2, [r4, #0]
 8002dc6:	6004      	str	r4, [r0, #0]
 8002dc8:	e7ec      	b.n	8002da4 <_free_r+0x24>
 8002dca:	4613      	mov	r3, r2
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	b10a      	cbz	r2, 8002dd4 <_free_r+0x54>
 8002dd0:	42a2      	cmp	r2, r4
 8002dd2:	d9fa      	bls.n	8002dca <_free_r+0x4a>
 8002dd4:	6819      	ldr	r1, [r3, #0]
 8002dd6:	1858      	adds	r0, r3, r1
 8002dd8:	42a0      	cmp	r0, r4
 8002dda:	d10b      	bne.n	8002df4 <_free_r+0x74>
 8002ddc:	6820      	ldr	r0, [r4, #0]
 8002dde:	4401      	add	r1, r0
 8002de0:	1858      	adds	r0, r3, r1
 8002de2:	4282      	cmp	r2, r0
 8002de4:	6019      	str	r1, [r3, #0]
 8002de6:	d1dd      	bne.n	8002da4 <_free_r+0x24>
 8002de8:	6810      	ldr	r0, [r2, #0]
 8002dea:	6852      	ldr	r2, [r2, #4]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	4401      	add	r1, r0
 8002df0:	6019      	str	r1, [r3, #0]
 8002df2:	e7d7      	b.n	8002da4 <_free_r+0x24>
 8002df4:	d902      	bls.n	8002dfc <_free_r+0x7c>
 8002df6:	230c      	movs	r3, #12
 8002df8:	602b      	str	r3, [r5, #0]
 8002dfa:	e7d3      	b.n	8002da4 <_free_r+0x24>
 8002dfc:	6820      	ldr	r0, [r4, #0]
 8002dfe:	1821      	adds	r1, r4, r0
 8002e00:	428a      	cmp	r2, r1
 8002e02:	bf04      	itt	eq
 8002e04:	6811      	ldreq	r1, [r2, #0]
 8002e06:	6852      	ldreq	r2, [r2, #4]
 8002e08:	6062      	str	r2, [r4, #4]
 8002e0a:	bf04      	itt	eq
 8002e0c:	1809      	addeq	r1, r1, r0
 8002e0e:	6021      	streq	r1, [r4, #0]
 8002e10:	605c      	str	r4, [r3, #4]
 8002e12:	e7c7      	b.n	8002da4 <_free_r+0x24>
 8002e14:	bd38      	pop	{r3, r4, r5, pc}
 8002e16:	bf00      	nop
 8002e18:	200000a0 	.word	0x200000a0

08002e1c <_malloc_r>:
 8002e1c:	b570      	push	{r4, r5, r6, lr}
 8002e1e:	1ccd      	adds	r5, r1, #3
 8002e20:	f025 0503 	bic.w	r5, r5, #3
 8002e24:	3508      	adds	r5, #8
 8002e26:	2d0c      	cmp	r5, #12
 8002e28:	bf38      	it	cc
 8002e2a:	250c      	movcc	r5, #12
 8002e2c:	2d00      	cmp	r5, #0
 8002e2e:	4606      	mov	r6, r0
 8002e30:	db01      	blt.n	8002e36 <_malloc_r+0x1a>
 8002e32:	42a9      	cmp	r1, r5
 8002e34:	d903      	bls.n	8002e3e <_malloc_r+0x22>
 8002e36:	230c      	movs	r3, #12
 8002e38:	6033      	str	r3, [r6, #0]
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	bd70      	pop	{r4, r5, r6, pc}
 8002e3e:	f000 f87d 	bl	8002f3c <__malloc_lock>
 8002e42:	4a21      	ldr	r2, [pc, #132]	; (8002ec8 <_malloc_r+0xac>)
 8002e44:	6814      	ldr	r4, [r2, #0]
 8002e46:	4621      	mov	r1, r4
 8002e48:	b991      	cbnz	r1, 8002e70 <_malloc_r+0x54>
 8002e4a:	4c20      	ldr	r4, [pc, #128]	; (8002ecc <_malloc_r+0xb0>)
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	b91b      	cbnz	r3, 8002e58 <_malloc_r+0x3c>
 8002e50:	4630      	mov	r0, r6
 8002e52:	f000 f863 	bl	8002f1c <_sbrk_r>
 8002e56:	6020      	str	r0, [r4, #0]
 8002e58:	4629      	mov	r1, r5
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f000 f85e 	bl	8002f1c <_sbrk_r>
 8002e60:	1c43      	adds	r3, r0, #1
 8002e62:	d124      	bne.n	8002eae <_malloc_r+0x92>
 8002e64:	230c      	movs	r3, #12
 8002e66:	6033      	str	r3, [r6, #0]
 8002e68:	4630      	mov	r0, r6
 8002e6a:	f000 f868 	bl	8002f3e <__malloc_unlock>
 8002e6e:	e7e4      	b.n	8002e3a <_malloc_r+0x1e>
 8002e70:	680b      	ldr	r3, [r1, #0]
 8002e72:	1b5b      	subs	r3, r3, r5
 8002e74:	d418      	bmi.n	8002ea8 <_malloc_r+0x8c>
 8002e76:	2b0b      	cmp	r3, #11
 8002e78:	d90f      	bls.n	8002e9a <_malloc_r+0x7e>
 8002e7a:	600b      	str	r3, [r1, #0]
 8002e7c:	50cd      	str	r5, [r1, r3]
 8002e7e:	18cc      	adds	r4, r1, r3
 8002e80:	4630      	mov	r0, r6
 8002e82:	f000 f85c 	bl	8002f3e <__malloc_unlock>
 8002e86:	f104 000b 	add.w	r0, r4, #11
 8002e8a:	1d23      	adds	r3, r4, #4
 8002e8c:	f020 0007 	bic.w	r0, r0, #7
 8002e90:	1ac3      	subs	r3, r0, r3
 8002e92:	d0d3      	beq.n	8002e3c <_malloc_r+0x20>
 8002e94:	425a      	negs	r2, r3
 8002e96:	50e2      	str	r2, [r4, r3]
 8002e98:	e7d0      	b.n	8002e3c <_malloc_r+0x20>
 8002e9a:	428c      	cmp	r4, r1
 8002e9c:	684b      	ldr	r3, [r1, #4]
 8002e9e:	bf16      	itet	ne
 8002ea0:	6063      	strne	r3, [r4, #4]
 8002ea2:	6013      	streq	r3, [r2, #0]
 8002ea4:	460c      	movne	r4, r1
 8002ea6:	e7eb      	b.n	8002e80 <_malloc_r+0x64>
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	6849      	ldr	r1, [r1, #4]
 8002eac:	e7cc      	b.n	8002e48 <_malloc_r+0x2c>
 8002eae:	1cc4      	adds	r4, r0, #3
 8002eb0:	f024 0403 	bic.w	r4, r4, #3
 8002eb4:	42a0      	cmp	r0, r4
 8002eb6:	d005      	beq.n	8002ec4 <_malloc_r+0xa8>
 8002eb8:	1a21      	subs	r1, r4, r0
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f000 f82e 	bl	8002f1c <_sbrk_r>
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	d0cf      	beq.n	8002e64 <_malloc_r+0x48>
 8002ec4:	6025      	str	r5, [r4, #0]
 8002ec6:	e7db      	b.n	8002e80 <_malloc_r+0x64>
 8002ec8:	200000a0 	.word	0x200000a0
 8002ecc:	200000a4 	.word	0x200000a4

08002ed0 <_realloc_r>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	4607      	mov	r7, r0
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	460e      	mov	r6, r1
 8002ed8:	b921      	cbnz	r1, 8002ee4 <_realloc_r+0x14>
 8002eda:	4611      	mov	r1, r2
 8002edc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ee0:	f7ff bf9c 	b.w	8002e1c <_malloc_r>
 8002ee4:	b922      	cbnz	r2, 8002ef0 <_realloc_r+0x20>
 8002ee6:	f7ff ff4b 	bl	8002d80 <_free_r>
 8002eea:	4625      	mov	r5, r4
 8002eec:	4628      	mov	r0, r5
 8002eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef0:	f000 f826 	bl	8002f40 <_malloc_usable_size_r>
 8002ef4:	42a0      	cmp	r0, r4
 8002ef6:	d20f      	bcs.n	8002f18 <_realloc_r+0x48>
 8002ef8:	4621      	mov	r1, r4
 8002efa:	4638      	mov	r0, r7
 8002efc:	f7ff ff8e 	bl	8002e1c <_malloc_r>
 8002f00:	4605      	mov	r5, r0
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d0f2      	beq.n	8002eec <_realloc_r+0x1c>
 8002f06:	4631      	mov	r1, r6
 8002f08:	4622      	mov	r2, r4
 8002f0a:	f7ff ff15 	bl	8002d38 <memcpy>
 8002f0e:	4631      	mov	r1, r6
 8002f10:	4638      	mov	r0, r7
 8002f12:	f7ff ff35 	bl	8002d80 <_free_r>
 8002f16:	e7e9      	b.n	8002eec <_realloc_r+0x1c>
 8002f18:	4635      	mov	r5, r6
 8002f1a:	e7e7      	b.n	8002eec <_realloc_r+0x1c>

08002f1c <_sbrk_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4c06      	ldr	r4, [pc, #24]	; (8002f38 <_sbrk_r+0x1c>)
 8002f20:	2300      	movs	r3, #0
 8002f22:	4605      	mov	r5, r0
 8002f24:	4608      	mov	r0, r1
 8002f26:	6023      	str	r3, [r4, #0]
 8002f28:	f7fe fe6e 	bl	8001c08 <_sbrk>
 8002f2c:	1c43      	adds	r3, r0, #1
 8002f2e:	d102      	bne.n	8002f36 <_sbrk_r+0x1a>
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	b103      	cbz	r3, 8002f36 <_sbrk_r+0x1a>
 8002f34:	602b      	str	r3, [r5, #0]
 8002f36:	bd38      	pop	{r3, r4, r5, pc}
 8002f38:	200001b0 	.word	0x200001b0

08002f3c <__malloc_lock>:
 8002f3c:	4770      	bx	lr

08002f3e <__malloc_unlock>:
 8002f3e:	4770      	bx	lr

08002f40 <_malloc_usable_size_r>:
 8002f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f44:	1f18      	subs	r0, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bfbc      	itt	lt
 8002f4a:	580b      	ldrlt	r3, [r1, r0]
 8002f4c:	18c0      	addlt	r0, r0, r3
 8002f4e:	4770      	bx	lr

08002f50 <_init>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	bf00      	nop
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr

08002f5c <_fini>:
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	bf00      	nop
 8002f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f62:	bc08      	pop	{r3}
 8002f64:	469e      	mov	lr, r3
 8002f66:	4770      	bx	lr
